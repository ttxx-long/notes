<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hello-world - 副本</title>
    <url>/%E9%9A%8F%E5%A0%82%E7%AC%94%E8%AE%B0/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;
</code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server
</code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate
</code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy
</code></pre>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>初识软件测试</title>
    <url>/%E9%9A%8F%E5%A0%82%E7%AC%94%E8%AE%B0/01_%E8%AF%BE%E5%89%8D/01_%E5%88%9D%E8%AF%86%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h2 id="1-首先介绍下我们要进入的行业"><a href="#1-首先介绍下我们要进入的行业" class="headerlink" title="1. 首先介绍下我们要进入的行业"></a>1. 首先介绍下我们要进入的行业</h2><pre><code>1. IT已经我们公认熟知的行业，那么软件测试作为IT行业的一员也应该被大家所熟知：
    1. 什么是IT
        1. IT是Information Technology英文的缩写，全称含义为“信息技术”涵盖的范围很广，主要包括：现代计算机、网络通讯等信息领域的技术。
    2. IT分类：实际上有三个层次
        1. 硬件：
            1. 主要指数据存储、处理和传输的主机和网络通信设备
        2. 软件：
            1. 包括可用来搜集、存储、检索、分析、应用、评估信息的各种软件，它包括我们通常所指的ERP(企业资源计划)、CRM(客户关系管理)、SCM(供应链管理)等商用管理软件，也包括用来加强流程管理的WF(工作流)管理软件、辅助分析的DW/DM(数据仓库和数据挖掘)软件等
        3. 应用：
            1. 指搜集、存储、检索、分析、应用、评估使用各种信息，包括应用ERP、CRM、SCM等软件直接辅助决策，也包括利用其它决策分析模型或借助DW/DM等技术手段来进一步提高分析的质量，辅助决策者作决策
</code></pre>
<h2 id="2-在各个行业都会出现“测试”一词"><a href="#2-在各个行业都会出现“测试”一词" class="headerlink" title="2. 在各个行业都会出现“测试”一词"></a>2. 在各个行业都会出现“测试”一词</h2><pre><code>1. 什么是测试？
    1. 测试是具有试验性质的测量，即测量和试验的综合
2. 在IT行业测试职位是怎么称呼的？
    1. 硬件--------------&gt;&gt;&gt;&gt;&gt;   硬件测试工程师
    2. 软件--------------&gt;&gt;&gt;&gt;&gt;   软件测试工程师
    3. 应用--------------&gt;&gt;&gt;&gt;&gt;   应用测试工程师
</code></pre>
<h2 id="3-桐桐信息技术的教学目的"><a href="#3-桐桐信息技术的教学目的" class="headerlink" title="3. 桐桐信息技术的教学目的"></a>3. 桐桐信息技术的教学目的</h2><pre><code>1. 我们所要做的就是塑造/培养软件测试工程师
2. 提升软件测试工程师的技术/技能与认知
3. 为我们本地培养高技能人才
</code></pre>
<h2 id="4-什么是软件测试工程师"><a href="#4-什么是软件测试工程师" class="headerlink" title="4. 什么是软件测试工程师"></a>4. 什么是软件测试工程师</h2><pre><code>1. 软件测试工程师（Software Testing Engineer）指理解产品的功能要求，并对其进行测试，检查软件有没有错误（Bug），测试软件是否具有稳定性（Robustness），写出相应的测试规范和测试用例的专门工作人员。
2. 简而言之，软件测试工程师在一家软件企业中担当的是“质量管理”角色，及时发现软件问题并及时督促更正，确保产品的正常运作。
</code></pre>
<h2 id="5-软件测试工程师的等级划分"><a href="#5-软件测试工程师的等级划分" class="headerlink" title="5. 软件测试工程师的等级划分"></a>5. 软件测试工程师的等级划分</h2><pre><code>1. 初级测试工程师
2. 中级测试工程师
3. 高级测试工程师
4. 测试管理人员
5. 测试经理
6. 测试总监
</code></pre>
<h2 id="6-在桐桐信息技术培训人才技能范围"><a href="#6-在桐桐信息技术培训人才技能范围" class="headerlink" title="6. 在桐桐信息技术培训人才技能范围"></a>6. 在桐桐信息技术培训人才技能范围</h2><pre><code>1. 中级测试工程师、高级测试工程师、测试管理人员
</code></pre>
<h1 id="7-不同等级学习的技能范围"><a href="#7-不同等级学习的技能范围" class="headerlink" title="7. 不同等级学习的技能范围"></a>7. 不同等级学习的技能范围</h1><pre><code>1. 中级测试工程师

    1. 功能测试、接口测试、抓包技能、项目管理工具使用、查看日志、分析问题
2. 高级测试工程师

    1. 在终极测试工程师的基础上、性能测试、安全测试、自动化测试
3. 测试管理人员

    1. 在高级测试工程师基础上、管理技能（包括项目管理、人员管理）
</code></pre>
]]></content>
      <categories>
        <category>课前</category>
        <category>初识测试</category>
      </categories>
      <tags>
        <tag>课前</tag>
      </tags>
  </entry>
  <entry>
    <title>了解软件测试行业</title>
    <url>/%E9%9A%8F%E5%A0%82%E7%AC%94%E8%AE%B0/01_%E8%AF%BE%E5%89%8D/02_%E6%B5%8B%E8%AF%95%E8%A1%8C%E4%B8%9A/</url>
    <content><![CDATA[<p>随着中国IT行业的发展以及未来AI时代的到来。越来越多的人加入到IT行业，对于很多没有从事过IT工作的人来，或者对于很多专业跟IT扯不上关系的人来说。转行做软件测试是一个很好的选择。</p>
<p>软件开发起码要培训半年以上，才能胜任工作。 而软件测试只需要1个月。</p>
<h2 id="1-测试行业介绍"><a href="#1-测试行业介绍" class="headerlink" title="1 测试行业介绍"></a><strong>1 测试行业介绍</strong></h2><p>目前IT企业也越来越重视软件产品的质量， 从软件，硬件到系统集成，几乎每个小中大IT企业，在产品发布之前都需要大量的测试工作。软件测试工程师，是目前IT行业非常短缺的人才，中国软件行业每年要新增几十万的测试岗位就业机会。但是学校培养出来的测试人才却不足需求量的十分之一。</p>
<p>目前软件测试行业的缺口非常大。 90%的测试人员是不会写代码的，但是薪资依然可观。基本上一个三年测试经验的人，薪资都在万元以上。未来的职业发展前景也非常广阔。</p>
<h2 id="2-软件测试是做什么的"><a href="#2-软件测试是做什么的" class="headerlink" title="2 软件测试是做什么的"></a><strong>2 软件测试是做什么的</strong></h2><p><img src="/assets/wpsC670.tmp-20211222145920-4awo4by.jpg"></p>
<p>软件测试，就是找出软件系统中的错误，并且确保软件开发人员修复这些错误， 最终移交一个质量好的软件，给客户使用。</p>
<p>比如下图，一个网页中的密码输入框中的字符不是用星号显示，而是明文显示。这就是一个软件的bug。软件测试就是要将这些bug找出来</p>
<p><img src="/assets/wpsC671.tmp-20211222145920-cq9ge46.jpg"></p>
<p>下图是一个功能性的Bug，这种Bug比较严重，会影响用户的使用，甚至会给用户造成损失，所以软件测试就是需要提前把这些Bug找出来，确保软件交付给用户使用后，没有问题。</p>
<h2 id="3-入门门槛非常低"><a href="#3-入门门槛非常低" class="headerlink" title="3 入门门槛非常低"></a><strong>3 入门门槛非常低</strong></h2><p>经常听想入行的朋友说，我想转软件测试，听说软件测试很简单。的确，软件测试入门是很简单。</p>
<p>IT行业中有几百个工种， 其中软件测试是入门门槛最低。普通人只要经过短期的培训，大概学一个月就能胜任响应的软件测试工作。软件测试人员起薪在7000元-10000元不等，工作三年后，月薪基本上能达到10000到15000。</p>
<p>软件测试入门虽然简单， 但是精通很难。</p>
<h2 id="4-测试人员每天的日常工作"><a href="#4-测试人员每天的日常工作" class="headerlink" title="4 测试人员每天的日常工作"></a><strong>4 测试人员每天的日常工作</strong></h2><p>大部分软件测试人员的工作可以简单的归为这几个字， “点点点，开Bug”。</p>
<h2 id="5-一些转行实例"><a href="#5-一些转行实例" class="headerlink" title="5 一些转行实例"></a><strong>5 一些转行实例</strong></h2><p>身边转行做测试的例子太多了， 我举几个实际的转行的例子。这些例子都是真实的。</p>
<p>我姑姑的儿子大学专科毕业，找不到工作，因为他们的学校一塌糊涂，大学的时候玩游戏，什么都没学到。本来他打算南下广东， 去进厂当流水线工人的。 我姑姑不甘心他儿子去进厂当流水线工人。 然后就拜托我帮帮忙。 后来我这弟弟就来到上海投奔我。 我培训了2个月软件测试。 弟弟很轻松的就进入了一家软件公司，到现在做了快5年了， 已经成长为一名高级测试工程师。</p>
<p>后来我就把好几个堂弟以及一些亲戚，都拉到上海来从事软件测试行业。目前家族中很多人都是从事软件测试行业。</p>
<p>JJO,  是96年的小姑娘， 今年24岁， 大专毕业后，一直在某酒店做前台工作人员， 月薪大概3000.， 做了2年了， 薪资只够自己开销，完全存不到钱，感觉到很迷茫。 偶然的机会由亲戚介绍，接触了软件测试。 开始跟人学习软件测试。学好出来后。</p>
<p>开始来到深圳做软件测试， 月薪一万。 越来越喜欢做软件测这份工作。</p>
<p> 小明，男，大学毕业后，非常迷茫不知道做什么， 就去广东打工， 进了一个工厂，在流水线上工作，每个月也就4000多，不想做了后，又去一家鞋厂做。做了几个月，又不想做了。 觉得没有前途， 难道做到30岁，还是这么点工资吗？ 觉得自己需要改变， 后来机缘巧合，开始学习软件测试。 最终成功入行。    到现在50W一年的薪资。</p>
<p>小荣荣，女，大专毕业，今年30岁了，在上海一家公司做硬件检测8年了，月薪才4000多。有个女儿三岁了。 这点薪资完全不够用。后来决心赌一把，开始学习软件测试。学了大概1个月后，转行做软件测试，入行的时候薪水是1万。 工作后，又持续学习。还学了Python编程。到现在月薪已经超过2万多了。</p>
<h2 id="6-哪些人适合转行"><a href="#6-哪些人适合转行" class="headerlink" title="6 哪些人适合转行"></a><strong>6 哪些人适合转行</strong></h2><h3 id="6-1-专业是计算机专业的毕业生"><a href="#6-1-专业是计算机专业的毕业生" class="headerlink" title="6.1 专业是计算机专业的毕业生"></a>6.1 专业是计算机专业的毕业生</h3><p>一点问题没有， 只要不要辛苦，姿态放低一点。 很简单</p>
<h3 id="6-2-非计算机专业的毕业生"><a href="#6-2-非计算机专业的毕业生" class="headerlink" title="6.2 非计算机专业的毕业生"></a>6.2 非计算机专业的毕业生</h3><p>不是计算机专业的，从事软件测试完全没问题。</p>
<h3 id="6-3-转行的人。"><a href="#6-3-转行的人。" class="headerlink" title="6.3 转行的人。"></a>6.3 转行的人。</h3><p>目前软件测试行业，很多人都不是计算机专业的。 很多都是别的行业转行过来的。</p>
<h3 id="6-4-在一些城市，薪资少于8000"><a href="#6-4-在一些城市，薪资少于8000" class="headerlink" title="6.4 在一些城市，薪资少于8000"></a>6.4 在一些城市，薪资少于8000</h3><p>生活在一线城市，目前的薪资少于6000，并且在可遇见的未来几年，薪资不会有很大提升的职业。都可以选择转行做软件测试。</p>
<h2 id="7-软件测试职业规划"><a href="#7-软件测试职业规划" class="headerlink" title="7 软件测试职业规划"></a><strong>7 软件测试职业规划</strong></h2><p>本人从事软件8多年，认识的测试人员超过上千位，有很多工作超过10年的老测试，也有很多刚毕业刚进入测试行业的人。根据我认识的测试人员目前的情况，我大概列出以下软件测试的职业规划</p>
<p><img src="/assets/wpsC672.tmp-20211222145920-h98oqep.jpg"></p>
<p>就2018年上海地区来行情来说，一个刚毕业的本科生从事软件测试行业大概薪水是5000到7000左右， 3年测试经验薪水大概是9000-13000左右，5年测试经验的薪水大概在13000-20000左右。10年以上的老测试大概在30000以上。</p>
<p>根据行业的不同，薪资的差别也比较大。互联网和外企的薪水会较高。互联网的工作强度大，加班多。当然薪资要偏高。 外企要求英语好+技术好。 英语好和技术同时要好，属于复合型人才，这种人才比较稀缺。所以待遇也相应要好很多。</p>
<p>测试人员不但需要对软件的质量进行检测，还能接触到与软件相关的各行各业，项目管理、沟通协调、市场需求分析等能力都能得到很好的锻炼，从而为自己的多元化发展奠定了基础，经过实践几年后，很容易晋升到主管、项目经理等高级职位。</p>
<h2 id="8-软件测试职业的优点"><a href="#8-软件测试职业的优点" class="headerlink" title="8 软件测试职业的优点"></a><strong>8 软件测试职业的优点</strong></h2><p>个人觉得软件测试职业具备很多优点。</p>
<h3 id="8-1-优点1-非常适合女生"><a href="#8-1-优点1-非常适合女生" class="headerlink" title="8.1 优点1 非常适合女生"></a><strong>8.1 优点1 非常适合女生</strong></h3><p>女生具备很多优点，首先女生稍微细心，更容易发现Bug。女生的沟通能力比较好， 发现Bug后，找开发人员沟通的比较顺畅，90%的开发都是男的，会比较有风度。</p>
<p>大家会发现软件开发中女生占的比例是10%以下。而在软件测试中，女生占的比例有50%左右。</p>
<p>我身边很多从事软件测试的女生，生活都过得很好。很多女同事薪资都超过2W，老公的薪资更高。很多在上海生了二胎，买了二套房。</p>
<p>所以女生很适合做软件测试行业。</p>
<h3 id="8-2-优点2-适合平庸的人"><a href="#8-2-优点2-适合平庸的人" class="headerlink" title="8.2 优点2 适合平庸的人"></a><strong>8.2 优点2 适合平庸的人</strong></h3><p>平常工作中接触过太多牛人了，很多刚毕业的人，写代码的水平相当高。可以独立开发很大的系统。接触了很多智商高的人。我深深的体会到，被碾压的感觉。</p>
<p>软件测试非常适合平庸的人。 因为不需要天才也能做。</p>
<h3 id="8-3-优点3-劳动强度和压力适中"><a href="#8-3-优点3-劳动强度和压力适中" class="headerlink" title="8.3 优点3 劳动强度和压力适中"></a><strong>8.3 优点3 劳动强度和压力适中</strong></h3><p>软件行业大家的压力都比较大， 尤其是开发人员的压力很大啊， 相比之下，软件测试的劳动强度和压力，都比软件开发小很多。  很适合女同学做。</p>
<p>开发人员在开发项目的时候，会碰到很多技术难题，很难保证一个全新的项目能否按时开发完。 测试就好很多，测试工作中的主要是工作量大的问题，大不了加班，不存在完不成的问题，心里压力要小很多。</p>
<h2 id="9-软件测试职业的缺点"><a href="#9-软件测试职业的缺点" class="headerlink" title="9 软件测试职业的缺点"></a><strong>9 软件测试职业的缺点</strong></h2><p>说了这么多优点，下面来说说缺点。</p>
<h3 id="9-1-缺点1：薪资比开发工程师低"><a href="#9-1-缺点1：薪资比开发工程师低" class="headerlink" title="9.1 缺点1：薪资比开发工程师低"></a><strong>9.1 缺点1：薪资比开发工程师低</strong></h3><p>测试工程师的薪资普遍要比开发工程师低20%以上。这个其实是合理的。</p>
<h3 id="9-2-缺点2：没法创业和赚外快"><a href="#9-2-缺点2：没法创业和赚外快" class="headerlink" title="9.2 缺点2：没法创业和赚外快"></a><strong>9.2 缺点2：没法创业和赚外快</strong></h3><p>身边很多人创业，很多同事是边工作边赚外快，帮别人做网站，做APP，维护系统之类的。当外快的钱比上班的的钱还多之后，很多同事就辞职，全职创业了。</p>
<p>而软件测试就没有这样的机会，至少我没听说几个软件测试创业成功的。</p>
<h2 id="10-传统的软件公司和互联网公司的区别"><a href="#10-传统的软件公司和互联网公司的区别" class="headerlink" title="10 传统的软件公司和互联网公司的区别"></a><strong>10 传统的软件公司和互联网公司的区别</strong></h2><p>互联网公司需要大量的测试人员，那么什么样的公司才是互联网公司呢？</p>
<ol>
<li>传统软件公司的产品和服务依赖于特定的终端和相应的操作系统，而互联网公司产品和服务则依赖于浏览器和网络。</li>
<li>传统软件公司是卖软件给用户用，互联网公司是自己运营。</li>
<li>传统软件公司需求都是从真正用软件的用户那里间接得来的，需求经过收集，传递，分析，实现，测试，上线。整个过程很长。互联网公司一般都是自己开发自己用，有什么问题立刻改。</li>
<li>从用户角度看， 传统软件产品都是在本地，需要自己安装。而互联网公司的产品只需要通过互联网来访问。比如通过浏览器或者APP来使用。</li>
<li>传统软件公司上线周期长，可能要几个月才上线一个产品。 而互联网公司上线周期短，可能一个星期就上线一次，或者2次。所以测试会比较忙。</li>
<li>传统的软件公司有，苹果，小米，微软。</li>
</ol>
<p>互联网企业有， 谷歌，facebook,阿里，腾讯.还有比如说，网络游戏，直播。电子商务。</p>
<p>互联网企业众多，需要大量的测试人员。大部分的测试人员都是进入了互联网企业.</p>
<h2 id="11-测试分两种"><a href="#11-测试分两种" class="headerlink" title="11 测试分两种"></a><strong>11 测试分两种</strong></h2><p><img src="/assets/wpsC673.tmp-20211222145920-91n8oyg.png"><img src="/assets/wpsC674.tmp-20211222145920-rscndg4.jpg"></p>
<p>软件测试分为手动测试和自动化测试。手动测试工程师只要求像普通用户那样去使用软件，发现了问题，在Bug管理系统中，开一个Bug就可以了</p>
<p>而自动化测试工程师，是需要懂代码，了解Java或者Python， 会使用JMeter和Postman做接口测试，会使用Selenium做UI自动化测试。自动化测试是发展方向。三年以上的测试工程师都应该朝这个方向发展</p>
<h2 id="12-B-x2F-S和C-x2F-S架构的区别"><a href="#12-B-x2F-S和C-x2F-S架构的区别" class="headerlink" title="12 B&#x2F;S和C&#x2F;S架构的区别"></a><strong>12 B&#x2F;S和C&#x2F;S架构的区别</strong></h2><p>Browser&#x2F;Server架构（浏览器&#x2F;服务器架构），主要是指的是Web应用程序，比如淘宝网，以及各种网站。如下图</p>
<p>C&#x2F;S架构  是Client&#x2F;Server(客户端&#x2F;服务器)架构，主要是传统的桌面机的应用程序。如下图</p>
<p><img src="/assets/wpsC675.tmp-20211222145920-yxbq22w.jpg"></p>
<p>目前大概90%的系统都是采用B&#x2F;S架构，是未来的趋势。传统的C&#x2F;S架构的软件越来越少，C&#x2F;S的软件慢慢被淘汰。B&#x2F;S架构的优点是客户不需要安装软件，直接使用浏览器就可以访问了。</p>
]]></content>
      <categories>
        <category>课前</category>
        <category>测试行业</category>
      </categories>
      <tags>
        <tag>课前</tag>
      </tags>
  </entry>
  <entry>
    <title>薪资分析</title>
    <url>/%E9%9A%8F%E5%A0%82%E7%AC%94%E8%AE%B0/01_%E8%AF%BE%E5%89%8D/04_%E8%96%AA%E8%B5%84%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="一、2021年软件测试的平均工资怎样？"><a href="#一、2021年软件测试的平均工资怎样？" class="headerlink" title="一、2021年软件测试的平均工资怎样？"></a>一、2021年软件测试的平均工资怎样？</h2><p>测试薪资，每个地方不太一样（后面会列上国内主要城市薪资），我们以北京为例，先来给大家看一下2020年的测试薪资，如下图所示：</p>
<p><img src="/assets/image-20211207164957-j4c2r0a.png" alt="image.png"></p>
<p> <strong>2021年又比2020年增加了3000多元。</strong> 最近这些年，测试薪资是一路往上涨的。</p>
<p>北京作为一线大城市，薪资肯定高，但很多小伙伴们未必是在北京工作，而是在自己的省会城市或其他一线城市，那他们的薪资如何呢？请继续往下看。</p>
<h2 id="二、2021年哪些城市的薪资会更高一些？推荐哪些城市就业？"><a href="#二、2021年哪些城市的薪资会更高一些？推荐哪些城市就业？" class="headerlink" title="二、2021年哪些城市的薪资会更高一些？推荐哪些城市就业？"></a>二、2021年哪些城市的薪资会更高一些？推荐哪些城市就业？</h2><p>看过了北京的薪资，再来看看其他城市的薪资。</p>
<p><img src="/assets/image-20211207165002-crnepas.png" alt="image.png"></p>
<h2 id="三、与编程开发相比，软件测试的薪资如何呢？"><a href="#三、与编程开发相比，软件测试的薪资如何呢？" class="headerlink" title="三、与编程开发相比，软件测试的薪资如何呢？"></a>三、与编程开发相比，软件测试的薪资如何呢？</h2><p>相信这个是很多由于到底是学编程还是测试的同学非常关注的。</p>
<p> <strong>给大家揭露一个非常有趣的现象：</strong> 以10年工龄为界，10年之内，同等工龄的开发岗位平均薪资要超过测试；<strong>但10年之后，软件测试的平均薪资却要反超编程开发。</strong></p>
<p>是不是这样呢？请狠狠点击下方链接查看直接证据：</p>
<p><a href="https://www.zhihu.com/question/33405392/answer/1649870187"><img src="/assets/image-20211207165006-ua3sb2o.png" alt="image.png"></a></p>
<h2 id="四、近10年来软件测试工资的波动状况，预测未来趋势"><a href="#四、近10年来软件测试工资的波动状况，预测未来趋势" class="headerlink" title="四、近10年来软件测试工资的波动状况，预测未来趋势"></a><strong>四、近10年来软件测试工资的波动状况，预测未来趋势</strong></h2><p>未来测试的薪资会怎样呢？老方法，回顾过去，才能展望未来，我们来看下近10年来测试平均薪资。为了能让趋势客观，仅选用北京测试薪资。</p>
<p><img src="/assets/image-20211207165010-h9cwmyo.png" alt="image.png"></p>
<p>刚刚我们看到了<strong>北京薪资2020年是15430，那么2019年是多少呢？请往下看14480元</strong></p>
<p><img src="/assets/image-20211207165015-lg94kmv.png" alt="image.png"></p>
<p>2018年，2017年，2015年，2014年……分别是多少呢？</p>
<p><img src="/assets/image-20211207165019-yvqzw61.png" alt="image.png"></p>
<p>从以上的薪资趋势可以看到，测试薪资10年来，已经从4460元跃升到15430元，薪资一路上涨。尤其是在2015年和2017年，涨薪幅度达到40%和34%。</p>
<p>为什么薪资能一路上涨，因为这10年来，互联网竞争越来越趋同质化， <strong>未来的互联网产品不仅是运营取胜，更是质量取胜，而测试人员就是保证质量的守门员，</strong> 这也是为何 <strong>2020是疫情之年，测试薪资仍比2019年上涨了1000元，2021年又比2020年增加了3000多元的根本原因。</strong> 所以未来测试薪资，不出意外， <strong>也将继续一路上扬</strong> 。</p>
<h2 id="五、测试各个岗位的薪资是怎样的？"><a href="#五、测试各个岗位的薪资是怎样的？" class="headerlink" title="五、测试各个岗位的薪资是怎样的？"></a>五、测试各个岗位的薪资是怎样的？</h2><p>测试按技术分，分支较多，有功能测试、接口测试、Ui自动化测试、性能测试、安全测试、测试开发….  各个岗位的薪资肯定是不一样的，带大家来看下</p>
<h3 id="1-功能测试（也叫手工测试）"><a href="#1-功能测试（也叫手工测试）" class="headerlink" title="1.功能测试（也叫手工测试）"></a><strong>1.功能测试（也叫手工测试）</strong></h3><p><img src="/assets/image-20211207165023-u0xwhox.png" alt="image.png"><br>2020年功能测试薪资</p>
<p><img src="/assets/image-20211207165027-3bpqrh8.png" alt="image.png"><br>2021年功能测试薪资，较2020上涨了2.6K</p>
<p>功能测试是其他测试工作的基础，是培养测试用例设计能力和建立测试思维的关键阶段。但是如果只是每天机械的进行“点点点”，想拿高薪是不太现实的。但是如果用例设计的非常牛，能够验证出系统中的绝大部分bug（尤其是关键的bug）；或者对某一行业的业务非常熟练也是可以拿到高薪的。</p>
<p>根据市场的实际情况来看，拿高薪的软件测试工程师一般都是具备良好的手工测试技能。<strong>所以手工测试虽然薪资是最低的，但是却是最核心的，千万不能忽视。</strong></p>
<h3 id="2-自动化测试"><a href="#2-自动化测试" class="headerlink" title="2 自动化测试"></a><strong>2 自动化测试</strong></h3><p><img src="/assets/image-20211207165031-gyq50kn.png" alt="image.png"><br>2020年自动化测试薪资截图</p>
<p><img src="/assets/image-20211207165035-dtga3sw.png" alt="image.png"><br>2021年自动化测试薪资，较2020增加2.5K</p>
<p>自动化测试主要包括接口自动化测试和UI自动化测试。</p>
<p><strong>为什么做接口自动化测试能拿高薪呢？</strong><br>因为现在的软件，都是前后端分离的，需要通过接口实现前后端数据的传递。所以接口自动化测试非常重要，大部分的公司都会做接口自动化测试的。</p>
<p><strong>为什么会UI自动化测试能拿高薪呢？</strong></p>
<p>通过手工方式实现项目回归测试既费时又费力，如果是已经写好的自动化测试脚本直接运行就可以了，可以实现真正的无人值守。<strong>UI自动化测试目前做的比较多的是Web自动化测试和APP自动化测试。</strong></p>
<p>所以做UI自动化测试一般都要具备一定的编程能力，而绝大部分测试人员是没有编程能力的，能拉开与别人之间的距离。</p>
<p>UI自动化测试比较适合功能比较稳定、回归测试比较频繁的项目，能很好的提高测试效率、节省手工验证的成本。</p>
<p><strong>3 性能测试</strong></p>
<p><img src="/assets/image-20211207165039-o2lhkgg.png" alt="image.png"><br>2020年性能测试薪资截图</p>
<p><img src="/assets/image-20211207165043-h5hcwvm.png" alt="image.png"><br>2021年性能测试薪资截图，较2020年上涨1.1K</p>
<p><strong>为什么说性能测试很有必要：</strong><br>人们对软件响应的速度也有很高的要求；但与之相对立的是用户访问量越大、数据量越多，软件产品的响应速度就会下降。所以每一个用户量较大的系统都面临着很大的挑战。作为一个测试人员，在产品交付客户上线之前就需要进行充分的性能测试，能够保证软件产品能够承受住实际用户访问的需求。</p>
<p><strong>为什么说做好性能测试不容易？</strong></p>
<p>要做好性能测试，除了最基本的会使用性能测试工具之外，还要对系统的架构、服务之间的调用非常清楚。性能测试的基本技能是性能测试脚本的编写，核心和难点是性能的瓶颈分析和性能调优。如果能把性能测试做好了，想拿高薪真的很容易！</p>
<p><strong>性能测试常用的工具有JMeter和Loadrunner。</strong></p>
<p><strong>4 安全测试</strong></p>
<p><img src="/assets/image-20211207165048-fwu6vzc.png" alt="image.png"><br>2020年安全测试薪资截图</p>
<p><img src="/assets/image-20211207165052-tyraktd.png" alt="image.png"><br>2021年薪资截图，较 2020年上涨2.2K</p>
<p>安全测试是测试中的一个专项测试，一般都是有专门的安全测试人员进行测试，专业技能要求比较高，但是 <strong>薪资待遇更是非常可观。</strong> 常见的安全测试有暴力破解、<a href="https://www.zhihu.com/search?q=%E8%B6%8A%E6%9D%83%E6%BC%8F%E6%B4%9E&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:1581863304%7D">越权漏洞</a>、命令注入、SQL注入、XSS、CSRF等等。</p>
<p><strong>5 测试开发</strong></p>
<p><img src="/assets/image-20211207165056-nyggkjx.png" alt="image.png"><br>2020年测试开发薪资截图</p>
<p><img src="/assets/image-20211207165100-b9slwms.png" alt="image.png"><br>2021年测试开发薪资截图，教上年增加2.5K</p>
<p>市场有大量测试开发岗位 打开BOSS直聘、智联招聘、拉勾等招聘平台，我们可以看到有很多测试开发的岗位。</p>
<p><img src="/assets/image-20211207165104-h3ogzke.png" alt="image.png"></p>
<p><strong>为什么说测试开发能拿高薪呢？</strong></p>
<p>测试开发岗位对软件测试工程师有更高的技能要求，不仅要有测试的技能，还要有开发的技能。永远都要相信当今社会不缺少高薪的岗位，只是缺少能拿高薪的人才。</p>
<p><strong>测试开发的主要工作是什么？</strong></p>
<p>目前测试开发的工作主要包括测试工具的开发、测试平台的开发、测试框架的搭建等。这些工作都能够服务于普通的测试人员，提高测试的效率，给公司创造价值。</p>
]]></content>
      <categories>
        <category>课前</category>
        <category>薪资分析</category>
      </categories>
      <tags>
        <tag>课前</tag>
      </tags>
  </entry>
  <entry>
    <title>测试素质</title>
    <url>/%E9%9A%8F%E5%A0%82%E7%AC%94%E8%AE%B0/01_%E8%AF%BE%E5%89%8D/05_%E6%B5%8B%E8%AF%95%E7%B4%A0%E8%B4%A8/</url>
    <content><![CDATA[<ol>
<li>对于软件 测试人员来说需要具备的素质，我觉得首先最重要的是要有一定的理论知识和 测试技能，这是测试工作的基础。那么我们 测试人员还应该具备哪些素质才能在工作当中被不断的认可呢？</li>
<li>一名优秀的测试人员应该具有的素质包括：</li>
</ol>
<h3 id="一、-踏实细心和积极主动"><a href="#一、-踏实细心和积极主动" class="headerlink" title="一、 踏实细心和积极主动"></a><strong>一、 踏实细心和积极主动</strong></h3><ol>
<li>我觉得作为一名测试人员首先要踏实细心。细心：这个不用多解释了吧。粗枝大叶的人是没法做好 软件测试的。 软件测试，特别是当前国内主流的手动黑盒 功能测试。基本上软件测试的工作就是一项重复劳动，需要有一定的耐心来保证不在枯燥的重复劳动中放过那些细小的 缺陷。测试人员每天都要面对着枯燥的程序，从事着大量的重复工作，还要尽量发现产品中的 bug。如果不踏实，你就坐不住，总想干别的，就无法净下心来想用户有可能怎么用， 需求对产品是怎么要求的，现在产品中是怎么做的，哪里可能存在问题。不细心，就特别容易一些产品中微笑的错误，而恰恰就是这些错误是最影响产品形象的问题。</li>
<li>至于积极主动就不多说了。这是每个人都应该具有</li>
</ol>
<h3 id="二、-好奇心，怀疑一切"><a href="#二、-好奇心，怀疑一切" class="headerlink" title="二、 好奇心，怀疑一切"></a><strong>二、 好奇心，怀疑一切</strong></h3><ol>
<li>测试人员，对于手上的项目，如果单单只是去运行它，这样是没法发现问题的。我们测试人员进行测试的主要目的就是发现软件存在缺陷，而不是证明它没有缺陷。如果不抱着怀疑一切的态度就不是一名合格的测试人员。经过你手测试的产品面对的是直接用户。你不认真负责，不抱着怀疑一切的态度。总想着这个功能本版没动应该没什么问题，认为一般人不会去这样操作它，这个功能没什么用户用不用认真测了。这样发出的产品，我是不敢让用户用。因为用户用起产品来是千奇百怪，有些用户的水平和对产品的理解比咱们还要深。所以一定要抱着怀疑一切的态度，从多个方面考虑，认为产品每个功能都可能有问题，多问一个「为什么」，「如果这样，行不行？」，认真地测试产品的每一个测试点。</li>
</ol>
<h3 id="三、-与他人良好交流的能力"><a href="#三、-与他人良好交流的能力" class="headerlink" title="三、 与他人良好交流的能力"></a><strong>三、 与他人良好交流的能力</strong></h3><ol>
<li><p>众所周知，测试的过程是一个发现问题并且跟踪解决问题的一个过程，在这个过程中，要意识到测试、 开发、需求是一个团队，一个整体。离了谁，产品的质量都无法保证。沟通能力作为一项特别重要的软技能，在工作中起着举足轻重的作用。作为一名测试人员，我们在提交问题的时候，要做到条理清晰，必要时配上图片以便别人理解，自己提交的问题只有自己能看懂这可不行。我们还需要和项目经理交流了解最新的客户需求，要和 开发人员沟通以便解决缺陷。之前看过一段幽默的开发人员和测试人员的对话：</p>
<ol>
<li><p>测试日常：</p>
<ol>
<li>开发：这不是软件的问题，我看了测试代码，这个地方有点问题，不该是这样测。</li>
<li>测试：真的吗？我看看…真的啊，稍等我提交一下…谢谢你帮我们找到这个bug。</li>
<li>开发：没事，不用谢…（感觉有什么不对）</li>
</ol>
</li>
<li><p>无论是和项目经理还是开发员人交流的时候，态度很重要，这里我说的态度不是低声下气，底气不足的跟她们交流，特别是和开发人员交流时，可能会因为一个bug，两人争执不下发生冲突，这时候我们测试人员要做到分析问题所在，同时也要听听开发人员的想法，心平气和进行交流，最后实在是两人都拿不定注意，可以请示上级。</p>
</li>
</ol>
</li>
</ol>
<h3 id="四、-持续不断的自我提高和总结能力"><a href="#四、-持续不断的自我提高和总结能力" class="headerlink" title="四、  持续不断的自我提高和总结能力"></a><strong>四、  持续不断的自我提高和总结能力</strong></h3><ol>
<li><p>我觉得无论是哪个行业，都不能停滞不前，自我提高是必须的，这样才不会被淘汰，那么作为一名优秀的测试人员如何提高自己的测试能力呢？</p>
<ol>
<li><strong>第一，首先提高自己的测试理论基础。</strong>所有的测试基础概念其实都是通用的：静态测试，动态测试， 测试用例，等等以及一些测试相关技术：等价类划分，边界值，相信这些方法所有的人每天都在用，但是未必所有的人都能说明白。所以为自己每天所做的测试行动找点理论基础，即有效率有与实践相结合，这也是职业发展的重要一步。</li>
<li><strong>第二，要对测试的整体流程有完整的概念。</strong>这个是目前很多初级测试人员所欠缺的。目前大多数人只知道自己测试的是什么东西，但是不知道自己执行的测试处于什么阶段，下一个阶段是什么，也许整个项目做完不知道；这对于一个产品来说是一个不负责任的行为，所以也就需要测试人员有端到端的测试意识和对测试流程的概念的认可，要有测试整体流程管理的概念。</li>
<li><strong>第三，在进行测试工作中要弄明白为什么要这么做，为什么要执行这样的案例，为什么要执行相关的测试工作。</strong>多问几个为什么。有一个问题要先讲清楚，就是有很多人还没有注意到这个问题，领导让怎么做就怎么做，也许真的做的很熟练了，但是一年后去问他为什么要这么做，相信他也说不出太多，反倒觉得就应该这么测。这样带来直接的弊端就是对自己的职业之路不负责任。</li>
<li>另外，我觉得作为一名合格的测试人员，一定要注意进行总结。通过总结可以对自己的工作进行一个回顾分析，看看那些做得不错，下次还继续这么做。那些工作还有改进的余地。对自己能力的提高是一个很好的帮助。</li>
</ol>
</li>
</ol>
<h3 id="五、-强烈的责任感"><a href="#五、-强烈的责任感" class="headerlink" title="五、  强烈的责任感"></a><strong>五、  强烈的责任感</strong></h3><ol>
<li>对于你测试的产品付责任，许多测试人员在早上来到办公室，完成自己的任务，然后晚上下班回家。当软件测试人员完成自己的任务，然后下班收拾东西回家，这种常规的工作方式听起来很正常吧？是的，不得不说，目前我们都是这样的一个状态。要完成一个高质量的产品，我们就要对它负责，那么怎么负责呢？</li>
<li>测试人员要对所测试的对象质量负责，要能保证测试的覆盖到每一需求点，同时要能保证功能都可以正确实现等或者达到了测试通过的标准。</li>
<li>对于测试人员漏测，毕竟人不是完美的，难免会出现错误，但是不能以漏测来做为质量考核。可以对其进行分类分析，究竟是哪个环节出现的问题，提出来进行改进。比如说需求描述不完整，导致理解错误；隐含性需求未考虑到；易用性方面考虑不周；实际环境与测试环境有差异；自身经验不足等多方面。</li>
<li>测试这项工作，是证明产品做了正确的事情，能满足用户的需求，用各种 测试方法来找出问题，是对质量的一种度量。好的质量是要靠高素质人员和好的过程来保证的。</li>
</ol>
]]></content>
      <categories>
        <category>课前</category>
        <category>测试素质</category>
      </categories>
      <tags>
        <tag>课前</tag>
      </tags>
  </entry>
  <entry>
    <title>学习规则</title>
    <url>/%E9%9A%8F%E5%A0%82%E7%AC%94%E8%AE%B0/01_%E8%AF%BE%E5%89%8D/06_%E5%AD%A6%E4%B9%A0%E8%A7%84%E5%88%99/</url>
    <content><![CDATA[<h2 id="1-学习规则："><a href="#1-学习规则：" class="headerlink" title="1. 学习规则："></a>1. 学习规则：</h2><pre><code>1. 上课时间：大小周

    1. 打卡

        1. 要求每天打卡四次：

            1. 早上9：00（后期会有调整）、中午11：30与14：00、下午18：00
    2. 教学规则

        1. 上课期间手机等电子产品一律放入手机篮（手机调至静音）
        2. 晚上10点准时休息
        3. 学习期间不准酗酒
        4. 无重大事件不准请假
    3. 日报

        1. 每日必填
    4. 教学时间

        1. 分为大小周教学
    5. 教室、宿舍环境保证清洁卫生
    6. 教室、宿舍禁止抽烟
</code></pre>
<h2 id="2-时间安排-——–-gt-45天-不含休息日"><a href="#2-时间安排-——–-gt-45天-不含休息日" class="headerlink" title="2. 时间安排                ——–&gt;  45天(不含休息日)"></a>2. 时间安排                ——–&gt;  45天(不含休息日)</h2><pre><code>1. 第一章 基础              -----------&gt; 14工作天
2. 第二章 操作              -----------&gt; 6工作天
3. 第三章 接口测试        -----------&gt; 5工作日
4. 第四章 性能测试        -----------&gt; 3工作天
5. 第五章 APP测试        -----------&gt; 2工作天
6. 第六章 自动化测试    -----------&gt; 6工作天
7. 第七章 安全测试       -----------&gt; 1工作天
8. 第八章 项目             -----------&gt; 5工作天
9. 简历编写                 -----------&gt; 1工作天
10. 模拟面试题分析       -----------&gt; 2工作天
11. 面试题分析             -----------&gt; 30工作日(不在学习时间范围内)
</code></pre>
]]></content>
      <categories>
        <category>课前</category>
        <category>学习规则</category>
      </categories>
      <tags>
        <tag>课前</tag>
      </tags>
  </entry>
  <entry>
    <title>多维度分析</title>
    <url>/%E9%9A%8F%E5%A0%82%E7%AC%94%E8%AE%B0/01_%E8%AF%BE%E5%89%8D/03_%E5%A4%9A%E7%BB%B4%E5%BA%A6%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>2020年</p>
<p><img src="/assets/image-20211120103613-yl1kx4c.png" alt="image.png"></p>
<h2 id="1-从业人员分布情况"><a href="#1-从业人员分布情况" class="headerlink" title="1. 从业人员分布情况"></a>1. 从业人员分布情况</h2><p><strong>1. 性别分布</strong></p>
<p><img src="/assets/image-20211207164743-c3tffd4.png" alt="image.png"><br>随着社会大环境鼓励生育二胎，相信女性回归家庭的比例有所攀升，2020 年测试岗位男性比例再次回到超过 70%。<br>很多测试同学可能感觉联系实际情况，做测试的女生明明很多，为何调查结果是男生占比高呢？</p>
<p>其实很好理解，关注 TesterHome 的同学以测试开发人员为主，尤其是效能和工具平台建设，以及智能、大数据、物联网等方向的测试人员，男生比例高些，也符合感性的感觉。</p>
<p>欢迎大家来参加 2021 年即将在上海举办的中国互联网测试开发大会 MTSC2021 上海站现场感受。</p>
<h2 id="2-年龄分布"><a href="#2-年龄分布" class="headerlink" title="2. 年龄分布"></a>2. 年龄分布</h2><p><img src="/assets/image-20211207164749-0jqcixc.png" alt="image.png"><br>从调查结果来看，35+ 测试人员占与去年持平，各年龄段的分布连续三年也较稳定。最近几年大家讨论最多的关于年龄的话题就是 “35 周岁中年危机” 了，职场上 35 岁 + 的人都去哪了呢？<br>测试开发岗位只是万千行业岗位中的一个，若年龄到了一个阶段，经验没有继续增长，学习能力却降低，而薪水不能降低吧？</p>
<ul>
<li>用人成本考量上，公司一般会偏向年轻人</li>
<li>团队梯队建设上，会考虑新老搭档</li>
</ul>
<h2 id="3-所在地分布"><a href="#3-所在地分布" class="headerlink" title="3.所在地分布"></a>3.所在地分布</h2><p><img src="/assets/image-20211207164753-6qbj4yn.png" alt="image.png"></p>
<ul>
<li>与前两年一致，互联网测试从业人员主要依然是来自一二线城市，但可以看出二线城市的比例逐年增加，单从这个结果上可以有 2 个猜测：</li>
<li>更多来自二线城市的测试人员</li>
<li>测试人员从一线搬至二线城市定居了，可推测二线城市对测试人员需求增加</li>
</ul>
<h2 id="4-工作年限分布"><a href="#4-工作年限分布" class="headerlink" title="4. 工作年限分布"></a>4. 工作年限分布</h2><p><img src="/assets/image-20211207164759-nhnwdcl.png" alt="image.png"></p>
<ul>
<li>这个调查和年龄分布可对比看，年龄 30 周岁 + 的总占比与去年持平，但工作时间超过 10 年以上的人数占比却稳步提升。</li>
<li>工作 6-10 年的人数占比也显著增加，二者加起来就是工作 5 年以上人数占比 37.4%。</li>
</ul>
<h2 id="5-学历分布"><a href="#5-学历分布" class="headerlink" title="5. 学历分布"></a>5. 学历分布</h2><p><img src="/assets/image-20211207164806-sqad1w0.png" alt="image.png"></p>
<ul>
<li>本科一如既往占七成，硕士占比近十分之一，博士继去年零突破后继续增加了。</li>
<li>测试开发人员属于技术类人员，对学历有要求，相信与其他相关技术从业人员也一致。</li>
</ul>
<h2 id="6-进入测试行业的途径"><a href="#6-进入测试行业的途径" class="headerlink" title="6.进入测试行业的途径"></a>6.进入测试行业的途径</h2><p><img src="/assets/image-20211207164811-ivob3vp.png" alt="image.png"></p>
<ul>
<li>毕业即入行，依然是常规途径，比例超过一半。由此可见，各大公司持续将校园招聘作为主要招聘渠道。</li>
<li>通过培训机构入行的连续三年增长，今年超过 15%，一定程度上反映了当下测试培训的火爆。</li>
</ul>
]]></content>
      <categories>
        <category>课前</category>
        <category>多维度分析</category>
      </categories>
      <tags>
        <tag>课前</tag>
      </tags>
  </entry>
  <entry>
    <title>hello-world - 副本</title>
    <url>/%E9%9A%8F%E5%A0%82%E7%AC%94%E8%AE%B0/03_%E8%AF%BE%E5%90%8E/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;
</code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server
</code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate
</code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy
</code></pre>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>hello-world - 副本</title>
    <url>/%E9%9A%8F%E5%A0%82%E7%AC%94%E8%AE%B0/05_%E5%85%B6%E4%BB%96/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;
</code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server
</code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate
</code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy
</code></pre>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>hello-world - 副本</title>
    <url>/%E9%9A%8F%E5%A0%82%E7%AC%94%E8%AE%B0/04_%E5%B7%A5%E5%85%B7/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;
</code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server
</code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate
</code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy
</code></pre>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>计算机基础</title>
    <url>/%E9%9A%8F%E5%A0%82%E7%AC%94%E8%AE%B0/02_%E8%AF%BE%E4%B8%AD/01_%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%9F%BA%E7%A1%80/01_%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<ol>
<li><h3 id="练习打字：要求1000字的文章，平均一分钟35字"><a href="#练习打字：要求1000字的文章，平均一分钟35字" class="headerlink" title="练习打字：要求1000字的文章，平均一分钟35字"></a>练习打字：要求1000字的文章，平均一分钟35字</h3></li>
<li><h3 id="操作系统："><a href="#操作系统：" class="headerlink" title="操作系统："></a>操作系统：</h3><ol>
<li><p><a href="../901_%E6%96%87%E4%BB%B6/01_%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/01_windows%E5%BF%AB%E6%8D%B7%E9%94%AE/">windows快捷键</a></p>
<ol>
<li>win+r  —-&gt; cmd—-&gt; 输入  ipconfig   查看本机ip</li>
<li>win+r  —-&gt; cmd—-&gt; 输入ping + url（ip）  查看与对方url（ip）是否互通</li>
</ol>
</li>
<li><p><a href="../901_%E6%96%87%E4%BB%B6/01_%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/02_Linux%E7%B3%BB%E7%BB%9F/">Linux</a></p>
</li>
<li><p><a href="../901_%E6%96%87%E4%BB%B6/01_%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/03_windows%E4%B8%8Elinux%E7%9A%84%E5%8C%BA%E5%88%AB/">windows与linux的区别</a></p>
</li>
</ol>
</li>
<li><h3 id="编程基础："><a href="#编程基础：" class="headerlink" title="编程基础："></a>编程基础：</h3><ol>
<li><p>什么是编程语言</p>
<ol>
<li>编程语言（programming language）可以简单的理解为一种计算机和人都能识别的语言。一种计算机语言让程序员能够准确地定义计算机所需要使用的数据，并精确地定义在不同情况下所应当采取的行动。编程语言处在不断的发展和变化中，从最初的机器语言发展到如今的2500种以上的高级语言，每种语言都有其特定的用途和不同的发展轨迹。编程语言并不像人类自然语言发展变化一样的缓慢而又持久，其发展是相当快速的，这主要是计算机硬件、互联网和IT业的发展促进了编程语言的发展。</li>
<li><a href="https://www.runoob.com/">编码基础课程（所有）</a></li>
</ol>
</li>
</ol>
</li>
<li><h3 id="公司中常用的文件类型"><a href="#公司中常用的文件类型" class="headerlink" title="公司中常用的文件类型"></a>公司中常用的文件类型</h3><ol>
<li><p>.txt，.doc（word），.xls（excel），.ppt，.pdf,   .csv、.xmind</p>
<pre><code> 压缩文件：.rar格式，.zip格式，.tar格式

 执行文件：.bat格式（windows），.sh格式（linux），.exe格式（windows）

 日志文件：.log（一般是日志debug日志，系统日志，错误日志）
</code></pre>
<ul>
<li><p>xmind 快捷键</p>
<ul>
<li><img src="/assets/image-20220215095739-lhdjz41.png" alt="image.png"></li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>课中</category>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>课中</tag>
      </tags>
  </entry>
  <entry>
    <title>学习规则</title>
    <url>/%E9%9A%8F%E5%A0%82%E7%AC%94%E8%AE%B0/02_%E8%AF%BE%E4%B8%AD/02_%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E6%93%8D%E4%BD%9C/02_%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="1-学习规则："><a href="#1-学习规则：" class="headerlink" title="1. 学习规则："></a>1. 学习规则：</h2><pre><code>1. 上课时间：大小周

    1. 打卡

        1. 要求每天打卡四次：

            1. 早上9：00（后期会有调整）、中午11：30与14：00、下午18：00
    2. 教学规则

        1. 上课期间手机等电子产品一律放入手机篮（手机调至静音）
        2. 晚上10点准时休息
        3. 学习期间不准酗酒
        4. 无重大事件不准请假
    3. 日报

        1. 每日必填
    4. 教学时间

        1. 分为大小周教学
    5. 教室、宿舍环境保证清洁卫生
    6. 教室、宿舍禁止抽烟
</code></pre>
<h2 id="2-时间安排-——–-gt-45天-不含休息日"><a href="#2-时间安排-——–-gt-45天-不含休息日" class="headerlink" title="2. 时间安排                ——–&gt;  45天(不含休息日)"></a>2. 时间安排                ——–&gt;  45天(不含休息日)</h2><pre><code>1. 第一章 基础              -----------&gt; 14工作天
2. 第二章 操作              -----------&gt; 6工作天
3. 第三章 接口测试        -----------&gt; 5工作日
4. 第四章 性能测试        -----------&gt; 3工作天
5. 第五章 APP测试        -----------&gt; 2工作天
6. 第六章 自动化测试    -----------&gt; 6工作天
7. 第七章 安全测试       -----------&gt; 1工作天
8. 第八章 项目             -----------&gt; 5工作天
9. 简历编写                 -----------&gt; 1工作天
10. 模拟面试题分析       -----------&gt; 2工作天
11. 面试题分析             -----------&gt; 30工作日(不在学习时间范围内)
</code></pre>
]]></content>
      <categories>
        <category>课前</category>
        <category>学习规则</category>
      </categories>
      <tags>
        <tag>课前</tag>
      </tags>
  </entry>
  <entry>
    <title>测试理论概念</title>
    <url>/%E9%9A%8F%E5%A0%82%E7%AC%94%E8%AE%B0/02_%E8%AF%BE%E4%B8%AD/01_%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%9F%BA%E7%A1%80/02_%E6%B5%8B%E8%AF%95%E7%90%86%E8%AE%BA%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<ol>
<li><h4 id="软件测试的定义，什么是软件测试"><a href="#软件测试的定义，什么是软件测试" class="headerlink" title="软件测试的定义，什么是软件测试"></a>软件测试的定义，什么是软件测试</h4><ol>
<li>使用人工或自动手段，来运行或测试某个系统的过程。其目的在于检验它是否满足规定的需求或弄清预期结果与实际结果之间的差别。</li>
</ol>
</li>
<li><h4 id="软件测试的目的"><a href="#软件测试的目的" class="headerlink" title="软件测试的目的"></a>软件测试的目的</h4><ol>
<li><p>测试是程序的执行过程，目的在于发现错误。</p>
</li>
<li><p>确保产品完成了它所承诺或公布的功能</p>
</li>
<li><p>确保产品满足性能和效率的要求</p>
</li>
<li><p>确保产品是健壮的和适应用户环境的</p>
</li>
</ol>
</li>
<li><h4 id="是否了解二八定律？"><a href="#是否了解二八定律？" class="headerlink" title="是否了解二八定律？"></a>是否了解二八定律？</h4><ol>
<li>了解</li>
<li>80%的问题可以在20%的模块中发现，换句话来说，软件系统中的问题存在群集现象，大部分的问题会集中在少数的模块上。</li>
<li><h5 id="二八定律怎么避免"><a href="#二八定律怎么避免" class="headerlink" title="二八定律怎么避免"></a>二八定律怎么避免</h5><ul>
<li>在分析设计以及实现阶段的复审能够发现和避免80%的缺陷，</li>
<li>在系统测试中能够找到剩余的80%的错误，</li>
<li>最后剩余的4%只能在用户的大范围使用长时间积累爆发出来</li>
</ul>
</li>
</ol>
</li>
<li><h4 id="软件测试的分类"><a href="#软件测试的分类" class="headerlink" title="软件测试的分类"></a><a href="../901_%E6%96%87%E4%BB%B6/902_%E6%B5%8B%E8%AF%95%E7%90%86%E8%AE%BA/02_%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%9A%84%E5%88%86%E7%B1%BB/">软件测试的分类</a></h4><ol>
<li><p><img src="/assets/image-20220109174021-s16k61v.png" alt="image.png"></p>
<p> 黑盒测试：不考虑程序运行本身的逻辑，只考虑输入与输出之间的关系的测试</p>
<p> 白盒测试：开发人员进行的测试，代码测试</p>
<p> 灰盒测试：介于黑盒与白盒之间的测试</p>
<p> α测试：使用真实的环境，用户参与，全部产品、开发、测试参与，现场操作发现问题及时解决</p>
<p> β测试：使用真实的环境用户不参与，部分产品、开发、测试参与，现场操作发现问题后期解决</p>
</li>
<li><p>软件测试分类关系图</p>
<ol>
<li><img src="/assets/475aa778a57237c7e6a571329668eb4-20220109175114-4ddp7g5.jpg" alt="475aa778a57237c7e6a571329668eb4.jpg"></li>
</ol>
</li>
<li><p>软件测试类型</p>
<ol>
<li>功能测试、性能测试、安全测试、自动化测试、渗透性测试、UI测试</li>
</ol>
</li>
</ol>
</li>
<li><h3 id="软件测试的原则"><a href="#软件测试的原则" class="headerlink" title="软件测试的原则"></a>软件测试的原则</h3><ol>
<li><p>所有的测试都应该追溯到需求</p>
</li>
<li><p>尽早参与测试</p>
</li>
<li><p>测试中80%的缺陷来源于20%的模块中</p>
</li>
<li><p>不做不准备不充分的测试</p>
</li>
<li><p>避免测试的随意性</p>
</li>
<li><p>要长期保存我们的测试用例，直到系统废弃</p>
</li>
</ol>
</li>
<li><h3 id="项目流程——-gt-gt-软件的生命周期"><a href="#项目流程——-gt-gt-软件的生命周期" class="headerlink" title="项目流程——-&gt;&gt;软件的生命周期"></a>项目流程——-&gt;&gt;软件的生命周期</h3><ol>
<li><p>首先有需求人员编写需求文档，提供产品模型，并对这个需求进行评审，开发根据自己得到的任务进行编写代码、详设文档，测试人员根据自己得到的任务编写测试用例，进行用例评审，开发编写完成后会提交一个测试版本，我们测试用编写的用例进行测试，测试过程中如果发现bug，找到对应的开发给予解决，等bug修改以后，我们进行返测，如果通过直接关闭，如果不通过打回重新修改，直到bug关闭为止，编写测试报告， 然后进行版本发布，编写测试总结</p>
</li>
<li><p><strong>是不是所有的bug都关闭才能发布版本？</strong></p>
<ol>
<li><strong>不一定，有不影响项目上线的bug是允许存在的，比如说提示类说明文字与需求不一致</strong></li>
</ol>
</li>
</ol>
</li>
<li><h3 id="测试平时工作的内容"><a href="#测试平时工作的内容" class="headerlink" title="测试平时工作的内容"></a>测试平时工作的内容</h3><ol>
<li>参与需求评审   编写测试用例  评审用例  搭建环境  执行测试   发现bug  协助开发定位问题  返测  版本发布    测试总结  测试报告</li>
</ol>
</li>
<li><h3 id="怎么把控软件的进度"><a href="#怎么把控软件的进度" class="headerlink" title="怎么把控软件的进度"></a>怎么把控软件的进度</h3><ol>
<li>通过测试计划，晨会，测试日报，里程碑</li>
</ol>
</li>
<li><h3 id="怎么把控软件质量"><a href="#怎么把控软件质量" class="headerlink" title="怎么把控软件质量"></a>怎么把控软件质量</h3><ol>
<li>需求文档明确</li>
<li>严格根据我们用例进行测试</li>
<li>保证用例的全面覆盖</li>
</ol>
</li>
<li><h3 id="一名优秀的测试人员应该具有的素质包括："><a href="#一名优秀的测试人员应该具有的素质包括：" class="headerlink" title="一名优秀的测试人员应该具有的素质包括："></a>一名优秀的测试人员应该具有的素质包括：</h3> 一  踏实细心和积极主动<br> 二  好奇心，怀疑一切<br> 三  与他人良好交流的能力<br> 四  持续不断的自我提高和总结能力<br> 五  强烈的责任感</li>
<li><h3 id="测试计划"><a href="#测试计划" class="headerlink" title="测试计划"></a><a href="../901_%E6%96%87%E4%BB%B6/902_%E6%B5%8B%E8%AF%95%E7%90%86%E8%AE%BA/01_%E6%B5%8B%E8%AF%95%E8%AE%A1%E5%88%92/">测试计划</a></h3><ol>
<li>什么是测试计划？</li>
<li>测试计划的目的？</li>
<li>测试计划是由谁写的？</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>课中</category>
        <category>基础</category>
        <category>测试理论概念</category>
      </categories>
      <tags>
        <tag>课中</tag>
      </tags>
  </entry>
  <entry>
    <title>学习规则</title>
    <url>/%E9%9A%8F%E5%A0%82%E7%AC%94%E8%AE%B0/02_%E8%AF%BE%E4%B8%AD/03_%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/03_%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h2 id="1-学习规则："><a href="#1-学习规则：" class="headerlink" title="1. 学习规则："></a>1. 学习规则：</h2><pre><code>1. 上课时间：大小周

    1. 打卡

        1. 要求每天打卡四次：

            1. 早上9：00（后期会有调整）、中午11：30与14：00、下午18：00
    2. 教学规则

        1. 上课期间手机等电子产品一律放入手机篮（手机调至静音）
        2. 晚上10点准时休息
        3. 学习期间不准酗酒
        4. 无重大事件不准请假
    3. 日报

        1. 每日必填
    4. 教学时间

        1. 分为大小周教学
    5. 教室、宿舍环境保证清洁卫生
    6. 教室、宿舍禁止抽烟
</code></pre>
<h2 id="2-时间安排-——–-gt-45天-不含休息日"><a href="#2-时间安排-——–-gt-45天-不含休息日" class="headerlink" title="2. 时间安排                ——–&gt;  45天(不含休息日)"></a>2. 时间安排                ——–&gt;  45天(不含休息日)</h2><pre><code>1. 第一章 基础              -----------&gt; 14工作天
2. 第二章 操作              -----------&gt; 6工作天
3. 第三章 接口测试        -----------&gt; 5工作日
4. 第四章 性能测试        -----------&gt; 3工作天
5. 第五章 APP测试        -----------&gt; 2工作天
6. 第六章 自动化测试    -----------&gt; 6工作天
7. 第七章 安全测试       -----------&gt; 1工作天
8. 第八章 项目             -----------&gt; 5工作天
9. 简历编写                 -----------&gt; 1工作天
10. 模拟面试题分析       -----------&gt; 2工作天
11. 面试题分析             -----------&gt; 30工作日(不在学习时间范围内)
</code></pre>
]]></content>
      <categories>
        <category>课前</category>
        <category>学习规则</category>
      </categories>
      <tags>
        <tag>课前</tag>
      </tags>
  </entry>
  <entry>
    <title>学习规则</title>
    <url>/%E9%9A%8F%E5%A0%82%E7%AC%94%E8%AE%B0/02_%E8%AF%BE%E4%B8%AD/07_%E7%AC%AC%E4%B8%83%E7%AB%A0%20%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95/07_%E7%AC%AC%E4%B8%83%E7%AB%A0%20%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h2 id="1-学习规则："><a href="#1-学习规则：" class="headerlink" title="1. 学习规则："></a>1. 学习规则：</h2><pre><code>1. 上课时间：大小周

    1. 打卡

        1. 要求每天打卡四次：

            1. 早上9：00（后期会有调整）、中午11：30与14：00、下午18：00
    2. 教学规则

        1. 上课期间手机等电子产品一律放入手机篮（手机调至静音）
        2. 晚上10点准时休息
        3. 学习期间不准酗酒
        4. 无重大事件不准请假
    3. 日报

        1. 每日必填
    4. 教学时间

        1. 分为大小周教学
    5. 教室、宿舍环境保证清洁卫生
    6. 教室、宿舍禁止抽烟
</code></pre>
<h2 id="2-时间安排-——–-gt-45天-不含休息日"><a href="#2-时间安排-——–-gt-45天-不含休息日" class="headerlink" title="2. 时间安排                ——–&gt;  45天(不含休息日)"></a>2. 时间安排                ——–&gt;  45天(不含休息日)</h2><pre><code>1. 第一章 基础              -----------&gt; 14工作天
2. 第二章 操作              -----------&gt; 6工作天
3. 第三章 接口测试        -----------&gt; 5工作日
4. 第四章 性能测试        -----------&gt; 3工作天
5. 第五章 APP测试        -----------&gt; 2工作天
6. 第六章 自动化测试    -----------&gt; 6工作天
7. 第七章 安全测试       -----------&gt; 1工作天
8. 第八章 项目             -----------&gt; 5工作天
9. 简历编写                 -----------&gt; 1工作天
10. 模拟面试题分析       -----------&gt; 2工作天
11. 面试题分析             -----------&gt; 30工作日(不在学习时间范围内)
</code></pre>
]]></content>
      <categories>
        <category>课前</category>
        <category>学习规则</category>
      </categories>
      <tags>
        <tag>课前</tag>
      </tags>
  </entry>
  <entry>
    <title>学习规则</title>
    <url>/%E9%9A%8F%E5%A0%82%E7%AC%94%E8%AE%B0/02_%E8%AF%BE%E4%B8%AD/05_%E7%AC%AC%E4%BA%94%E7%AB%A0%20APP%E6%B5%8B%E8%AF%95/05_%E7%AC%AC%E4%BA%94%E7%AB%A0%20APP%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h2 id="1-学习规则："><a href="#1-学习规则：" class="headerlink" title="1. 学习规则："></a>1. 学习规则：</h2><pre><code>1. 上课时间：大小周

    1. 打卡

        1. 要求每天打卡四次：

            1. 早上9：00（后期会有调整）、中午11：30与14：00、下午18：00
    2. 教学规则

        1. 上课期间手机等电子产品一律放入手机篮（手机调至静音）
        2. 晚上10点准时休息
        3. 学习期间不准酗酒
        4. 无重大事件不准请假
    3. 日报

        1. 每日必填
    4. 教学时间

        1. 分为大小周教学
    5. 教室、宿舍环境保证清洁卫生
    6. 教室、宿舍禁止抽烟
</code></pre>
<h2 id="2-时间安排-——–-gt-45天-不含休息日"><a href="#2-时间安排-——–-gt-45天-不含休息日" class="headerlink" title="2. 时间安排                ——–&gt;  45天(不含休息日)"></a>2. 时间安排                ——–&gt;  45天(不含休息日)</h2><pre><code>1. 第一章 基础              -----------&gt; 14工作天
2. 第二章 操作              -----------&gt; 6工作天
3. 第三章 接口测试        -----------&gt; 5工作日
4. 第四章 性能测试        -----------&gt; 3工作天
5. 第五章 APP测试        -----------&gt; 2工作天
6. 第六章 自动化测试    -----------&gt; 6工作天
7. 第七章 安全测试       -----------&gt; 1工作天
8. 第八章 项目             -----------&gt; 5工作天
9. 简历编写                 -----------&gt; 1工作天
10. 模拟面试题分析       -----------&gt; 2工作天
11. 面试题分析             -----------&gt; 30工作日(不在学习时间范围内)
</code></pre>
]]></content>
      <categories>
        <category>课前</category>
        <category>学习规则</category>
      </categories>
      <tags>
        <tag>课前</tag>
      </tags>
  </entry>
  <entry>
    <title>学习规则</title>
    <url>/%E9%9A%8F%E5%A0%82%E7%AC%94%E8%AE%B0/02_%E8%AF%BE%E4%B8%AD/04_%E7%AC%AC%E5%9B%9B%E7%AB%A0%20%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/04_%E7%AC%AC%E5%9B%9B%E7%AB%A0%20%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h2 id="1-学习规则："><a href="#1-学习规则：" class="headerlink" title="1. 学习规则："></a>1. 学习规则：</h2><pre><code>1. 上课时间：大小周

    1. 打卡

        1. 要求每天打卡四次：

            1. 早上9：00（后期会有调整）、中午11：30与14：00、下午18：00
    2. 教学规则

        1. 上课期间手机等电子产品一律放入手机篮（手机调至静音）
        2. 晚上10点准时休息
        3. 学习期间不准酗酒
        4. 无重大事件不准请假
    3. 日报

        1. 每日必填
    4. 教学时间

        1. 分为大小周教学
    5. 教室、宿舍环境保证清洁卫生
    6. 教室、宿舍禁止抽烟
</code></pre>
<h2 id="2-时间安排-——–-gt-45天-不含休息日"><a href="#2-时间安排-——–-gt-45天-不含休息日" class="headerlink" title="2. 时间安排                ——–&gt;  45天(不含休息日)"></a>2. 时间安排                ——–&gt;  45天(不含休息日)</h2><pre><code>1. 第一章 基础              -----------&gt; 14工作天
2. 第二章 操作              -----------&gt; 6工作天
3. 第三章 接口测试        -----------&gt; 5工作日
4. 第四章 性能测试        -----------&gt; 3工作天
5. 第五章 APP测试        -----------&gt; 2工作天
6. 第六章 自动化测试    -----------&gt; 6工作天
7. 第七章 安全测试       -----------&gt; 1工作天
8. 第八章 项目             -----------&gt; 5工作天
9. 简历编写                 -----------&gt; 1工作天
10. 模拟面试题分析       -----------&gt; 2工作天
11. 面试题分析             -----------&gt; 30工作日(不在学习时间范围内)
</code></pre>
]]></content>
      <categories>
        <category>课前</category>
        <category>学习规则</category>
      </categories>
      <tags>
        <tag>课前</tag>
      </tags>
  </entry>
  <entry>
    <title>学习规则</title>
    <url>/%E9%9A%8F%E5%A0%82%E7%AC%94%E8%AE%B0/02_%E8%AF%BE%E4%B8%AD/06_%E7%AC%AC%E5%85%AD%E7%AB%A0%20%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/06_%E7%AC%AC%E5%85%AD%E7%AB%A0%20%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h2 id="1-学习规则："><a href="#1-学习规则：" class="headerlink" title="1. 学习规则："></a>1. 学习规则：</h2><pre><code>1. 上课时间：大小周

    1. 打卡

        1. 要求每天打卡四次：

            1. 早上9：00（后期会有调整）、中午11：30与14：00、下午18：00
    2. 教学规则

        1. 上课期间手机等电子产品一律放入手机篮（手机调至静音）
        2. 晚上10点准时休息
        3. 学习期间不准酗酒
        4. 无重大事件不准请假
    3. 日报

        1. 每日必填
    4. 教学时间

        1. 分为大小周教学
    5. 教室、宿舍环境保证清洁卫生
    6. 教室、宿舍禁止抽烟
</code></pre>
<h2 id="2-时间安排-——–-gt-45天-不含休息日"><a href="#2-时间安排-——–-gt-45天-不含休息日" class="headerlink" title="2. 时间安排                ——–&gt;  45天(不含休息日)"></a>2. 时间安排                ——–&gt;  45天(不含休息日)</h2><pre><code>1. 第一章 基础              -----------&gt; 14工作天
2. 第二章 操作              -----------&gt; 6工作天
3. 第三章 接口测试        -----------&gt; 5工作日
4. 第四章 性能测试        -----------&gt; 3工作天
5. 第五章 APP测试        -----------&gt; 2工作天
6. 第六章 自动化测试    -----------&gt; 6工作天
7. 第七章 安全测试       -----------&gt; 1工作天
8. 第八章 项目             -----------&gt; 5工作天
9. 简历编写                 -----------&gt; 1工作天
10. 模拟面试题分析       -----------&gt; 2工作天
11. 面试题分析             -----------&gt; 30工作日(不在学习时间范围内)
</code></pre>
]]></content>
      <categories>
        <category>课前</category>
        <category>学习规则</category>
      </categories>
      <tags>
        <tag>课前</tag>
      </tags>
  </entry>
  <entry>
    <title>学习规则</title>
    <url>/%E9%9A%8F%E5%A0%82%E7%AC%94%E8%AE%B0/02_%E8%AF%BE%E4%B8%AD/08_%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E9%A1%B9%E7%9B%AE/08_%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h2 id="1-学习规则："><a href="#1-学习规则：" class="headerlink" title="1. 学习规则："></a>1. 学习规则：</h2><pre><code>1. 上课时间：大小周

    1. 打卡

        1. 要求每天打卡四次：

            1. 早上9：00（后期会有调整）、中午11：30与14：00、下午18：00
    2. 教学规则

        1. 上课期间手机等电子产品一律放入手机篮（手机调至静音）
        2. 晚上10点准时休息
        3. 学习期间不准酗酒
        4. 无重大事件不准请假
    3. 日报

        1. 每日必填
    4. 教学时间

        1. 分为大小周教学
    5. 教室、宿舍环境保证清洁卫生
    6. 教室、宿舍禁止抽烟
</code></pre>
<h2 id="2-时间安排-——–-gt-45天-不含休息日"><a href="#2-时间安排-——–-gt-45天-不含休息日" class="headerlink" title="2. 时间安排                ——–&gt;  45天(不含休息日)"></a>2. 时间安排                ——–&gt;  45天(不含休息日)</h2><pre><code>1. 第一章 基础              -----------&gt; 14工作天
2. 第二章 操作              -----------&gt; 6工作天
3. 第三章 接口测试        -----------&gt; 5工作日
4. 第四章 性能测试        -----------&gt; 3工作天
5. 第五章 APP测试        -----------&gt; 2工作天
6. 第六章 自动化测试    -----------&gt; 6工作天
7. 第七章 安全测试       -----------&gt; 1工作天
8. 第八章 项目             -----------&gt; 5工作天
9. 简历编写                 -----------&gt; 1工作天
10. 模拟面试题分析       -----------&gt; 2工作天
11. 面试题分析             -----------&gt; 30工作日(不在学习时间范围内)
</code></pre>
]]></content>
      <categories>
        <category>课前</category>
        <category>学习规则</category>
      </categories>
      <tags>
        <tag>课前</tag>
      </tags>
  </entry>
  <entry>
    <title>学习规则</title>
    <url>/%E9%9A%8F%E5%A0%82%E7%AC%94%E8%AE%B0/02_%E8%AF%BE%E4%B8%AD/11_%E9%9D%A2%E8%AF%95%E9%A2%98%E5%88%86%E6%9E%90/11_%E9%9D%A2%E8%AF%95%E9%A2%98%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="1-学习规则："><a href="#1-学习规则：" class="headerlink" title="1. 学习规则："></a>1. 学习规则：</h2><pre><code>1. 上课时间：大小周

    1. 打卡

        1. 要求每天打卡四次：

            1. 早上9：00（后期会有调整）、中午11：30与14：00、下午18：00
    2. 教学规则

        1. 上课期间手机等电子产品一律放入手机篮（手机调至静音）
        2. 晚上10点准时休息
        3. 学习期间不准酗酒
        4. 无重大事件不准请假
    3. 日报

        1. 每日必填
    4. 教学时间

        1. 分为大小周教学
    5. 教室、宿舍环境保证清洁卫生
    6. 教室、宿舍禁止抽烟
</code></pre>
<h2 id="2-时间安排-——–-gt-45天-不含休息日"><a href="#2-时间安排-——–-gt-45天-不含休息日" class="headerlink" title="2. 时间安排                ——–&gt;  45天(不含休息日)"></a>2. 时间安排                ——–&gt;  45天(不含休息日)</h2><pre><code>1. 第一章 基础              -----------&gt; 14工作天
2. 第二章 操作              -----------&gt; 6工作天
3. 第三章 接口测试        -----------&gt; 5工作日
4. 第四章 性能测试        -----------&gt; 3工作天
5. 第五章 APP测试        -----------&gt; 2工作天
6. 第六章 自动化测试    -----------&gt; 6工作天
7. 第七章 安全测试       -----------&gt; 1工作天
8. 第八章 项目             -----------&gt; 5工作天
9. 简历编写                 -----------&gt; 1工作天
10. 模拟面试题分析       -----------&gt; 2工作天
11. 面试题分析             -----------&gt; 30工作日(不在学习时间范围内)
</code></pre>
]]></content>
      <categories>
        <category>课前</category>
        <category>学习规则</category>
      </categories>
      <tags>
        <tag>课前</tag>
      </tags>
  </entry>
  <entry>
    <title>学习规则</title>
    <url>/%E9%9A%8F%E5%A0%82%E7%AC%94%E8%AE%B0/02_%E8%AF%BE%E4%B8%AD/10_%E6%A8%A1%E6%8B%9F%E9%9D%A2%E8%AF%95%E9%A2%98%E5%88%86%E6%9E%90/10_%E6%A8%A1%E6%8B%9F%E9%9D%A2%E8%AF%95%E9%A2%98%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="1-学习规则："><a href="#1-学习规则：" class="headerlink" title="1. 学习规则："></a>1. 学习规则：</h2><pre><code>1. 上课时间：大小周

    1. 打卡

        1. 要求每天打卡四次：

            1. 早上9：00（后期会有调整）、中午11：30与14：00、下午18：00
    2. 教学规则

        1. 上课期间手机等电子产品一律放入手机篮（手机调至静音）
        2. 晚上10点准时休息
        3. 学习期间不准酗酒
        4. 无重大事件不准请假
    3. 日报

        1. 每日必填
    4. 教学时间

        1. 分为大小周教学
    5. 教室、宿舍环境保证清洁卫生
    6. 教室、宿舍禁止抽烟
</code></pre>
<h2 id="2-时间安排-——–-gt-45天-不含休息日"><a href="#2-时间安排-——–-gt-45天-不含休息日" class="headerlink" title="2. 时间安排                ——–&gt;  45天(不含休息日)"></a>2. 时间安排                ——–&gt;  45天(不含休息日)</h2><pre><code>1. 第一章 基础              -----------&gt; 14工作天
2. 第二章 操作              -----------&gt; 6工作天
3. 第三章 接口测试        -----------&gt; 5工作日
4. 第四章 性能测试        -----------&gt; 3工作天
5. 第五章 APP测试        -----------&gt; 2工作天
6. 第六章 自动化测试    -----------&gt; 6工作天
7. 第七章 安全测试       -----------&gt; 1工作天
8. 第八章 项目             -----------&gt; 5工作天
9. 简历编写                 -----------&gt; 1工作天
10. 模拟面试题分析       -----------&gt; 2工作天
11. 面试题分析             -----------&gt; 30工作日(不在学习时间范围内)
</code></pre>
]]></content>
      <categories>
        <category>课前</category>
        <category>学习规则</category>
      </categories>
      <tags>
        <tag>课前</tag>
      </tags>
  </entry>
  <entry>
    <title>学习规则</title>
    <url>/%E9%9A%8F%E5%A0%82%E7%AC%94%E8%AE%B0/02_%E8%AF%BE%E4%B8%AD/09_%E7%AE%80%E5%8E%86%E7%BC%96%E5%86%99/09_%E7%AE%80%E5%8E%86%E7%BC%96%E5%86%99/</url>
    <content><![CDATA[<h2 id="1-学习规则："><a href="#1-学习规则：" class="headerlink" title="1. 学习规则："></a>1. 学习规则：</h2><pre><code>1. 上课时间：大小周

    1. 打卡

        1. 要求每天打卡四次：

            1. 早上9：00（后期会有调整）、中午11：30与14：00、下午18：00
    2. 教学规则

        1. 上课期间手机等电子产品一律放入手机篮（手机调至静音）
        2. 晚上10点准时休息
        3. 学习期间不准酗酒
        4. 无重大事件不准请假
    3. 日报

        1. 每日必填
    4. 教学时间

        1. 分为大小周教学
    5. 教室、宿舍环境保证清洁卫生
    6. 教室、宿舍禁止抽烟
</code></pre>
<h2 id="2-时间安排-——–-gt-45天-不含休息日"><a href="#2-时间安排-——–-gt-45天-不含休息日" class="headerlink" title="2. 时间安排                ——–&gt;  45天(不含休息日)"></a>2. 时间安排                ——–&gt;  45天(不含休息日)</h2><pre><code>1. 第一章 基础              -----------&gt; 14工作天
2. 第二章 操作              -----------&gt; 6工作天
3. 第三章 接口测试        -----------&gt; 5工作日
4. 第四章 性能测试        -----------&gt; 3工作天
5. 第五章 APP测试        -----------&gt; 2工作天
6. 第六章 自动化测试    -----------&gt; 6工作天
7. 第七章 安全测试       -----------&gt; 1工作天
8. 第八章 项目             -----------&gt; 5工作天
9. 简历编写                 -----------&gt; 1工作天
10. 模拟面试题分析       -----------&gt; 2工作天
11. 面试题分析             -----------&gt; 30工作日(不在学习时间范围内)
</code></pre>
]]></content>
      <categories>
        <category>课前</category>
        <category>学习规则</category>
      </categories>
      <tags>
        <tag>课前</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux系统</title>
    <url>/%E9%9A%8F%E5%A0%82%E7%AC%94%E8%AE%B0/02_%E8%AF%BE%E4%B8%AD/01_%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%9F%BA%E7%A1%80/901_%E6%96%87%E4%BB%B6/01_%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/02_Linux%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h3 id="linux简介："><a href="#linux简介：" class="headerlink" title="linux简介："></a>linux简介：</h3><p>Linux 是一种自由和开放源码的类 UNIX 操作系统。<br>Linux 英文解释为 Linux is not Unix。<br>Linux 是在 1991 由林纳斯·托瓦兹在赫尔辛基大学上学时创立的，主要受到 Minix 和 Unix 思想的启发。<br>本教程，我们将为大家介绍如何使用 Linux。</p>
<p>Linux 内核最初只是由芬兰人林纳斯·托瓦兹（Linus Torvalds）在赫尔辛基大学上学时出于个人爱好而编写的。<br>Linux 是一套免费使用和自由传播的类 Unix 操作系统，是一个基于 POSIX 和 UNIX 的多用户、多任务、支持多线程和多 CPU 的操作系统。<br>Linux 能运行主要的 UNIX 工具软件、应用程序和网络协议。它支持 32 位和 64 位硬件。Linux 继承了 Unix 以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。</p>
<h3 id="Linux-的发行版"><a href="#Linux-的发行版" class="headerlink" title="Linux 的发行版"></a>Linux 的发行版</h3><p>Linux 的发行版说简单点就是将 Linux 内核与应用软件做一个打包。</p>
<p><img src="/assets/image-20211120104622-naz095z.png" alt="image.png"></p>
<h3 id="Linux-vs-Windows"><a href="#Linux-vs-Windows" class="headerlink" title="Linux vs Windows"></a>Linux vs Windows</h3><p>目前国内 Linux 更多的是应用于服务器上，而桌面操作系统更多使用的是 Windows。主要区别如下</p>
<table>
<thead>
<tr>
<th>比较</th>
<th>Windows</th>
<th>Linux</th>
</tr>
</thead>
<tbody><tr>
<td>界面</td>
<td>界面统一，外壳程序固定所有Windows程序菜单几乎一致，快捷键也几乎相同</td>
<td>图形界面风格依发布版不同而不同，可能互不兼容。GNU&#x2F;Linux的终端机是从UNIX传承下来，基本命令和操作方法也几乎一致。</td>
</tr>
<tr>
<td>驱动程序</td>
<td>驱动程序丰富，版本更新频繁。默认安装程序里面一般包含有该版本发布时流行的硬件驱动程序，之后所出的新硬件驱动依赖于硬件厂商提供。对于一些老硬件，如果没有了原配的驱动有时很难支持。另外，有时硬件厂商未提供所需版本的Windows下的驱动，也会比较头痛。</td>
<td>由志愿者开发，由Linux核心开发小组发布，很多硬件厂商基于版权考虑并未提供驱动程序，尽管多数无需手动安装，但是涉及安装则相对复杂，使得新用户面对驱动程序问题（是否存在和安装方法）会一筹莫展。但是在开源开发模式下，许多老硬件尽管在Windows下很难支持的也容易找到驱动。HP、Intel、AMD等硬件厂商逐步不同程度支持开源驱动，问题正在得到缓解。</td>
</tr>
<tr>
<td>使用</td>
<td>使用比较简单，容易入门。图形化界面对没有计算机背景知识的用户使用十分有利。</td>
<td>图形界面使用简单，容易入门。文字界面，需要学习才能掌握。</td>
</tr>
<tr>
<td>学习</td>
<td>系统构造复杂、变化频繁，且知识、技能淘汰快，深入学习困难。</td>
<td>系统构造简单、稳定，且知识、技能传承性好，深入学习相对容易。</td>
</tr>
<tr>
<td>软件</td>
<td>每一种特定功能可能都需要商业软件的支持，需要购买相应的授权。</td>
<td>大部分软件都可以自由获取，同样功能的软件选择较少。</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>课中</category>
        <category>基础</category>
        <category>windows快捷键</category>
      </categories>
      <tags>
        <tag>课中</tag>
      </tags>
  </entry>
  <entry>
    <title>windows快捷键</title>
    <url>/%E9%9A%8F%E5%A0%82%E7%AC%94%E8%AE%B0/02_%E8%AF%BE%E4%B8%AD/01_%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%9F%BA%E7%A1%80/901_%E6%96%87%E4%BB%B6/01_%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/01_windows%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<h5 id="win快捷键："><a href="#win快捷键：" class="headerlink" title="win快捷键："></a>win快捷键：</h5><p>单独按Windows：显示或隐藏 “开始”功能表<br>Windows+BREAK：显示“系统属性” 对话框<br>Windows+D：显示桌面或恢复桌面<br>Windows+M：最小化所有窗口<br>Windows+Shift+M：还原最小化的窗口<br>Ctrl+Shift+N：新建文件夹<br>Windows+E：打开”我的电脑”<br>Windows+F：查找文件或文件夹<br>Windows+CTRL+ F：查找电脑<br>Windows+F1：显示 Windows “帮助”<br>Windows+R：开启“运行” 对话框<br>Windows+U：开启 “公用程序管理器”<br>Windows+L：锁定计算机（Windows XP新功能）<br>Windows按住不动+Tab：打开的应用程序切换，立体效果（win7系统支持）<br>windows +alt +F4：windows 关机窗口</p>
<h5 id="Ctr快捷键（文本编辑使用较多）"><a href="#Ctr快捷键（文本编辑使用较多）" class="headerlink" title="Ctr快捷键（文本编辑使用较多）"></a>Ctr快捷键（文本编辑使用较多）</h5><p>Ctrl+S 保存<br>Ctrl+W 关闭程序<br>Ctrl+N 新建<br>Ctrl+O 打开<br>Ctrl+Z 撤销<br>Ctrl+F 查找<br>Ctrl+P 打印文档<br>Ctrl+X 剪切<br>Ctrl+C 复制<br>Ctrl+V 粘贴<br>Ctrl+A全选<br>Ctrl+B 粗体<br>Ctrl+I 斜体<br>Ctrl+U 下划线<br>Ctrl+Shift输入法切换<br>Ctrl+ 空格 中英文切换<br>Ctrl+Home 光标快速移到文件头<br>Ctrl+End 光标快速移到文件尾<br>Ctrl+Esc 显示开始菜单<br>Ctrl+Shift+&lt; 快速缩小文字<br>Ctrl+Shift+&gt; 快速放大文字<br>Ctrl+F5 在IE中强行刷新<br>Ctrl+拖动文件 复制文件<br>Ctrl+Backspace 启动\关闭输入法<br>Ctrl+Alt+A 截屏(QQ的截屏）<br>shift + Alt + Print Screen(选中要截屏的地方，然后按这三个键，然后打开图画或者word，粘贴即可)<br>拖动文件时按住Ctrl+Shift 创建快捷方式<br>Ctrl+Tab+shift在打开的应用程序中以反方向切换</p>
<h5 id="ALT快捷键"><a href="#ALT快捷键" class="headerlink" title="ALT快捷键"></a>ALT快捷键</h5><p>Alt+F4 关闭当前程序<br>Alt+空格+C 关闭窗口<br>Alt+空格+N 最小化当前窗口<br>Alt+空格+R 恢复最大化窗口<br>Alt+空格+X 最大化当前窗口<br>Alt+空格+M 移动窗口<br>Alt+空格+S 改变窗口大小<br>Alt+u+v word全屏视图<br>Alt+F 打开文件菜单<br>Alt+V 打开视图菜单<br>Alt+E 打开编辑菜单<br>Alt+I 打开插入菜单<br>Alt+O 打开格式菜单<br>Alt+T 打开工具菜单<br>Alt+A 打开表格菜单<br>Alt+W 打开窗口菜单<br>Alt+H 打开帮助菜单<br>Alt+回车 查看文件属性<br>Alt+双击文件 查看文件属性<br>Alt+Tab在打开的应用不同窗口间进行切换</p>
<h5 id="shift快捷键"><a href="#shift快捷键" class="headerlink" title="shift快捷键"></a>shift快捷键</h5><p>Shift+空格 半\全角切换<br>Shift+F10 选中文件的右菜单<br>Shift+Del 永久删除</p>
<h5 id="FN快捷键"><a href="#FN快捷键" class="headerlink" title="FN快捷键"></a>FN快捷键</h5><p>F1 帮助<br>F2 重命名<br>F3 在windows中搜索文件<br>F5 刷新<br>F6 在窗口或桌面上循环切换屏幕元素。<br>F7 DoS下专用功能<br>F8 Windows 启动选项<br>F9 Excel 中计算公式<br>F11 切换全屏<br>F12 Word 里另存文档</p>
<h5 id="常规快捷键"><a href="#常规快捷键" class="headerlink" title="常规快捷键"></a>常规快捷键</h5><p>拖动某一项时按 CTRL 复制所选项。<br>拖动某一项时按 CTRL + SHIFT 创建所选项目的快捷键。<br>F2 重新命名所选项目。<br>CTRL + 向右键 将插入点移动到下一个单词的起始处。<br>CTRL + 向左键 将插入点移动到前一个单词的起始处。<br>CTRL + 向下键 将插入点移动到下一段落的起始处。<br>CTRL + 向上键 将插入点移动到前一段落的起始处。<br>CTRL + SHIFT + 任何箭头键突出显示一块文本。<br>SHIFT + 任何箭头键 在窗口或桌面上选择多项，或者选中文档中的文本。<br>Ctrl + A 选中全部内容。<br>F3 同一浏览器中打开的窗口切换。<br>Alt + Enter 查看所选项目的属性。<br>Alt + F4 打开关机，待机，重启<br>Alt +空格键为当前窗口打开快捷菜单。<br>Alt + Tab 在打开的项目之间切换。<br>Alt + Esc 以项目打开的顺序循环切换。<br>Shift + F10 显示所选项的快捷菜单。<br>ALT + 菜单名中带下划线的字母 显示相应的菜单（ALT在写字板中）。<br>右箭头键 打开右边的下一菜单或者打开子菜单。<br>Ctrl+Alt+Home或ctrl+home 回到页首</p>
<h5 id="FN键"><a href="#FN键" class="headerlink" title="FN键"></a>FN键</h5><p>F1 帮助<br>F2 重命名<br>F3 在windows中搜索文件<br>F5 刷新<br>F6 在窗口或桌面上循环切换屏幕元素。<br>F7 DoS下专用功能<br>F8 Windows 启动选项<br>F9 Excel 中计算公式<br>F11 切换全屏<br>F12 Word 里另存文档<br>Enter 执行活选项动或按钮所对应的命令。<br>方向键 活选项动是一组选项按钮时，请选中某个按钮。<br>BackSpace 如果在“另存为”或“打开”对话框中选中了某个文件夹，则打开上一级文件夹</p>
<h5 id="END-显示当前窗口的底端。"><a href="#END-显示当前窗口的底端。" class="headerlink" title="END 显示当前窗口的底端。"></a>END 显示当前窗口的底端。</h5><p>Home 显示当前窗口的顶端。<br>NUM LOCK+数字键盘星号* 显示所选文件夹的所有子文件夹。<br>NUM LOCK+数字键盘加号+ 显示所选文件夹的内容。<br>NUM LOCK+数字键盘减号- 折叠所选的文件夹。<br>左方向键 光标左移<br>右方向键 光标右移<br>TAB 制表键</p>
]]></content>
      <categories>
        <category>课中</category>
        <category>windows快捷键</category>
      </categories>
      <tags>
        <tag>课中</tag>
      </tags>
  </entry>
  <entry>
    <title>windows与linux的区别</title>
    <url>/%E9%9A%8F%E5%A0%82%E7%AC%94%E8%AE%B0/02_%E8%AF%BE%E4%B8%AD/01_%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%9F%BA%E7%A1%80/901_%E6%96%87%E4%BB%B6/01_%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/03_windows%E4%B8%8Elinux%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p>Windows和Linux是完全不同的两种操作系统。 Windows是微软公司出的商业操作系统，在全球90%以上的电脑用的都是Windows的操作系统。 Linux是一款开源免费的操作系统，不用掏钱就能用。全球好多服务器用的是这个操作系统。</p>
<p>做为个人电脑使用，这两种系统对比有什么优缺点呢？ 首先说说Windows。</p>
<h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p><img src="/assets/image-20211122224703-cy1k2rz.png" alt="image.png"></p>
<p>Windows 做为全球使用量第一的操作系统，要说没有优点那是不可能的。 不但有优点，而且还有很多优点，有些优点还是其他操作系统无论如何也追不上的。</p>
<h3 id="1-不用安装"><a href="#1-不用安装" class="headerlink" title="1. 不用安装"></a>1. 不用安装</h3><p>这个不用安装并不是说不用安装操作系统，而是除了Mac之外，99%以上的个人电脑都是在出厂的时候就安装好了Windows系统， 电脑到手直接使用就行，不用再担心还要安装系统的问题。</p>
<h3 id="2-容易维修"><a href="#2-容易维修" class="headerlink" title="2. 容易维修"></a>2. 容易维修</h3><p>正是因为Windows是全球使用量第一的操作系统， 所以几乎所有的电脑店里面都是以维修Windows电脑为主。 如果系统出的问题，基本随便到一个电脑店都能解决。</p>
<h3 id="3-软件和游戏数量极大"><a href="#3-软件和游戏数量极大" class="headerlink" title="3. 软件和游戏数量极大"></a>3. 软件和游戏数量极大</h3><p>Windows全球使用量第一，所以全球开发者数量也很高。 这就造成了Windows上面的软件数量非常非常之大，这点是Linux无论如何也追不上的。 像我们国内常用的QQ，微信等在Linux上就没有， 更不要说像英雄联盟，绝地求生这些游戏了。 在Linux中虽然也能通过Wine安装Windows软件， 但大部分软件都是不兼容的， 而且安装了Wine以后整个系统都不稳定了。</p>
<h3 id="4-硬件兼容性好"><a href="#4-硬件兼容性好" class="headerlink" title="4. 硬件兼容性好"></a>4. 硬件兼容性好</h3><p>很多硬件的驱动在Windows能很方便的安装，但在Linux的根本就没有。 比如我用的笔记本，在使用Windows系统，WiFi，蓝牙，各种硬件都正常， 但使用Linux系统WiFi是不能用的， 还要自己编译安装驱动程序。</p>
<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p><img src="/assets/image-20211122224710-34agwn3.png" alt="image.png"></p>
<p>Linux做为开源免费的操作系统，也有些优点是Windows无论如何也赶不上的。</p>
<h3 id="1-不用花钱"><a href="#1-不用花钱" class="headerlink" title="1. 不用花钱"></a>1. 不用花钱</h3><p>正版的Windows系统是要花钱购买的，而且价钱还不低（买笔记本带Windows系统其实系统钱是包含在里面的）。 而Linux是开源免费的，任何人不用花钱都可以下载使用，而且有多个发行版可供选择。</p>
<h3 id="2-稳定性-x2F-流畅度高"><a href="#2-稳定性-x2F-流畅度高" class="headerlink" title="2. 稳定性&#x2F;流畅度高"></a>2. 稳定性&#x2F;流畅度高</h3><p>使用Windows系统时不时会出现卡顿，不稳定的问题，但Linux不会。选择一个好的发行版做为个人电脑系统使用的话一般不会出现卡顿的情况。 而且Windows系统长时间使用的话要重启一下，不然可能就没有开机时流畅了。</p>
<p>在Windows中由于空间不够用都会安装一款清理垃圾文件的软件，Windows系统本身会占用很大的空间，随便安装几个软件系统盘也许就满了。 但在Linux中一般不需要，因为Linux系统本身不会占用多大的磁盘空间，安装软件也都是规范的位置，系统临时目录重启时会自动清理，不会占用大量的磁盘空间。</p>
<p>在我的使用体验中，Linux的流畅度是比Windows高的。比如我使用的编程软件IDEA，同一台电脑同一块硬盘，在Windows上打开一个项目要3到5秒， 但在Linux（Ubuntu 18.04）中打开同一个项目只要不到1秒。</p>
<h3 id="4-安全性高"><a href="#4-安全性高" class="headerlink" title="4. 安全性高"></a>4. 安全性高</h3><p>在Windows系统中是一定要安装杀毒软件的。就算你不安装，Windows系统自带的也会启动。但在Linux中不用，因为Linux是一个有严格权限控制的系统，平常使用的时候一般不会使用root用户，就算有恶意脚本也不至于对系统造成大破坏。而且Linux的病毒数量也极少。</p>
<h3 id="5-可定制性高"><a href="#5-可定制性高" class="headerlink" title="5. 可定制性高"></a>5. 可定制性高</h3><p>由于Linux系统是开源的， 所以每个人都可以下载其源代码进行定制。就算是已经存在的发行版桌面环境也都是可以换的。如果你有能力，可以把Linux系统改的它亲爹都不认识。</p>
<h3 id="6-性能高"><a href="#6-性能高" class="headerlink" title="6. 性能高"></a>6. 性能高</h3><p>Linux的开发都可能比使用者还要多，这就意味着Linux从内核到软件都是经过多次的优化的。性能高自然也是不奇怪。这个性能不仅表现在软件性能，现在还表现在游戏性能上，我在同一台电脑上在Windows系统中玩我的世界不限制帧率能跑800多帧，但在Linux里面使用同一个显卡，加载同一个游戏，同一个场景，能跑1000多帧。</p>
]]></content>
      <categories>
        <category>课中</category>
        <category>基础</category>
        <category>windows与linux的区别</category>
      </categories>
      <tags>
        <tag>课中</tag>
      </tags>
  </entry>
  <entry>
    <title>测试计划</title>
    <url>/%E9%9A%8F%E5%A0%82%E7%AC%94%E8%AE%B0/02_%E8%AF%BE%E4%B8%AD/01_%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%9F%BA%E7%A1%80/901_%E6%96%87%E4%BB%B6/902_%E6%B5%8B%E8%AF%95%E7%90%86%E8%AE%BA/01_%E6%B5%8B%E8%AF%95%E8%AE%A1%E5%88%92/</url>
    <content><![CDATA[<ol>
<li><h3 id="测试计划（Testing-plan）的定义"><a href="#测试计划（Testing-plan）的定义" class="headerlink" title="测试计划（Testing plan）的定义"></a>测试计划（Testing plan）的定义</h3><ol>
<li>描述了要进行的测试活动的范围、方法、资源和进度的文档；<br> 是对整个信息系统应用软件组装测试和确认测试。<br> 它确定测试项、被测特性、测试任务、谁执行任务、各种可能的风险。<br> 测试计划可以有效预防计划的风险，保障计划的顺利实施。</li>
</ol>
</li>
<li><h3 id="测试计划的目的"><a href="#测试计划的目的" class="headerlink" title="测试计划的目的"></a>测试计划的目的</h3> （1）为测试各项活动制定一个现实可行的、综合的计划，包括每项测试活动的对象、范围、方法、进度和预期结果。<br> （2）为项目实施建立一个组织模型，并定义测试项目中每个角色的责任和工作内容。<br> （3）开发有效的测试模型，能正确地验证正在开发的软件系统。<br> （4）确定测试所需要的时间和资源，以保证其可获得性、有效性。<br> （5）确立每个测试阶段测试完成以及测试成功的标准、要实现的目标。<br> （6）识别出测试活动中各种风险，并消除可能存在的风险，降低由不可能消除的风险所带来的损失。</li>
<li><h3 id="测试计划由谁编写"><a href="#测试计划由谁编写" class="headerlink" title="测试计划由谁编写"></a>测试计划由谁编写</h3><ol>
<li>测试计划属于管理型文档，是由测试经理、测试主管或测试组长进行编写。</li>
</ol>
</li>
<li><h3 id="测试计划编写的6个要素"><a href="#测试计划编写的6个要素" class="headerlink" title="测试计划编写的6个要素"></a>测试计划编写的6个要素</h3> 1）why——为什么要进行这些测试；<ol start="2">
<li>what—测试哪些方面，不同阶段的工作内容；</li>
<li>when—测试不同阶段的起止时间；</li>
<li>where—相应文档，缺陷的存放位置，测试环境等；</li>
<li>who—项目有关人员组成，安排哪些测试人员进行测试</li>
<li>how—如何去做，使用哪些测试工具以及测试方法进行测试。</li>
</ol>
</li>
<li><h3 id="测试计划主要内容"><a href="#测试计划主要内容" class="headerlink" title="测试计划主要内容"></a>测试计划主要内容</h3><ol>
<li>((20220109204311-7dlgpja “测试范围”))</li>
<li>((20220109204317-no7yvl2 “测试环境”))</li>
<li>((20220109204318-skn2tfq “测试策略”))</li>
<li>((20220109204320-587rq9h “测试管理”))</li>
<li>((20220109204322-q58c95g “测试风险”))</li>
</ol>
</li>
<li><h3 id="20220109204415-rksiv5p-“测试计划范本”"><a href="#20220109204415-rksiv5p-“测试计划范本”" class="headerlink" title="((20220109204415-rksiv5p “测试计划范本”))"></a>((20220109204415-rksiv5p “测试计划范本”))</h3></li>
</ol>
]]></content>
      <categories>
        <category>课中</category>
        <category>基础</category>
        <category>测试计划</category>
      </categories>
      <tags>
        <tag>课中</tag>
      </tags>
  </entry>
  <entry>
    <title>软件测试的分类</title>
    <url>/%E9%9A%8F%E5%A0%82%E7%AC%94%E8%AE%B0/02_%E8%AF%BE%E4%B8%AD/01_%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%9F%BA%E7%A1%80/901_%E6%96%87%E4%BB%B6/902_%E6%B5%8B%E8%AF%95%E7%90%86%E8%AE%BA/02_%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%9A%84%E5%88%86%E7%B1%BB/</url>
    <content><![CDATA[<p><img src="/assets/wpsEE47.tmp-20211120145802-z73wzpx.jpg"></p>
<ul>
<li><p>按开发阶段分类</p>
<ul>
<li><p>单元测试</p>
<ul>
<li>模块测试，最小单位的测试</li>
</ul>
</li>
<li><p>集成测试</p>
<ul>
<li>把单元的小模块组合起来进行的测试</li>
<li>测试不同模块接口的测试</li>
</ul>
</li>
<li><p>系统测试 ———————–把系统看成一个整体进行的测试</p>
<ul>
<li>功能测试</li>
<li>兼容性测试</li>
<li>性能测试</li>
<li>安全测试</li>
</ul>
</li>
<li><p>验收测试</p>
<ul>
<li>α测试   内测的一个版本测试</li>
<li>β测试   公测的一个版本测试</li>
</ul>
</li>
</ul>
</li>
<li><p>按是否查看代码</p>
<ul>
<li>白盒测试</li>
<li><a href="../03_%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95/">黑盒测试</a></li>
<li>灰盒测试</li>
</ul>
</li>
<li><p>按测试执行方式</p>
<ul>
<li>静态测试</li>
<li>动态测试</li>
</ul>
</li>
<li><p>按是否手工执行划分</p>
<ul>
<li>手动测试</li>
<li>自动化测试</li>
</ul>
</li>
<li><p>其他分类</p>
<ul>
<li>冒烟测试     快速验证主要功能的测试</li>
<li>回归测试</li>
<li>随机测试</li>
<li>探索性测试    随机测试的升级版，测试的一种思维方式，强调遇到问题之后，改变测试策略，能够发现更加深入的问题，是未来测试发展的一个领域</li>
</ul>
</li>
</ul>
<p><a href="../04_%E6%B5%8B%E8%AF%95%E7%A7%8D%E7%B1%BB%E5%88%92%E5%88%86/">测试种类划分</a></p>
]]></content>
      <categories>
        <category>课中</category>
        <category>基础</category>
        <category>软件测试的分类</category>
      </categories>
      <tags>
        <tag>课中</tag>
      </tags>
  </entry>
  <entry>
    <title>黑盒测试</title>
    <url>/%E9%9A%8F%E5%A0%82%E7%AC%94%E8%AE%B0/02_%E8%AF%BE%E4%B8%AD/01_%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%9F%BA%E7%A1%80/901_%E6%96%87%E4%BB%B6/902_%E6%B5%8B%E8%AF%95%E7%90%86%E8%AE%BA/03_%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h3 id="目录："><a href="#目录：" class="headerlink" title="目录："></a>目录：</h3><ul>
<li>定义：</li>
<li>目的</li>
<li>优点</li>
<li>测试用例</li>
</ul>
<h3 id="内容："><a href="#内容：" class="headerlink" title="内容："></a>内容：</h3><ul>
<li><p>定义</p>
<ul>
<li>黑盒测试是从一种从软件外部对软件实施的测试，也成功能测试</li>
<li>不考虑内部结构，只考虑输入与输出的测试</li>
<li><img src="/assets/image-20211120150914-c5nxlpa.png" alt="image.png"></li>
</ul>
</li>
<li><p>目的</p>
<ul>
<li>黑盒测试是从用户观点出发的测试，其目的是尽可能发现软件的外部行为错误。在已知软件产品功能的基础上：<br>检测软件功能能否按照需求文档的规定正常工作，是否有功能遗漏；<br>检测是否有人机交互错误，是否有数据结构和外部数据库访问错误，是否能恰当地接收数据并保持外部信息等的完整性<br>检测行为、性能等特性是否满足要求等；<br>检测程序初始化和终止方面的错误等；</li>
</ul>
</li>
<li><p>优点</p>
<ul>
<li>黑盒测试与软件具体实现无关，所以如果软件实现发生了变化，测试用例仍然可以使用；</li>
<li>设计黑盒测试用例可以和软件实现同时进行，因此可以压缩项目总的开发时间</li>
</ul>
</li>
<li><p>测试用例</p>
<ul>
<li><p>测试用例概念</p>
<ul>
<li>测试用例（testcase）是指对一项特定的软件进行测试任务的描述、体现测试方案、方法、技术和策略</li>
<li>简单地认为，测试用例是为了发现软件存在的问题编写的一组包含测试输入、执行条件以及预期结果的文档，用来核实软件产品是否满需求</li>
<li><img src="/assets/image-20211120151028-c13v85v.png" alt="image.png"></li>
</ul>
</li>
<li><p>测试用例的作用</p>
<ul>
<li><p>指导测试的实施</p>
</li>
<li><p>规划测试数据的准备</p>
</li>
<li><p>编写测试脚本的“设计规格说明书”</p>
</li>
<li><p>评估测试结果的度量基准</p>
</li>
<li><p>分析缺陷的标准</p>
<ul>
<li>bug</li>
</ul>
</li>
</ul>
</li>
<li><p>使用测试用例的好处</p>
<ul>
<li>避免盲目测试并提高测试效率</li>
<li>令软件测试的实施重点突出、目的明确</li>
<li>软件版本更新后只需修正少部分的测试用例便可展开测试工作</li>
<li>测试用例的通用化和复用化则会使软件测试易于开展</li>
</ul>
</li>
<li><p>测试用例的内容</p>
<ul>
<li>版本号<br>项目名称<br>模块名称<br>用例编号<br>用例名称<br>用例级别<br>前置条件<br>测试步骤<br>期望结果<br>测试结果<br>测试时间<br>测试人员</li>
</ul>
</li>
<li><p>((20211203110629-z3n01go “测试用例简介”))</p>
</li>
<li><p>输入内容的分类：字母+数字+特殊字符+汉字   &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;   字符</p>
</li>
<li><p>常见黑盒测试用例设计方法</p>
<ul>
<li><p>等价类</p>
<ul>
<li><p>定义：等价类是指输入域的某个互不相交的子集集合，所有等价类的并集便是整个输入域</p>
</li>
<li><p>分类</p>
<ul>
<li>有效等价类      符合需求说明，合理地输入数据集合</li>
<li>无效等价类      不符合需求说明，无意义的输入数据的集合</li>
<li><img src="/assets/image-20211120151741-y3xtcn5.png" alt="image.png"></li>
</ul>
</li>
<li><p>等价类划分方法</p>
<ul>
<li><p>输入条件规定了取值范围或值的个数：确定一个有效等价类和两个无效等价类</p>
</li>
<li><p>输入条件规定了输入值的集合：确定一个有效等价类和一个无效等价类</p>
<ul>
<li><p>只允许输入汉字</p>
<ul>
<li>有效等价类：汉字</li>
<li>无效等价类：字母、数字、特殊字符</li>
</ul>
</li>
</ul>
</li>
<li><p>输入条件是一个布尔值：可以确定一个有效等价类和一个无效等价类   True&#x2F;FALSE（真&#x2F;假）</p>
</li>
<li><p>输入条件规定必须遵循某种规则：确定一个有效等价类和若干个无效等价类</p>
</li>
<li><p>在规定了输入数据的一组值（假定N个），并且程序要对每个输入值分别处理：可以确立N个有效等价类和一个无效等价类——-先不理解</p>
</li>
</ul>
</li>
<li><p>等价类划分用例设计步骤</p>
<ul>
<li>为每一个等价类规定一个唯一的编号</li>
<li>设计一个心得测试用例，尽可能多的覆盖尚未被覆盖的有效等价类，重复这一步，直到测试用例覆盖了所有的有效等价类</li>
<li>设计一个新的测试用例，使其覆盖并只覆盖一个没有被覆盖的无效等价类。重复这一步，直至测试用例覆盖了所有的无效等价类</li>
</ul>
</li>
<li><p>练习</p>
<ul>
<li>问题：两位整数加法计数器<br>第一个数和第二个数都只能输入-99到99之间的整数<br>对于输入小于-99得数据或者大于99的数据，系统应该给出明确提示<br>对于输入小数、字符等非法数据，系统应该给出明确提示</li>
<li><img src="/assets/image-20211120151946-pg5vfr8.png" alt="image.png"></li>
<li><img src="/assets/image-20211120151957-ot0ftmq.png" alt="image.png"></li>
<li><img src="/assets/image-20211120152002-7y5g4a5.png" alt="image.png"></li>
</ul>
</li>
</ul>
</li>
<li><p>边界值</p>
<ul>
<li><p>定义：大量的软件测试时间证明，故障往往出现在定义域或值域的边界上，而不是在其内部</p>
</li>
<li><p>边界：是一些特殊情况，程序在处理大量中间数值时都是正确，但是在边界处可能出现错误，边界条件就是软件计划的操作界限所在的边缘条件</p>
</li>
<li><p>边界值选取方法</p>
<ul>
<li>选取正好等于、刚刚大于或者刚刚小于等价类边界值作为测试数据，而不是选取等价类中的典型值或任意值作为测试数据</li>
<li><img src="/assets/image-20211120152045-xkqwjfz.png" alt="image.png"></li>
</ul>
</li>
<li><p>边界值分析测试</p>
<ul>
<li>最小值（min）</li>
<li>稍大于最小值（min+）</li>
<li>域内任意值（nom）</li>
<li>稍小于最大值（max-）</li>
<li>最大值（max）</li>
</ul>
</li>
<li><p>健壮性边界值测试</p>
<ul>
<li>健壮性测试是边界值分析的一种扩展</li>
<li>变量除了取min、min+、nom、max-、max五个边界值外，还要考虑采用一个略超过最大值（max+）以及一个略小于最小值（min-）的取值，看看超过极限值时系统会出现什么情况</li>
</ul>
</li>
<li><p>边界值分析原则</p>
<ul>
<li>如果输入条件对取值范围进行了限定，则应以边界内部以及刚刚超出范围边界外的值作为测试用例</li>
<li>对于输入条件，同样可以应用上面提到的两条原则来进行测试用例设计</li>
<li>如果程序规格说明书中指明输入或者输出域是一个有序的集合，如顺序文件、表格等，则应注意选取有序集合中的第一个和最后一个元素作为测试用例</li>
</ul>
</li>
</ul>
</li>
<li><p>错误推断法</p>
<ul>
<li>定义： 指利用直觉和经验猜测出出错的可能类型，有针对性的列举出程序中所有可能的错误和容易发生错误的情况</li>
<li>列举出可能犯的错误或错误容易发生的清单，然后根据清单编写测试用例</li>
</ul>
</li>
<li><p>场景分析法</p>
</li>
<li><p>因果图</p>
</li>
<li><p>判定表</p>
</li>
<li><p>正交法</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>课中</category>
        <category>基础</category>
        <category>黑盒测试</category>
      </categories>
      <tags>
        <tag>课中</tag>
      </tags>
  </entry>
  <entry>
    <title>测试种类划分</title>
    <url>/%E9%9A%8F%E5%A0%82%E7%AC%94%E8%AE%B0/02_%E8%AF%BE%E4%B8%AD/01_%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%9F%BA%E7%A1%80/901_%E6%96%87%E4%BB%B6/902_%E6%B5%8B%E8%AF%95%E7%90%86%E8%AE%BA/04_%E6%B5%8B%E8%AF%95%E7%A7%8D%E7%B1%BB%E5%88%92%E5%88%86/</url>
    <content><![CDATA[<p>软件测试方法种类繁多，记忆起来混乱， 如果把软件测试方法进行分类, 就会清晰很多。 我参考一些书籍和网上的资料， 把常用的软件测试方法列出来， 让大家对软件测试行业有个总体的看法。</p>
<h1 id="从测试设计方法分类"><a href="#从测试设计方法分类" class="headerlink" title="从测试设计方法分类"></a><strong>从测试设计方法分类</strong></h1><table>
<thead>
<tr>
<th>测试名称</th>
<th>测试内容</th>
</tr>
</thead>
<tbody><tr>
<td>Black box黑盒测试</td>
<td>把软件系统当作一个“黑箱”，无法了解或使用系统的内部结构及知识。从软件的行为，而不是内部结构出发来设计测试.</td>
</tr>
<tr>
<td>White box白盒测试</td>
<td>设计者可以看到软件系统的内部结构，并且使用软件的内部知识来指导测试数据及方法的选择。</td>
</tr>
<tr>
<td>Gray box.灰盒测试</td>
<td>介于黑盒和白盒之间</td>
</tr>
</tbody></table>
<p>总结：   实际工作中，对系统的了解越多越好。目前大多数的测试人员都是做黑盒测试，很少有做白盒测试的。 因为白盒测试对软件测试人员的要求非常高，需要有很多编程经验。做.NET程序的白盒测试你要能看得懂.NET代码。做JAVA程序的测试，需要你能看懂JAVA的代码。 如果你都能看懂了，你还会做测试么</p>
<h1 id="从测试是手动还是自动上分类"><a href="#从测试是手动还是自动上分类" class="headerlink" title="从测试是手动还是自动上分类"></a><strong>从测试是手动还是自动上分类</strong></h1><table>
<thead>
<tr>
<th>测试名称</th>
<th>测试内容</th>
</tr>
</thead>
<tbody><tr>
<td>Manual Test手动测试</td>
<td>测试人员用鼠标去手动测试（测试GUI）</td>
</tr>
<tr>
<td>Automation自动化测试</td>
<td>用程序测试程序（测试API）</td>
</tr>
</tbody></table>
<p>对于项目来说， 手动测试和自动化测试同等重要，都是保障软件质量的方法。 目前大部分的项目组都是手动测试和自动化测试相结合。因为很多测试无法做成自动化，很多复杂的业务逻辑也很难自动化， 所以自动化测试无法取代手动测试。</p>
<p>对于软件测试人员个人发展来说， 做自动化测试是个挑战，也是测试人员发展的一个方向，  需要测试人员学习大量的开发知识（开发的知识真是学无止境啊）。 从长远角度来看，自动化测试肯定是越来越吃香的。</p>
<p>而手动测试比较适合刚工作不久的人，手动测试最大的缺点就是技术含量低，单调乏味，容易废人。</p>
<p>总的来说，手工测试胜在测试业务逻辑，而自动化测试胜在测试底层架构。</p>
<p>如果被测试的程序可测试性比较好， 很有必要做成自动化测试。 能做自动化的尽量做成自动化， 下面这些情形是可以做自动化的</p>
<ol>
<li>测试存储过程。  例如用C#去测试存储过程</li>
<li>测试Web servies. 例如： 用SoupUI工具，或者C#,Java 去测试Web servies。</li>
<li>界面和业务逻辑分离的系统，比如，MVC，MVP架构， 或者WPF 程序。 可以用测试脚本去测试这些程序的API。</li>
</ol>
<h1 id="从测试的目的分类"><a href="#从测试的目的分类" class="headerlink" title="从测试的目的分类"></a><strong>从测试的目的分类</strong></h1><p>功能测试</p>
<p>测试的范围从小到大，从内到外， 从程序开发人员（单元测试）到测试人员，到一般用户Alpha&#x2F;Beta测试</p>
<table>
<thead>
<tr>
<th>测试名称</th>
<th>测试内容</th>
</tr>
</thead>
<tbody><tr>
<td>Unit Test 单元测试</td>
<td>在最低的功能&#x2F;参数上验证程序的准确性,比如测试一个函数的正确性(开发人员做的)</td>
</tr>
<tr>
<td>Functional Test功能测试</td>
<td>验证模块的功能（测试人员做的）</td>
</tr>
<tr>
<td>Integration Test集成测试</td>
<td>验证几个互相有依赖关系的模块的功能（测试人员做的）</td>
</tr>
<tr>
<td>Scenario Test场景测试</td>
<td>验证几个模块是否能完成一个用户场景（测试人员做的）</td>
</tr>
<tr>
<td>System Test系统测试</td>
<td>对于整个系统功能的测试（测试人员做的）</td>
</tr>
<tr>
<td>Alpha测试</td>
<td>软件测试人员在真实用户环境中对软件进行全面的测试（测试人员做的）</td>
</tr>
<tr>
<td>Beta测试</td>
<td>真实的用户在真实的用户环境中进行的测试, 也叫公测   （最终用户做的）</td>
</tr>
</tbody></table>
<p> </p>
<p>非功能测试</p>
<p>一个软件除了基本功能之外，还有很多功能之外的特性，这些叫“Quality of Service requirement”服务质量需求。没有软件的功能，这些特性都无从表现出来，因此，我们要在软件开发的适当阶段-基本功能完成后做这些测试。</p>
<table>
<thead>
<tr>
<th>测试名称</th>
<th>测试内容</th>
</tr>
</thead>
<tbody><tr>
<td>Stress test压力测试</td>
<td>验证软件在超过负载设计的情况下仍能返回正确的结果，没有崩溃</td>
</tr>
<tr>
<td>Load test负载测试</td>
<td>测试软件在负载情况下能否正常工作</td>
</tr>
<tr>
<td>Performance test性能测试</td>
<td>测试软件的效能，是否提供满意的服务质量</td>
</tr>
<tr>
<td>Accessibility test</td>
<td>软件辅助功能测试-测试软件是否向残疾用户提供足够的辅助功能</td>
</tr>
<tr>
<td>Localization&#x2F;Globalization</td>
<td>本地化&#x2F;全球化测试</td>
</tr>
<tr>
<td>Compatibility Test</td>
<td>兼容性测试</td>
</tr>
<tr>
<td>Configuration Test</td>
<td>配置测试-测试软件在各种配置下能否正常工作</td>
</tr>
<tr>
<td>Usability Test</td>
<td>可用性测试–测试软件是否好用</td>
</tr>
<tr>
<td>Security Test</td>
<td>软件安全性测试</td>
</tr>
</tbody></table>
<p>性能测试</p>
<p>性能测试要求测试人员熟练性能测试工具，比如QTP, LoadRunner, Jmeter。  Visual Studio也提供了很多性能测试的工具. 要求测试人员对低层协议非常理解和编写脚本</p>
<p>性能测试非常有技术含量， 很有发展前途， 是软件测试人员的一个职业发展方向。</p>
<p>安全性测试</p>
<p>安全性测试的内容很广， 非常有难度啊。 我只接触过XSS（跨站脚本攻击）和SQL注入攻击。</p>
<p>安全性测试非常有技术含量， 我认为也是软件测试人员的一个职业发展方向</p>
<p>按测试的时机和作用分类</p>
<p>在开发软件的过程中，不少测试起着“烽火台”的作用，它们告诉我们软件开发的流程是否畅通。</p>
<table>
<thead>
<tr>
<th>测试名称</th>
<th>测试内容</th>
</tr>
</thead>
<tbody><tr>
<td>Smoke Test</td>
<td>“冒烟”–如果测试不通过，则不能进行下一步工作</td>
</tr>
<tr>
<td>Build Verification Test（BVT）</td>
<td>验证构建是否通过基本测试。</td>
</tr>
<tr>
<td>Acceptance Test</td>
<td>验收测试，为了全面考核某功能&#x2F;特性而做的测试</td>
</tr>
</tbody></table>
<p>BVT测试是一种Smoke Test, 指Build生成好之后，自动运行的自动化测试脚本来检查这个Build的基本功能。 如果BVT测试失败了，需要开发人员马上修改，重新生成Build</p>
<p>按测试测策略分类。</p>
<table>
<thead>
<tr>
<th>测试名称</th>
<th>测试内容</th>
</tr>
</thead>
<tbody><tr>
<td>Regression Test回归测试</td>
<td>对一个新的版本，重新运行以往的测试用例，看看新版本和已知的版本相比是否有退化(regression)</td>
</tr>
<tr>
<td>Ad hoc Test探索性测试</td>
<td>随机进行的，探索性的测试。</td>
</tr>
<tr>
<td>Sanity Test</td>
<td>粗略的测试，只需要执行部分的测试用例</td>
</tr>
</tbody></table>
<p>Regression Test 回归测试：　　</p>
<p>对软件测试人员来说就是重复测试，所以回归测试最好是自动化的，　否则测试人员就要一遍又一遍地重复测试，　</p>
<ol>
<li>开发人员做些小改动，就需要测试人员做回归测试。确保现有的功能没有被破坏</li>
<li>Bug Fix 也需要回归测试，确保新的代码修复了Fix, 也确保现有的功能没有被破坏</li>
<li>项目后期，需要做一个完整回归测试， 确保所有的功能都是好的</li>
</ol>
<p>Ad hoc Test 探索性测试：</p>
<p>平常我最喜欢做随机测试了， 抛开test case.  自己按照自己的思路，随便点点。 如果测试GUI，Ad hoc能发现大量的bug.</p>
]]></content>
      <categories>
        <category>课中</category>
        <category>基础</category>
        <category>测试种类划分</category>
      </categories>
      <tags>
        <tag>课中</tag>
      </tags>
  </entry>
</search>
