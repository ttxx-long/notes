<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>软件测试技术分享</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-05-12T15:44:10.255Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>yulong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>UI自动化测试框架_关键字驱动+数据驱动</title>
    <link href="http://example.com/07_%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/06_%E8%87%AA%E5%8A%A8%E5%8C%96/02_%E8%87%AA%E5%8A%A8%E5%8C%96%E5%AE%9E%E6%93%8D/01_UI%E8%87%AA%E5%8A%A8%E5%8C%96/UI%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/01_UI%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6_%E5%85%B3%E9%94%AE%E5%AD%97%E9%A9%B1%E5%8A%A8+%E6%95%B0%E6%8D%AE%E9%A9%B1%E5%8A%A8/"/>
    <id>http://example.com/07_%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/06_%E8%87%AA%E5%8A%A8%E5%8C%96/02_%E8%87%AA%E5%8A%A8%E5%8C%96%E5%AE%9E%E6%93%8D/01_UI%E8%87%AA%E5%8A%A8%E5%8C%96/UI%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/01_UI%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6_%E5%85%B3%E9%94%AE%E5%AD%97%E9%A9%B1%E5%8A%A8+%E6%95%B0%E6%8D%AE%E9%A9%B1%E5%8A%A8/</id>
    <published>2022-05-10T14:39:24.415Z</published>
    <updated>2022-05-12T15:44:10.255Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>关键字驱动框架简介<br> 原理及特点<br> 关键字驱动测试是数据驱动测试的一种改进类型，它也被称为表格驱动测试或者基于动作字的测试。<br> 主要关键字包括三类：被操作对象（Item）、操作行为（Operation）和操作值（Value），用面向对象形式可将其表现为 Item.Operation(Value)。<br> 将测试逻辑按照这些关键字进行分解，形成数据文件。<br> 用关键字的形式将测试逻辑封装在数据文件中，测试工具只要能够解释这些关键字即可对其应用自动化。</p><p> <img src="/assets/2/image-20220510224044-p91vm0i.png" alt="image.png"></p></li></ol><p>优势<br>执行人员可以不需要太多的技术：一旦框架建立，手工测试人员和非技术人员都可以很容易的编写自动化测试脚本。<br>简单易懂：它存在Excel表格中，没有编码，测试脚本容易阅读和理解。关键字和操作行为这样的手工测试用例，使它变得更容易编写和维护。<br>早期介入：可以在应用未提交测试之前，就可以建立关键字驱动测试用例对象库，从而减少后期工作。使用需求和其它相关文档进行收集信息，关键字数据表可以建立手工测试程序。<br>代码的重用性：用关键字的形式将测试用例及数据进行组装并解释执行，提高代码的可重用性。</p><ol start="2"><li>工程结构说明<br> 工程结构<br> 整个测试框架分为四层，通过分层的方式，测试代码更容易理解，维护起来较为方便。</li></ol><p>第一层是“测试工具层”：</p><p>util 包：用于实现测试过程中调用的工具类方法，例如读取配置文件、页面元素的操作方法、操作 Excel 文件、生成测试报告、发送邮件等。<br>conf 包：配置文件及全局变量。<br>log 目录：日志输出文件。<br>exception_pic 目录：失败用例的截图保存目录。<br>第二层是“服务层”：相当于对测试对象的一个业务封装。对于接口测试，是对远程方法的一个实现；对于 UI 测试，是对页面元素或操作的一个封装。</p><p>action 包：封装具体的页面动作，如点击、输入文本等。<br>第三层是“测试用例逻辑层”：该层主要是将服务层封装好的各个业务对象，组织成测试逻辑，进行校验。</p><p>bussiness_process 包：基于关键字的形式，实现单条、多条用例的测试脚本逻辑。<br>test_data 目录：Excel 数据文件，包含用例步骤、被操作对象、操作动作、操作值、测试结果等。<br>第四层是“测试场景层”：将测试用例组织成测试场景，实现各种级别 cases 的管理，如冒烟，回归等测试场景。</p><p>main.py：本框架工程的运行主入口。</p><p><img src="/assets/2/image-20220510224058-kw8qpal.png" alt="image.png"></p><p><img src="/assets/2/image-20220510224106-pu6cppw.png" alt="image.png"></p><p>框架特点<br>基于关键字测试框架，即使不懂开发技术的测试人员也可以实施自动化测试，便于在整个测试团队中推广和使用自动化测试技术，降低自动化测试实施的技术门槛。<br>使用外部测试数据文件，使用Excel管理测试用例的集合和每个测试用例的所有执行步骤，实现在一个文件中完成测试用例的维护工作。<br>通过定义关键字、操作元素的定位方式和定位表达式和操作值，就可以实现每个测试步骤的执行，可以更加灵活地实现自动化测试的需求。<br>基于关键字的方式，可以进行任意关键字的扩展，以满足更加复杂的自动化测试需求。<br>实现定位表达式和测试代码的分离，实现定位表达式直接在数据文件中进行维护。<br>框架提供日志功能，方便调试和监控自动化测试程序的执行。</p><ol start="3"><li>工程代码实现<br> action 包<br> action 包为框架第二层“服务层”，相当于对测试对象的一个业务封装。对于接口测试，是对远程方法的一个实现；对于 UI 测试，是对页面元素或操作的一个封装。</li></ol><p>page_action.py<br>该模块基于关键字格式，封装了页面操作的常用函数，如打开浏览器、点击、输入文本等。</p><p>  1 from selenium import webdriver<br>  2 import time<br>  3 import traceback<br>  4 from util.datetime_util import *<br>  5 from util.find_element_util import *<br>  6 from util.ini_parser import *<br>  7 from util.log_util import *<br>  8<br>  9<br> 10 DRIVER &#x3D; “”<br> 11<br> 12<br> 13 # 初始化浏览器<br> 14 def init_browser(browser_name):<br> 15     global DRIVER<br> 16     if browser_name.lower() &#x3D;&#x3D; “chrome”:<br> 17         DRIVER &#x3D; webdriver.Chrome(CHROME_DRIVER)<br> 18     elif browser_name.lower() &#x3D;&#x3D; “firefox”:<br> 19         DRIVER &#x3D; webdriver.Firefox(FIREFOX_DRIVER)<br> 20     elif browser_name.lower() &#x3D;&#x3D; “ie”:<br> 21         DRIVER &#x3D; webdriver.Ie(IE_DRIVER)<br> 22     else:<br> 23         warning(“浏览器【%s】不支持，已默认启动chrome” % browser_name)<br> 24         DRIVER &#x3D; webdriver.Chrome(CHROME_DRIVER)<br> 25<br> 26<br> 27 # 访问指定url<br> 28 def visit(url):<br> 29     global DRIVER<br> 30     DRIVER.get(url)<br> 31<br> 32<br> 33 # 输入操作<br> 34 def input(locate_method, locate_exp, value):<br> 35     global DRIVER<br> 36     # 方式1：直接传定位方式和定位表达式<br> 37     if locate_method in [“id”, “xpath”, “classname”, “name”, “tagname”, “linktext”,<br> 38                              “partial link text”, “css selector”]:<br> 39         find_element(DRIVER, locate_method, locate_exp).send_keys(value)<br> 40     # 方式2：通过ini文件的key找到value，再分割定位方式和定位表达式<br> 41     else:<br> 42         parser &#x3D; IniParser(ELEMENT_FILE_PATH)<br> 43         locate_method, locate_exp &#x3D; tuple(parser.get_value(locate_method, locate_exp).split(“&gt;”))<br> 44         find_element(DRIVER, locate_method, locate_exp).send_keys(value)<br> 45<br> 46<br> 47 # 点击操作<br> 48 def click(locate_method, locate_exp):<br> 49     global DRIVER<br> 50     # 方式1：直接传定位方式和定位表达式<br> 51     if locate_method in [“id”, “xpath”, “classname”, “name”, “tagname”, “linktext”,<br> 52                              “partial link text”, “css selector”]:<br> 53         find_element(DRIVER, locate_method, locate_exp).click()<br> 54     # 方式2：通过ini文件的key找到value，再分割定位方式和定位表达式<br> 55     else:<br> 56         parser &#x3D; IniParser(ELEMENT_FILE_PATH)<br> 57         locate_method, locate_exp &#x3D; tuple(parser.get_value(locate_method, locate_exp).split(“&gt;”))<br> 58         find_element(DRIVER, locate_method, locate_exp).click()<br> 59<br> 60<br> 61 # 清空输入框操作<br> 62 def clear(locate_method, locate_exp):<br> 63     global DRIVER<br> 64     # 方式1：直接传定位方式和定位表达式<br> 65     if locate_method in [“id”, “xpath”, “classname”, “name”, “tagname”, “linktext”,<br> 66                              “partial link text”, “css selector”]:<br> 67         find_element(DRIVER, locate_method, locate_exp).clear()<br> 68     # 方式2：通过ini文件的key找到value，再分割定位方式和定位表达式<br> 69     else:<br> 70         parser &#x3D; IniParser(ELEMENT_FILE_PATH)<br> 71         locate_method, locate_exp &#x3D; tuple(parser.get_value(locate_method, locate_exp).split(“&gt;”))<br> 72         find_element(DRIVER, locate_method, locate_exp).clear()<br> 73<br> 74<br> 75 # 切换frame<br> 76 def switch_frame(locate_method, locate_exp):<br> 77     global DRIVER<br> 78     # 方式1：直接传定位方式和定位表达式<br> 79     if locate_method in [“id”, “xpath”, “classname”, “name”, “tagname”, “linktext”,<br> 80                              “partial link text”, “css selector”]:<br> 81         DRIVER.switch_to.frame(find_element(DRIVER, locate_method, locate_exp))<br> 82     # 方式2：通过ini文件的key找到value，再分割定位方式和定位表达式<br> 83     else:<br> 84         parser &#x3D; IniParser(ELEMENT_FILE_PATH)<br> 85         locate_method, locate_exp &#x3D; tuple(parser.get_value(locate_method, locate_exp).split(“&gt;”))<br> 86         DRIVER.switch_to.frame(find_element(DRIVER, locate_method, locate_exp))<br> 87<br> 88<br> 89 # 切换主frame<br> 90 def switch_home_frame():<br> 91     global DRIVER<br> 92     DRIVER.switch_to.default_content()<br> 93<br> 94<br> 95 # 断言<br> 96 def assert_word(keyword):<br> 97     global DRIVER<br> 98     assert keyword in DRIVER.page_source<br> 99<br>100<br>101 # 休眠<br>102 def sleep(times):<br>103     time.sleep(int(times))<br>104<br>105<br>106 # 关闭浏览器<br>107 def quit():<br>108     global DRIVER<br>109     DRIVER.quit()<br>110<br>111<br>112 # 截图函数<br>113 def take_screenshot():<br>114     global DRIVER<br>115     # 创建当前日期目录<br>116     dir &#x3D; os.path.join(SCREENSHOT_PATH, get_chinese_date())<br>117     if not os.path.exists(dir):<br>118         os.makedirs(dir)<br>119     # 以当前时间为文件名<br>120     file_name &#x3D; get_chinese_time()<br>121     file_path &#x3D; os.path.join(dir, file_name+”.png”)<br>122     try:<br>123         DRIVER.get_screenshot_as_file(file_path)<br>124         # 返回截图文件的绝对路径<br>125         return file_path<br>126     except:<br>127         error(“截图发生异常【{}】\n{}”.format(file_path, traceback.format_exc()))<br>128         return file_path<br>129<br>130<br>131 if <strong>name</strong> &#x3D;&#x3D; “<strong>main</strong>“:<br>132     init_browser(“chrome”)<br>133     visit(“<a href="http://mail.126.com&quot;/">http://mail.126.com&quot;</a>)<br>134     print(take_screenshot())</p><p>business_process 包<br>business_process 包是框架第三层“测试用例逻辑层”，该层主要是将服务层封装好的各个业务对象，组织成测试逻辑，进行校验。</p><p>case_process.py<br>测试用例文件的一行数据，拼接其中的操作动作、操作对象、操作值等关键字，形成与 page_action.py 中的函数相对应的字符串，并通过 eval() 转成表达式以执行用例。<br>记录该用例的测试结果，如测试执行结果、测试执行时间等。<br>如需数据驱动的用例集，则获取数据驱动的数据源集合，循环将每组数据传递给用例步骤。<br>如果遇到需要参数化的值 ${变量名}，则根据数据驱动的数据源，根据变量名进行参数化。</p><p> 1 import traceback<br> 2 import re<br> 3 from util.global_var import *<br> 4 from util.log_util import *<br> 5 from util.datetime_util import *<br> 6 from util.excel_util import Excel<br> 7 from action.page_action import *<br> 8<br> 9<br>10 # 执行一条测试用例（即一行测试数据）<br>11 def execute_case(excel_file_path, case_data, test_data_source&#x3D;None):<br>12     # 用例数据格式校验<br>13     if not isinstance(case_data, (list, tuple)):<br>14         error(“测试用例数据格式有误！测试数据应为列表或元组类型！【%s】” % case_data)<br>15         case_data[TEST_SCRIPT_EXCEPTION_INFO_COL] &#x3D; “测试用例数据格式有误！应为列表或元组类型！【%s】” % case_data<br>16         case_data[TEST_SCRIPT_TEST_RESULT_COL] &#x3D; “Fail”<br>17     # 该用例无需执行<br>18     if case_data[TEST_SCRIPT_IS_EXECUTE_COL].lower() &#x3D;&#x3D; “n”:<br>19         info(“测试用例步骤【%s】无需执行” % case_data[TEST_SCRIPT_NAME_COL])<br>20         return<br>21     # excel对象初始化<br>22     if isinstance(excel_file_path, Excel):<br>23         excel &#x3D; excel_file_path  # 如果传入的是excel对象，则直接使用<br>24     else:<br>25         excel &#x3D; Excel(excel_file_path)  # 如果传入的是文件路径，则初始化excel对象<br>26     # 获取各关键字<br>27     operation_action &#x3D; case_data[TEST_SCRIPT_ACTION_COL]  # 操作动作（即函数名）<br>28     locate_method &#x3D; case_data[TEST_SCRIPT_LOCATE_METHOD_COL]  # 定位方式<br>29     locate_expression &#x3D; case_data[TEST_SCRIPT_LOCATE_EXPRESSION_COL]  # 定位表达式<br>30     operation_value &#x3D; case_data[TEST_SCRIPT_VALUE_COL]  # 操作值<br>31     # 由于数据驱动，需要进行参数化的值<br>32     if test_data_source:<br>33         if re.search(r”${\w+}“, str(operation_value)):<br>34             # 取出需要参数化的值<br>35             key &#x3D; re.search(r”${(\w+)}“, str(operation_value)).group(1)<br>36             operation_value &#x3D; re.sub(r”${\w+}“, str(test_data_source[key]), str(operation_value))<br>37             # 将参数化后的值回写excel测试结果中，便于回溯<br>38             case_data[TEST_SCRIPT_VALUE_COL] &#x3D; operation_value<br>39     # 拼接关键字函数<br>40     if locate_method and locate_expression:<br>41         if operation_value:<br>42             func &#x3D; “%s(‘%s’, ‘%s’, ‘%s’)” % (operation_action, locate_method, locate_expression, operation_value)<br>43         else:<br>44             func &#x3D; “%s(‘%s’, ‘%s’)” % (operation_action, locate_method, locate_expression)<br>45     else:<br>46         if operation_value:<br>47             func &#x3D; “%s(‘%s’)” % (operation_action, operation_value)<br>48         else:<br>49             func &#x3D; “%s()” % operation_action<br>50     # 执行用例<br>51     try:<br>52         eval(func)<br>53         info(“测试用例步骤执行成功：【{}】 {}”.format(case_data[TEST_SCRIPT_NAME_COL], func))<br>54         case_data[TEST_SCRIPT_TEST_RESULT_COL] &#x3D; “Pass”<br>55     except:<br>56         info(“测试用例步骤执行失败：【{}】 {}”.format(case_data[TEST_SCRIPT_NAME_COL], func))<br>57         case_data[TEST_SCRIPT_TEST_RESULT_COL] &#x3D; “Fail”<br>58         error(traceback.format_exc())<br>59         # 进行截图<br>60         case_data[TEST_SCRIPT_SCREENSHOT_PATH_COL] &#x3D; take_screenshot()<br>61         # 异常信息记录<br>62         case_data[TEST_SCRIPT_EXCEPTION_INFO_COL] &#x3D; traceback.format_exc()<br>63     # 测试时间记录<br>64     case_data[TEST_SCRIPT_TEST_TIME_COL] &#x3D; get_english_datetime()<br>65     return case_data<br>66<br>67<br>68 if <strong>name</strong> &#x3D;&#x3D; “<strong>main</strong>“:<br>69     excel &#x3D; Excel(TEST_DATA_FILE_PATH)<br>70     excel.get_sheet(“登录（调试用）”)<br>71     all_data &#x3D; excel.get_all_row_data()<br>72     for data in all_data[1:]:<br>73         execute_case(excel, data)</p><p>data_source_process.py<br>本模块实现了获取数据驱动所需的数据源集合。</p><p>根据数据源 sheet 名，获取该 sheet 所有行数据，每行数据作为一组测试数据。<br>每行数据作为一个字典，存储在一个列表中。如 [{“登录用户名”: “xxx”, “登录密码”: “xxx”, …}, {…}, …]</p><p> 1 from util.excel_util import Excel<br> 2 from util.global_var import *<br> 3 from util.log_util import *<br> 4<br> 5<br> 6 # 数据驱动<br> 7 # 每行数据作为一个字典，存储在一个列表中。如[{“登录用户名”: “xxx”, “登录密码”: “xxx”, …}, {…}, …]<br> 8 def get_test_data(excel_file_path, sheet_name):<br> 9     # excel对象初始化<br>10     if isinstance(excel_file_path, Excel):<br>11         excel &#x3D; excel_file_path<br>12     else:<br>13         excel &#x3D; Excel(excel_file_path)<br>14     # 校验sheet名<br>15     if not excel.get_sheet(sheet_name):<br>16         error(“sheet【】不存在，停止执行！” % sheet_name)<br>17         return<br>18     result_list &#x3D; []<br>19     all_row_data &#x3D; excel.get_all_row_data()<br>20     if len(all_row_data) &lt;&#x3D; 1:<br>21         error(“sheet【】数据不大于1行，停止执行！” % sheet_name)<br>22         return<br>23     # 将参数化的测试数据存入全局字典<br>24     head_line_data &#x3D; all_row_data[0]<br>25     for data in all_row_data[1:]:<br>26         if data[-1].lower() &#x3D;&#x3D; “n”:<br>27             continue<br>28         row_dict &#x3D; {}<br>29         # 最后一列为“是否执行”列，无需取值<br>30         for i in range(len(data[:-1])):<br>31             row_dict[head_line_data[i]] &#x3D; data[i]<br>32         result_list.append(row_dict)<br>33     return result_list<br>34<br>35<br>36 if <strong>name</strong> &#x3D;&#x3D; “<strong>main</strong>“:<br>37     from util.global_var import *<br>38     print(get_test_data(TEST_DATA_FILE_PATH, “搜索词”))<br>39     # [{‘搜索词’: ‘python’, ‘断言词’: ‘python’}, {‘搜索词’: ‘mysql’, ‘断言词’: ‘mysql5.6’}]</p><p>main_process.py<br>本模块基于 case_process.py 和 data_source_process.py，实现关键字驱动+数据驱动的测试用例集的执行。</p><p>suite_process()：执行具体的测试用例步骤 sheet（如“登录”sheet、“添加联系人”sheet 等）<br>main_suite_process()：执行“测试用例”主 sheet 的用例集。每行用例集对应一个用例步骤 sheet 和数据源 sheet。</p><p>  1 from util.excel_util import *<br>  2 from util.datetime_util import *<br>  3 from util.log_util import *<br>  4 from util.global_var import *<br>  5 from business_process.case_process import execute_case<br>  6 from business_process.data_source_process import get_test_data<br>  7<br>  8<br>  9 # 执行具体模块的用例sheet（登录sheet，添加联系人sheet等）<br> 10 def suite_process(excel_file_path, sheet_name, test_data_source&#x3D;None):<br> 11     “””<br> 12     :param excel_file_path: excel文件绝对路径或excel对象<br> 13     :param sheet_name: 测试步骤sheet名<br> 14     :param test_data_source: 数据驱动的数据源，默认没有<br> 15     :return:<br> 16     “””<br> 17     # 记录测试结果统计<br> 18     global TOTAL_CASE<br> 19     global PASS_CASE<br> 20     global FAIL_CASE<br> 21     # 整个用例sheet的测试结果，默认为全部通过<br> 22     suite_test_result &#x3D; True<br> 23     # excel对象初始化<br> 24     if isinstance(excel_file_path, Excel):<br> 25         excel &#x3D; excel_file_path<br> 26     else:<br> 27         excel &#x3D; Excel(excel_file_path)<br> 28     if not excel.get_sheet(sheet_name):<br> 29         error(“sheet【%s】不存在，停止执行！” % sheet_name)<br> 30         return<br> 31     # 获取测试用例集sheet的全部行数据<br> 32     all_row_data &#x3D; excel.get_all_row_data()<br> 33     if len(all_row_data) &lt;&#x3D; 1:<br> 34         error(“sheet【%s】数据不大于1行，停止执行！” % sheet_name)<br> 35         return<br> 36     # 标题行数据<br> 37     head_line_data &#x3D; all_row_data[0]<br> 38     # 切换到测试结果明细sheet，准备写入测试结果<br> 39     if not excel.get_sheet(“测试结果明细”):<br> 40         error(“【测试结果明细】sheet不存在，停止执行！”)<br> 41         return<br> 42     excel.write_row_data(head_line_data, None, True, “green”)<br> 43     # 执行每行的测试用例<br> 44     for row_data in all_row_data[1:]:<br> 45         result_data &#x3D; execute_case(excel, row_data, test_data_source)<br> 46         # 无需执行的测试步骤，跳过<br> 47         if result_data is None:<br> 48             continue<br> 49         TOTAL_CASE +&#x3D; 1<br> 50         if result_data[TEST_SCRIPT_TEST_RESULT_COL].lower() &#x3D;&#x3D; “fail”:<br> 51             suite_test_result &#x3D; False<br> 52             FAIL_CASE +&#x3D; 1<br> 53         else:<br> 54             PASS_CASE +&#x3D; 1<br> 55         excel.write_row_data(result_data)<br> 56     # 切换到测试结果统计sheet，写入统计数据<br> 57     if not excel.get_sheet(“测试结果统计”):<br> 58         error(“【测试结果统计】sheet不存在，停止执行！”)<br> 59         return<br> 60     excel.insert_row_data(1, [TOTAL_CASE, PASS_CASE, FAIL_CASE])<br> 61     return excel, suite_test_result<br> 62<br> 63<br> 64 # 执行【测试用例集】主sheet的用例集<br> 65 def main_suite_process(excel_file_path, sheet_name):<br> 66     # 初始化excel对象<br> 67     excel &#x3D; Excel(excel_file_path)<br> 68     if not excel:<br> 69         error(“excel数据文件【%s】不存在！” % excel_file_path)<br> 70         return<br> 71     if not excel.get_sheet(sheet_name):<br> 72         error(“sheet名称【%s】不存在！” % sheet_name)<br> 73         return<br> 74     # 获取所有行数据<br> 75     all_row_datas &#x3D; excel.get_all_row_data()<br> 76     if len(all_row_datas) &lt;&#x3D; 1:<br> 77         error(“sheet【%s】数据不大于1行，停止执行！” % sheet_name)<br> 78         return<br> 79     # 标题行数据<br> 80     head_line_data &#x3D; all_row_datas[0]<br> 81     for row_data in all_row_datas[1:]:<br> 82         # 校验用例步骤sheet名是否存在<br> 83         if row_data[MAIN_CASE_SCRIPT_SHEET_COL] not in excel.get_all_sheet():<br> 84             error(“#” * 50 + “ 用例步骤集【%s】不存在！ “ % row_data[MAIN_CASE_SCRIPT_SHEET_COL] + “#” * 50 + “\n”)<br> 85             row_data[MAIN_CASE_TEST_RESULT_COL] &#x3D; “Fail”<br> 86             excel.write_row_data(head_line_data, None, True, “red”)<br> 87             excel.write_row_data(row_data)<br> 88             continue<br> 89         # 跳过不需要执行的测试用例集<br> 90         if row_data[MAIN_CASE_IS_EXECUTE_COL].lower() &#x3D;&#x3D; “n”:<br> 91             info(“#” * 50 + “ 测试用例集【%s】无需执行！” % row_data[MAIN_CASE_CASE_NAME_COL] + “#” * 50 + “\n”)<br> 92             continue<br> 93         # 记录本用例集的测试时间<br> 94         row_data[MAIN_CASE_TEST_TIME_COL] &#x3D; get_english_datetime()<br> 95         # 判断本测试用例集是否进行数据驱动<br> 96         if row_data[MAIN_CASE_DATA_SOURCE_SHEET_COL]:<br> 97             # 校验测试数据集sheet名是否存在<br> 98             if row_data[MAIN_CASE_DATA_SOURCE_SHEET_COL] not in excel.get_all_sheet():<br> 99                 error(“#” * 50 + “ 测试数据集【%s】不存在！ “ % row_data[MAIN_CASE_DATA_SOURCE_SHEET_COL] + “#” * 50 + “\n”)<br>100                 row_data[MAIN_CASE_TEST_RESULT_COL] &#x3D; “Fail”<br>101                 excel.write_row_data(head_line_data, None, True, “red”)<br>102                 excel.write_row_data(row_data)<br>103                 continue<br>104             # 获取测试数据集<br>105             test_data_source &#x3D; get_test_data(excel, row_data[MAIN_CASE_DATA_SOURCE_SHEET_COL])<br>106             # 每条数据进行一次本用例集的测试<br>107             for data_source in test_data_source:<br>108                 info(“-“ * 50 + “ 测试用例集【%s】开始执行！” % row_data[MAIN_CASE_CASE_NAME_COL] + “-“ * 50)<br>109                 excel, test_result_flag &#x3D; suite_process(excel, row_data[MAIN_CASE_SCRIPT_SHEET_COL], data_source)<br>110                 # 记录本用例集的测试结果<br>111                 if test_result_flag:<br>112                     info(“#” * 50 + “ 测试用例集【%s】执行成功！ “ % row_data[MAIN_CASE_CASE_NAME_COL] + “#” * 50 + “\n”)<br>113                     row_data[MAIN_CASE_TEST_RESULT_COL] &#x3D; “Pass”<br>114                 else:<br>115                     error(“#” * 50 + “ 测试用例集【%s】执行失败！ “ % row_data[MAIN_CASE_CASE_NAME_COL] + “#” * 50 + “\n”)<br>116                     row_data[MAIN_CASE_TEST_RESULT_COL] &#x3D; “Fail”<br>117                 # 全部测试步骤结果写入后，最后写入本用例集的标题行和测试结果行数据<br>118                 # 切换到“测试结果明细”sheet，以写入测试执行结果<br>119                 excel.get_sheet(“测试结果明细”)<br>120                 excel.write_row_data(head_line_data, None, True, “red”)<br>121                 excel.write_row_data(row_data)<br>122         # 本用例集无需数据驱动<br>123         else:<br>124             info(“-“ * 50 + “ 测试用例集【%s】开始执行！” % row_data[MAIN_CASE_CASE_NAME_COL] + “-“ * 50)<br>125             excel, test_result_flag &#x3D; suite_process(excel, row_data[MAIN_CASE_SCRIPT_SHEET_COL])<br>126             # 记录本用例集的测试结果<br>127             if test_result_flag:<br>128                 info(“#” * 50 + “ 测试用例集【%s】执行成功！ “ % row_data[MAIN_CASE_SCRIPT_SHEET_COL] + “#” * 50 + “\n”)<br>129                 row_data[MAIN_CASE_TEST_RESULT_COL] &#x3D; “Pass”<br>130             else:<br>131                 error(“#” * 50 + “ 测试用例集【%s】执行失败！ “ % row_data[MAIN_CASE_SCRIPT_SHEET_COL] + “#” * 50 + “\n”)<br>132                 row_data[MAIN_CASE_TEST_RESULT_COL] &#x3D; “Fail”<br>133             # 全部测试步骤结果写入后，最后写入本用例集的标题行和测试结果行数据<br>134             # 切换到“测试结果明细”sheet，以写入测试执行结果<br>135             excel.get_sheet(“测试结果明细”)<br>136             excel.write_row_data(head_line_data, None, True, “red”)<br>137             excel.write_row_data(row_data)<br>138     return excel<br>139<br>140<br>141 if <strong>name</strong> &#x3D;&#x3D; “<strong>main</strong>“:<br>142     from util.report_util import create_excel_report_and_send_email<br>143     # excel, _ &#x3D; suite_process(TEST_DATA_FILE_PATH_1, “登录1”)<br>144     excel &#x3D; main_suite_process(TEST_DATA_FILE_PATH, “测试用例集”)<br>145     create_excel_report_and_send_email(excel, “<a href="mailto:&#x31;&#x38;&#x32;&#50;&#x33;&#x30;&#x31;&#x32;&#52;&#64;&#113;&#113;&#x2e;&#x63;&#111;&#x6d;">&#x31;&#x38;&#x32;&#50;&#x33;&#x30;&#x31;&#x32;&#52;&#64;&#113;&#113;&#x2e;&#x63;&#111;&#x6d;</a>“, “UI自动化测试”, “请查收附件：UI自动化测试报告”)</p><p>util 包<br>util 包属于第一层的测试工具层：用于实现测试过程中调用的工具类方法，例如读取配置文件、页面元素的操作方法、操作 Excel 文件、生成测试报告、发送邮件等。</p><p>global_var.py<br>本模块用于定义测试过程中所需的全局变量。</p><p> 1 import os<br> 2<br> 3<br> 4 # 工程根路径<br> 5 PROJECT_ROOT_PATH &#x3D; os.path.dirname(os.path.dirname(os.path.abspath(<strong>file</strong>)))<br> 6<br> 7 # 元素定位方法的ini配置文件路径<br> 8 ELEMENT_FILE_PATH &#x3D; os.path.join(PROJECT_ROOT_PATH, “conf”, “ElementsRepository.ini”)<br> 9<br>10 # excel文件路径<br>11 TEST_DATA_FILE_PATH &#x3D; os.path.join(PROJECT_ROOT_PATH, “test_data”, “test_case.xlsx”)<br>12<br>13 # 驱动路径<br>14 CHROME_DRIVER &#x3D; “E:\auto_test_driver\chromedriver.exe”<br>15 IE_DRIVER &#x3D; “E:\auto_test_driver\IEDriverServer.exe”<br>16 FIREFOX_DRIVER &#x3D; “E:\auto_test_driver\geckodriver.exe”<br>17<br>18 # 截图路径<br>19 SCREENSHOT_PATH &#x3D; os.path.join(PROJECT_ROOT_PATH, “exception_pic”)<br>20<br>21 # 日志配置文件路径<br>22 LOG_CONF_FILE_PATH &#x3D; os.path.join(PROJECT_ROOT_PATH, “conf”, “Logger.conf”)<br>23<br>24 # 测试报告存放路径<br>25 TEST_REPORT_FILE_DIR &#x3D; os.path.join(PROJECT_ROOT_PATH, “test_report”)<br>26<br>27 # 对应excel测试数据文件中具体模块sheet中的列号<br>28 TEST_SCRIPT_NAME_COL &#x3D; 1<br>29 TEST_SCRIPT_ACTION_COL &#x3D; 2<br>30 TEST_SCRIPT_LOCATE_METHOD_COL &#x3D; 3<br>31 TEST_SCRIPT_LOCATE_EXPRESSION_COL &#x3D; 4<br>32 TEST_SCRIPT_VALUE_COL &#x3D; 5<br>33 TEST_SCRIPT_IS_EXECUTE_COL &#x3D; 6<br>34 TEST_SCRIPT_TEST_TIME_COL &#x3D; 7<br>35 TEST_SCRIPT_TEST_RESULT_COL &#x3D; 8<br>36 TEST_SCRIPT_EXCEPTION_INFO_COL &#x3D; 9<br>37 TEST_SCRIPT_SCREENSHOT_PATH_COL &#x3D; 10<br>38<br>39 # 对应excel测试数据文件中“测试用例集”sheet列号<br>40 MAIN_CASE_CASE_NAME_COL &#x3D; 3<br>41 MAIN_CASE_BROWSER_NAME_COL &#x3D; 5<br>42 MAIN_CASE_SCRIPT_SHEET_COL &#x3D; 6<br>43 MAIN_CASE_DATA_SOURCE_SHEET_COL &#x3D; 7<br>44 MAIN_CASE_IS_EXECUTE_COL &#x3D; 8<br>45 MAIN_CASE_TEST_TIME_COL &#x3D; 9<br>46 MAIN_CASE_TEST_RESULT_COL &#x3D; 10<br>47<br>48 # 测试结果统计<br>49 TOTAL_CASE &#x3D; 0<br>50 PASS_CASE &#x3D; 0<br>51 FAIL_CASE &#x3D; 0<br>52<br>53<br>54 if <strong>name</strong> &#x3D;&#x3D; “<strong>main</strong>“:<br>55     print(PROJECT_ROOT_PATH)</p><p>find_element_util.py<br>本模块封装了基于显式等待的界面元素定位方法。</p><p> 1 from selenium.webdriver.support.ui import WebDriverWait<br> 2<br> 3<br> 4 # 显式等待一个元素<br> 5 def find_element(driver, locate_method, locate_exp):<br> 6     # 显式等待对象（最多等10秒，每0.2秒判断一次等待的条件）<br> 7     return WebDriverWait(driver, 10, 0.2).until(lambda x: x.find_element(locate_method, locate_exp))<br> 8<br> 9 # 显式等待一组元素<br>10 def find_elements(driver, locate_method, locate_exp):<br>11     # 显式等待对象（最多等10秒，每0.2秒判断一次等待的条件）<br>12     return WebDriverWait(driver, 10, 0.2).until(lambda x: x.find_elements(locate_method, locate_exp))</p><p>excel_util.py<br>本模块封装了对 excel 的读写操作（openpyxl 版本：3.0.4）。</p><p>  1 import os<br>  2 from openpyxl import load_workbook<br>  3 from openpyxl.styles import PatternFill, Font, Side, Border<br>  4 from util.datetime_util import *<br>  5 from util.global_var import *<br>  6 from util.log_util import *<br>  7<br>  8<br>  9 # 支持excel读写操作的工具类<br> 10 class Excel:<br> 11<br> 12     # 初始化读取excel文件<br> 13     def <strong>init</strong>(self, file_path):<br> 14         if not os.path.exists(file_path):<br> 15             return<br> 16         self.wb &#x3D; load_workbook(file_path)<br> 17         # 初始化默认sheet<br> 18         self.ws &#x3D; self.wb.active<br> 19         self.data_file_path &#x3D; file_path<br> 20         # 初始化颜色字典，供设置样式用<br> 21         self.color_dict &#x3D; {“red”: “FFFF3030”, “green”: “FF008B00”}<br> 22<br> 23     def get_all_sheet(self):<br> 24         return self.wb.get_sheet_names()<br> 25<br> 26     # 打开指定sheet<br> 27     def get_sheet(self, sheet_name):<br> 28         if sheet_name not in self.get_all_sheet():<br> 29             error(“sheet名称【%s】不存在！” % sheet_name)<br> 30             return<br> 31         self.ws &#x3D; self.wb.get_sheet_by_name(sheet_name)<br> 32         return True<br> 33<br> 34     # 获取最大行号<br> 35     def get_max_row_no(self):<br> 36         # openpyxl的API的行、列索引默认都从1开始<br> 37         return self.ws.max_row<br> 38<br> 39     # 获取最大列号<br> 40     def get_max_col_no(self):<br> 41         return self.ws.max_column<br> 42<br> 43     # 获取所有行数据<br> 44     def get_all_row_data(self, head_line&#x3D;True):<br> 45         # 是否需要标题行数据的标识，默认需要<br> 46         if head_line:<br> 47             min_row &#x3D; 1  # 行号从1开始，即1为标题行<br> 48         else:<br> 49             min_row &#x3D; 2<br> 50         result &#x3D; []<br> 51         # min_row&#x3D;None：默认获取标题行数据<br> 52         for row in self.ws.iter_rows(min_row&#x3D;min_row, max_row&#x3D;self.get_max_row_no(), max_col&#x3D;self.get_max_col_no()):<br> 53             result.append([cell.value for cell in row])<br> 54         return result<br> 55<br> 56     # 获取指定行数据<br> 57     def get_row_data(self, row_num):<br> 58         # 0 为标题行<br> 59         return [cell.value for cell in self.ws[row_num+1]]<br> 60<br> 61     # 获取指定列数据<br> 62     def get_col_data(self, col_num):<br> 63         # 索引从0开始<br> 64         return [cell.value for cell in tuple(self.ws.columns)[col_num]]<br> 65<br> 66     # 追加行数据且可以设置样式<br> 67     def write_row_data(self, data, font_color&#x3D;None, border&#x3D;True, fill_color&#x3D;None):<br> 68         if not isinstance(data, (list, tuple)):<br> 69             print(“写入数据失败：数据不为列表或元组类型！【%s】” % data)<br> 70         self.ws.append(data)<br> 71         # 设置字体颜色<br> 72         if font_color:<br> 73             if font_color.lower() in self.color_dict.keys():<br> 74                 font_color &#x3D; self.color_dict[font_color]<br> 75         # 设置单元格填充颜色<br> 76         if fill_color:<br> 77             if fill_color.lower() in self.color_dict.keys():<br> 78                 fill_color &#x3D; self.color_dict[fill_color]<br> 79         # 设置单元格边框<br> 80         if border:<br> 81             bd &#x3D; Side(style&#x3D;”thin”, color&#x3D;”000000”)<br> 82         # 记录数据长度（否则会默认与之前行最长数据行的长度相同，导致样式超过了该行实际长度）<br> 83         count &#x3D; 0<br> 84         for cell in self.ws[self.get_max_row_no()]:<br> 85             # 设置完该行的实际数据长度样式后，则退出<br> 86             if count &gt; len(data) - 1:<br> 87                 break<br> 88             if font_color:<br> 89                 cell.font &#x3D; Font(color&#x3D;font_color)<br> 90             # 如果没有设置字体颜色，则默认给执行结果添加字体颜色<br> 91             else:<br> 92                 if cell.value is not None and isinstance(cell.value, str):<br> 93                     if cell.value.lower() &#x3D;&#x3D; “pass” or cell.value &#x3D;&#x3D; “成功”:<br> 94                         cell.font &#x3D; Font(color&#x3D;self.color_dict[“green”])<br> 95                     elif cell.value.lower() &#x3D;&#x3D; “fail” or cell.value &#x3D;&#x3D; “失败”:<br> 96                         cell.font &#x3D; Font(color&#x3D;self.color_dict[“red”])<br> 97             if border:<br> 98                 cell.border &#x3D; Border(left&#x3D;bd, right&#x3D;bd, top&#x3D;bd, bottom&#x3D;bd)<br> 99             if fill_color:<br>100                 cell.fill &#x3D; PatternFill(fill_type&#x3D;”solid”, fgColor&#x3D;fill_color)<br>101             count +&#x3D; 1<br>102<br>103     # 指定行插入数据（行索引从0开始）<br>104     def insert_row_data(self, row_no, data, font_color&#x3D;None, border&#x3D;True, fill_color&#x3D;None):<br>105         if not isinstance(data, (list, tuple)):<br>106             print(“写入数据失败：数据不为列表或元组类型！【%s】” % data)<br>107         for idx, cell in enumerate(self.ws[row_no+1]):  # 此处行索引从1开始<br>108             cell.value &#x3D; data[idx]<br>109<br>110     # 生成写入了测试结果的excel数据文件<br>111     def save(self, save_file_name, timestamp):<br>112         save_dir &#x3D; os.path.join(TEST_REPORT_FILE_DIR, get_chinese_date())<br>113         if not os.path.exists(save_dir):<br>114             os.mkdir(save_dir)<br>115         save_file &#x3D; os.path.join(save_dir, save_file_name + “_” + timestamp + “.xlsx”)<br>116         self.wb.save(save_file)<br>117         info(“生成测试结果文件：%s” % save_file)<br>118         return save_file<br>119<br>120<br>121 if <strong>name</strong> &#x3D;&#x3D; “<strong>main</strong>“:<br>122     from util.global_var import *<br>123     from util.datetime_util import *<br>124     excel &#x3D; Excel(TEST_DATA_FILE_PATH)<br>125     excel.get_sheet(“测试结果统计”)<br>126     # print(excel.get_all_row_data())<br>127     # print(excel.get_row_data(1))<br>128     # print(excel.get_col_data(1))<br>129     # excel.write_row_data([“4”, None, “嘻哈”], “green”, True, “red”)<br>130     excel.insert_row_data(1, [1,2,3])<br>131     excel.save(get_timestamp())</p><p>ini_reader.py<br>本模块封装了对 ini 配置文件的读取操作。</p><p> 1 import configparser<br> 2<br> 3<br> 4 class IniParser:<br> 5<br> 6     # 初始化打开指定ini文件并指定编码<br> 7     def <strong>init</strong>(self, file_path):<br> 8         self.cf &#x3D; configparser.ConfigParser()<br> 9         self.cf.read(file_path, encoding&#x3D;”utf-8”)<br>10<br>11     # 获取所有分组名称<br>12     def get_sections(self):<br>13         return self.cf.sections()<br>14<br>15     # 获取指定分组的所有键<br>16     def get_options(self, section):<br>17         return self.cf.options(section)<br>18<br>19     # 获取指定分组的键值对<br>20     def get_items(self, section):<br>21         return self.cf.items(section)<br>22<br>23     # 获取指定分组的指定键的值<br>24     def get_value(self, section, key):<br>25         return self.cf.get(section, key)<br>26<br>27<br>28 if <strong>name</strong> &#x3D;&#x3D; “<strong>main</strong>“:<br>29     from conf.global_var import *<br>30     parser &#x3D; IniParser(ELEMENT_FILE_PATH)<br>31     print(parser.get_sections())<br>32     print(parser.get_options(“126mail_indexPage”))<br>33     print(parser.get_value(“126mail_indexPage”, ‘indexpage.frame’))</p><p>email_util.py<br>本模块封装了邮件发送功能。（示例代码中的用户名&#x2F;密码已隐藏）</p><p> 1 import yagmail<br> 2 import traceback<br> 3 from util.log_util import *<br> 4<br> 5<br> 6 def send_mail(attachments_report_name, receiver, subject, content):<br> 7     try:<br> 8         # 连接邮箱服务器<br> 9         # 注意：若使用QQ邮箱，则password为授权码而非邮箱密码；使用其它邮箱则为邮箱密码<br>10         # encoding设置为GBK，否则中文附件名会乱码<br>11         yag &#x3D; yagmail.SMTP(user&#x3D;”<strong><strong><strong>@163.com”, password&#x3D;”</strong></strong></strong>“, host&#x3D;”smtp.163.com”, encoding&#x3D;’GBK’)<br>12<br>13         # 收件人、标题、正文、附件（若多个收件人或多个附件，则可使用列表）<br>14         yag.send(to&#x3D;receiver, subject&#x3D;subject, contents&#x3D;content, attachments&#x3D;attachments_report_name)<br>15<br>16         # 可简写：yag.send(“****@163.com”, subject, contents, report)<br>17<br>18         info(“测试报告邮件发送成功!【邮件标题：%s】【邮件附件：%s】【收件人：%s】” % (subject, attachments_report_name, receiver))<br>19     except:<br>20         error(“测试报告邮件发送失败!【邮件标题：%s】【邮件附件：%s】【收件人：%s】” % (subject, attachments_report_name, receiver))<br>21         error(traceback.format_exc())<br>22<br>23<br>24 if <strong>name</strong> &#x3D;&#x3D; “<strong>main</strong>“:<br>25    send_mail(“e:\code.txt”, “<a href="mailto:&#49;&#56;&#x32;&#50;&#51;&#48;&#x31;&#x32;&#x34;&#64;&#x71;&#113;&#x2e;&#99;&#111;&#x6d;">&#49;&#56;&#x32;&#50;&#51;&#48;&#x31;&#x32;&#x34;&#64;&#x71;&#113;&#x2e;&#99;&#111;&#x6d;</a>“, “测试邮件”, “正文”)</p><p>datetime_util.py<br>该模块实现了获取各种格式的当前日期时间。</p><p> 1 import time<br> 2<br> 3<br> 4 # 返回中文格式的日期：xxxx年xx月xx日<br> 5 def get_chinese_date():<br> 6     year &#x3D; time.localtime().tm_year<br> 7     if len(str(year)) &#x3D;&#x3D; 1:<br> 8         year &#x3D; “0” + str(year)<br> 9     month &#x3D; time.localtime().tm_mon<br>10     if len(str(month)) &#x3D;&#x3D; 1:<br>11         month &#x3D; “0” + str(month)<br>12     day &#x3D; time.localtime().tm_mday<br>13     if len(str(day)) &#x3D;&#x3D; 1:<br>14         day &#x3D; “0” + str(day)<br>15     return “{}年{}月{}日”.format(year, month, day)<br>16<br>17<br>18 # 返回英文格式的日期：xxxx&#x2F;xx&#x2F;xx<br>19 def get_english_date():<br>20     year &#x3D; time.localtime().tm_year<br>21     if len(str(year)) &#x3D;&#x3D; 1:<br>22         year &#x3D; “0” + str(year)<br>23     month &#x3D; time.localtime().tm_mon<br>24     if len(str(month)) &#x3D;&#x3D; 1:<br>25         month &#x3D; “0” + str(month)<br>26     day &#x3D; time.localtime().tm_mday<br>27     if len(str(day)) &#x3D;&#x3D; 1:<br>28         day &#x3D; “0” + str(day)<br>29     return “{}&#x2F;{}&#x2F;{}”.format(year, month, day)<br>30<br>31<br>32 # 返回中文格式的时间：xx时xx分xx秒<br>33 def get_chinese_time():<br>34     hour &#x3D; time.localtime().tm_hour<br>35     if len(str(hour)) &#x3D;&#x3D; 1:<br>36         hour &#x3D; “0” + str(hour)<br>37     minute &#x3D; time.localtime().tm_min<br>38     if len(str(minute)) &#x3D;&#x3D; 1:<br>39         minute &#x3D; “0” + str(minute)<br>40     second &#x3D; time.localtime().tm_sec<br>41     if len(str(second)) &#x3D;&#x3D; 1:<br>42         second &#x3D; “0” + str(second)<br>43     return “{}时{}分{}秒”.format(hour, minute, second)<br>44<br>45<br>46 # 返回英文格式的时间：xx:xx:xx<br>47 def get_english_time():<br>48     hour &#x3D; time.localtime().tm_hour<br>49     if len(str(hour)) &#x3D;&#x3D; 1:<br>50         hour &#x3D; “0” + str(hour)<br>51     minute &#x3D; time.localtime().tm_min<br>52     if len(str(minute)) &#x3D;&#x3D; 1:<br>53         minute &#x3D; “0” + str(minute)<br>54     second &#x3D; time.localtime().tm_sec<br>55     if len(str(second)) &#x3D;&#x3D; 1:<br>56         second &#x3D; “0” + str(second)<br>57     return “{}:{}:{}”.format(hour, minute, second)<br>58<br>59<br>60 # 返回中文格式的日期时间<br>61 def get_chinese_datetime():<br>62     return get_chinese_date() + “ “ + get_chinese_time()<br>63<br>64<br>65 # 返回英文格式的日期时间<br>66 def get_english_datetime():<br>67     return get_english_date() + “ “ + get_english_time()<br>68<br>69<br>70 # 返回时间戳<br>71 def get_timestamp():<br>72     year &#x3D; time.localtime().tm_year<br>73     if len(str(year)) &#x3D;&#x3D; 1:<br>74         year &#x3D; “0” + str(year)<br>75     month &#x3D; time.localtime().tm_mon<br>76     if len(str(month)) &#x3D;&#x3D; 1:<br>77         month &#x3D; “0” + str(month)<br>78     day &#x3D; time.localtime().tm_mday<br>79     if len(str(day)) &#x3D;&#x3D; 1:<br>80         day &#x3D; “0” + str(day)<br>81     hour &#x3D; time.localtime().tm_hour<br>82     if len(str(hour)) &#x3D;&#x3D; 1:<br>83         hour &#x3D; “0” + str(hour)<br>84     minute &#x3D; time.localtime().tm_min<br>85     if len(str(minute)) &#x3D;&#x3D; 1:<br>86         minute &#x3D; “0” + str(minute)<br>87     second &#x3D; time.localtime().tm_sec<br>88     if len(str(second)) &#x3D;&#x3D; 1:<br>89         second &#x3D; “0” + str(second)<br>90     return “{}{}{}_{}{}{}”.format(year, month, day, hour, minute, second)<br>91<br>92<br>93 if <strong>name</strong> &#x3D;&#x3D; “<strong>main</strong>“:<br>94     print(get_chinese_datetime())<br>95     print(get_english_datetime())</p><p>log_util.py<br>该模块封装了日志打印输出、级别设定等功能。</p><p> 1 import logging<br> 2 import logging.config<br> 3 from conf.global_var import *<br> 4<br> 5<br> 6 # 日志配置文件：多个logger，每个logger指定不同的handler<br> 7 # handler：设定了日志输出行的格式<br> 8 #          以及设定写日志到文件（是否回滚）？还是到屏幕<br> 9 #          还定了打印日志的级别<br>10 logging.config.fileConfig(LOG_CONF_FILE_PATH)<br>11 logger &#x3D; logging.getLogger(“example01”)<br>12<br>13<br>14 def debug(message):<br>15     logging.debug(message)<br>16<br>17<br>18 def info(message):<br>19     logging.info(message)<br>20<br>21<br>22 def warning(message):<br>23     logging.warning(message)<br>24<br>25<br>26 def error(message):<br>27     logging.error(message)<br>28<br>29<br>30 if <strong>name</strong>&#x3D;&#x3D;”<strong>main</strong>“:<br>31     debug(“hi”)<br>32     info(“hiphop”)<br>33     warning(“hello”)<br>34     error(“这是一个error日志”)</p><p>report_util.py<br>生成测试结果文件并发送邮件。</p><p> 1 from util.email_util import send_mail<br> 2 from util.datetime_util import *<br> 3<br> 4<br> 5 # 生成测试报告并发送邮件<br> 6 def create_excel_report_and_send_email(excel_obj, receiver, subject, content):<br> 7     “””<br> 8     :param excel_obj: excel对象用于保存文件<br> 9     :param timestamp: 用于文件命名的时间戳<br>10     :return: 返回excel测试报告文件名<br>11     “””<br>12     time_stamp &#x3D; get_timestamp()<br>13     report_path &#x3D; excel_obj.save(subject, time_stamp)<br>14     send_mail(report_path, receiver, subject+”_”+time_stamp, content)</p><p>conf 目录<br>conf 目录属于第一层测试工具层，用于存储各配置文件。</p><p>elements_repository.ini<br>该配置文件存储了各页面的元素对象的定位方式和定位表达式。</p><p> 1 [126mail_indexPage]<br> 2 indexPage.loginlink&#x3D;xpath&gt;&#x2F;&#x2F;a[contains(text(),’密码登录’)]<br> 3 indexPage.frame&#x3D;xpath&gt;&#x2F;&#x2F;iframe[contains(@id,’x-URS-iframe’)]<br> 4 indexPage.username&#x3D;xpath&gt;&#x2F;&#x2F;input[@name&#x3D;’email’]<br> 5 indexPage.password&#x3D;xpath&gt;&#x2F;&#x2F;input[@name&#x3D;’password’]<br> 6 indexPage.loginbutton&#x3D;id&gt;dologin<br> 7<br> 8 [126mail_homePage]<br> 9 homePage.addressLink&#x3D;xpath&gt;&#x2F;&#x2F;div[text()&#x3D;’通讯录’]<br>10<br>11 [126mail_contactPersonPage]<br>12 contactPersonPage.createButton&#x3D;xpath&gt;&#x2F;&#x2F;span[text()&#x3D;’新建联系人’]<br>13 contactPersonPage.name&#x3D;xpath&gt;&#x2F;&#x2F;a[@title&#x3D;’编辑详细姓名’]&#x2F;preceding-sibling::div&#x2F;input<br>14 contactPersonPage.email&#x3D;xpath&gt;&#x2F;&#x2F;<em>[@id&#x3D;’iaddress_MAIL_wrap’]&#x2F;&#x2F;input<br>15 contactPersonPage.starContacts&#x3D;xpath&gt;&#x2F;&#x2F;span[text()&#x3D;’设为星标联系人’]&#x2F;preceding-sibling::span&#x2F;b<br>16 contactPersonPage.phone&#x3D;xpath&gt;&#x2F;&#x2F;</em>[@id&#x3D;’iaddress_TEL_wrap’]&#x2F;&#x2F;dd&#x2F;&#x2F;input<br>17 contactPersonPage.otherinfo&#x3D;xpath&gt;&#x2F;&#x2F;textarea<br>18 contactPersonPage.confirmButton&#x3D;xpath&gt;&#x2F;&#x2F;span[.&#x3D;’确 定’]</p><p>logger.conf</p><p>###############################################<br>[loggers]<br>keys&#x3D;root,example01,example02<br>[logger_root]<br>level&#x3D;DEBUG<br>handlers&#x3D;hand01,hand02</p><p>[logger_example01]<br>handlers&#x3D;hand01,hand02<br>qualname&#x3D;example01<br>propagate&#x3D;0</p><p>[logger_example02]<br>handlers&#x3D;hand01,hand03<br>qualname&#x3D;example02<br>propagate&#x3D;0</p><p>###############################################<br>[handlers]<br>keys&#x3D;hand01,hand02,hand03</p><p>[handler_hand01]<br>class&#x3D;StreamHandler<br>level&#x3D;INFO<br>formatter&#x3D;form01<br>args&#x3D;(sys.stderr,)</p><p>[handler_hand02]<br>class&#x3D;FileHandler<br>level&#x3D;DEBUG<br>formatter&#x3D;form01<br>args&#x3D;(‘E:\pycharm_project_dir\UIKeywordFramework\log\ui_test.log’, ‘a’)</p><p>[handler_hand03]<br>class&#x3D;handlers.RotatingFileHandler<br>level&#x3D;INFO<br>formatter&#x3D;form01<br>args&#x3D;(‘E:\pycharm_project_dir\UIKeywordFramework\log\ui_test.log’, ‘a’, 10<em>1024</em>1024, 5)</p><p>###############################################<br>[formatters]<br>keys&#x3D;form01,form02</p><p>[formatter_form01]<br>format&#x3D;%(asctime)s [%(levelname)s] %(message)s<br>datefmt&#x3D;%Y-%m-%d %H:%M:%S</p><p>[formatter_form02]<br>format&#x3D;%(name)-12s: [%(levelname)-8s] %(message)s<br>datefmt&#x3D;%Y-%m-%d %H:%M:%S</p><p>test_data 目录<br>test_data 目录用于存放测试数据文件（Excel），存储了用例步骤、用例执行关键字、数据源等测试数据。</p><p><img src="/assets/2/image-20220510224210-86i3t56.png" alt="image.png"></p><p><img src="/assets/2/image-20220510224216-eb51jsa.png" alt="image.png"></p><p><img src="/assets/2/image-20220510224222-xoo66lr.png" alt="image.png"></p><p>main.py<br>本模块是本框架的运行主入口，属于第四层“测试场景层”，将测试用例组织成测试场景，实现各种级别 cases 的管理，如冒烟，回归等测试场景。</p><p>基于 business_process&#x2F;main_process.py 中的模块用例 sheet 执行函数或主 sheet 执行函数，组装测试场景。<br>可直接用代码组装测试场景，也可根据 excel 数据文件的用例集合和用例步骤的维护来设定测试场景。<br>完成测试执行后生成测试结果文件并发送邮件。</p><p> 1 from business_process.main_process import *<br> 2 from util.report_util import *<br> 3<br> 4<br> 5 # 组装测试场景<br> 6 # 冒烟测试<br> 7 def smoke_test(report_name):<br> 8     excel, _ &#x3D; suite_process(TEST_DATA_FILE_PATH, “登录（非数据驱动）”)<br> 9     excel, _ &#x3D; suite_process(excel, “关闭浏览器”)<br>10     # 生成测试报告并发送邮件<br>11     create_excel_report_and_send_email(excel, [‘<a href="mailto:&#x69;&#x74;&#x73;&#x6a;&#117;&#110;&#x6f;&#x40;&#49;&#54;&#51;&#x2e;&#x63;&#x6f;&#109;">&#x69;&#x74;&#x73;&#x6a;&#117;&#110;&#x6f;&#x40;&#49;&#54;&#51;&#x2e;&#x63;&#x6f;&#109;</a>‘, ‘<a href="mailto:&#49;&#56;&#50;&#x32;&#x33;&#x30;&#49;&#50;&#52;&#x40;&#113;&#113;&#46;&#99;&#x6f;&#109;">&#49;&#56;&#50;&#x32;&#x33;&#x30;&#49;&#50;&#52;&#x40;&#113;&#113;&#46;&#99;&#x6f;&#109;</a>‘], report_name, “请查收附件：UI自动化测试报告”)<br>12<br>13<br>14 # 全量测试：执行主sheet的用例集<br>15 def suite_test(report_name):<br>16     excel &#x3D; main_suite_process(TEST_DATA_FILE_PATH, “测试用例集”)<br>17     create_excel_report_and_send_email(excel, [‘<a href="mailto:&#x69;&#116;&#115;&#106;&#x75;&#110;&#111;&#64;&#49;&#54;&#x33;&#x2e;&#x63;&#x6f;&#x6d;">&#x69;&#116;&#115;&#106;&#x75;&#110;&#111;&#64;&#49;&#54;&#x33;&#x2e;&#x63;&#x6f;&#x6d;</a>‘, ‘<a href="mailto:&#49;&#56;&#x32;&#50;&#51;&#48;&#49;&#x32;&#x34;&#64;&#113;&#113;&#x2e;&#x63;&#x6f;&#x6d;">&#49;&#56;&#x32;&#50;&#51;&#48;&#49;&#x32;&#x34;&#64;&#113;&#113;&#x2e;&#x63;&#x6f;&#x6d;</a>‘], report_name, “请查收附件：UI自动化测试报告”)<br>18<br>19<br>20 if <strong>name</strong> &#x3D;&#x3D; “<strong>main</strong>“:<br>21     # smoke_test(“UI自动化测试报告_冒烟测试”)<br>22     suite_test(“UI自动化测试报告_全量测试”)</p><p><img src="/assets/2/image-20220510224231-f0bp0i7.png" alt="image.png"></p><p>test_report 目录<br>本目录用于存放测试结果文件。</p><p><img src="/assets/2/image-20220510224246-mblacyv.png" alt="image.png"></p><p><img src="/assets/2/image-20220510224252-wzmcw0q.png" alt="image.png"></p><p><img src="/assets/2/image-20220510224258-cxousa9.png" alt="image.png"></p><p>exception_pic 目录<br>本目录用于存放失败用例的截图。</p><p><img src="/assets/2/image-20220510224309-zvu91ms.png" alt="image.png"></p><p>log 目录<br>本目录用于存放日志输出文件（日志内容同时也会输出到控制台）。</p><p>log&#x2F;ui_test.log：</p><p><img src="/assets/2/image-20220510224316-xhmpjmi.png" alt="image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;关键字驱动框架简介&lt;br&gt; 原理及特点&lt;br&gt; 关键字驱动测试是数据驱动测试的一种改进类型，它也被称为表格驱动测试或者基于动作字的测试。&lt;br&gt; 主要关键字包括三类：被操作对象（Item）、操作行为（Operation）和操作值（Value），用面向对象形</summary>
      
    
    
    
    <category term="07_测试工具" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/"/>
    
    <category term="06_自动化" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/06-%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
    <category term="02_自动化实操" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/06-%E8%87%AA%E5%8A%A8%E5%8C%96/02-%E8%87%AA%E5%8A%A8%E5%8C%96%E5%AE%9E%E6%93%8D/"/>
    
    <category term="01_UI自动化" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/06-%E8%87%AA%E5%8A%A8%E5%8C%96/02-%E8%87%AA%E5%8A%A8%E5%8C%96%E5%AE%9E%E6%93%8D/01-UI%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
    <category term="UI自动化测试框架" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/06-%E8%87%AA%E5%8A%A8%E5%8C%96/02-%E8%87%AA%E5%8A%A8%E5%8C%96%E5%AE%9E%E6%93%8D/01-UI%E8%87%AA%E5%8A%A8%E5%8C%96/UI%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="课后" scheme="http://example.com/tags/%E8%AF%BE%E5%90%8E/"/>
    
  </entry>
  
  <entry>
    <title>Hudson的使用</title>
    <link href="http://example.com/07_%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/07_%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%B7%A5%E5%85%B7/02_hudson/02_Hudson%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/07_%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/07_%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%B7%A5%E5%85%B7/02_hudson/02_Hudson%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2022-05-08T14:12:14.629Z</published>
    <updated>2022-05-12T15:45:18.772Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hudson之——Hudson的使用（使用-Hudson-来自动化编译、分析、打包、发布、部署项目）"><a href="#Hudson之——Hudson的使用（使用-Hudson-来自动化编译、分析、打包、发布、部署项目）" class="headerlink" title="Hudson之——Hudson的使用（使用 Hudson 来自动化编译、分析、打包、发布、部署项目）"></a>Hudson之——Hudson的使用（使用 Hudson 来自动化编译、分析、打包、发布、部署项目）</h2><p>添加项目</p><p><img src="/assets/2/image-20220508221334-gk5k0ho.png" alt="image.png"></p><p><img src="/assets/2/image-20220508221340-c16t81i.png" alt="image.png"></p><p><img src="/assets/2/image-20220508221351-l752mzc.png" alt="image.png"></p><p><img src="/assets/2/image-20220508221358-wfw05al.png" alt="image.png"></p><p><img src="/assets/2/image-20220508221419-px8s80t.png" alt="image.png"></p><p><img src="/assets/2/image-20220508221427-d9t0fj1.png" alt="image.png"></p><p>edu-common-parent为所有项目的父级项目，没有任务Java代码，如果项目中有Java代码，则与上述配置稍微有点区别，具体看下面的步骤。</p><p><img src="/assets/2/image-20220508221440-gpkcq72.png" alt="image.png"></p><p><img src="/assets/2/image-20220508221447-0nmzqyi.png" alt="image.png"></p><p><img src="/assets/2/image-20220508221453-jovsw4g.png" alt="image.png"></p><p><img src="/assets/2/image-20220508221459-jvx6n3r.png" alt="image.png"></p><p><img src="/assets/2/image-20220508221506-hr223s4.png" alt="image.png"></p><p><img src="/assets/2/image-20220508221513-3z1s497.png" alt="image.png"></p><p><img src="/assets/2/image-20220508221519-9tu6ftx.png" alt="image.png"></p><p><img src="/assets/2/image-20220508221552-90dkabg.png" alt="image.png"></p><p><img src="/assets/2/image-20220508221559-rkjzp80.png" alt="image.png"></p><p><img src="/assets/2/image-20220508221604-pbz1sht.png" alt="image.png"></p><p>附录：</p><p>service-user.sh代码如下：</p><blockquote><p>#!&#x2F;bin&#x2F;sh</p><h2 id="java-env"><a href="#java-env" class="headerlink" title="java env"></a>java env</h2><p>export JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;java&#x2F;jdk1.7.0_72<br>export JRE_HOME&#x3D;$JAVA_HOME&#x2F;jre</p><h2 id="service-name"><a href="#service-name" class="headerlink" title="service name"></a>service name</h2><p>APP_NAME&#x3D;user</p><p>SERVICE_DIR&#x3D;&#x2F;home&#x2F;wusc&#x2F;edu&#x2F;service&#x2F;$APP_NAME<br>SERVICE_NAME&#x3D;edu-service-$APP_NAME<br>JAR_NAME&#x3D;$SERVICE_NAME.jar<br>PID&#x3D;$SERVICE_NAME.pid</p><p>cd $SERVICE_DIR</p><p>case “$1” in</p><pre><code>start)    nohup $JRE_HOME/bin/java -Xms256m -Xmx512m -jar $JAR_NAME &gt;/dev/null 2&gt;&amp;1 &amp;    echo $! &gt; $SERVICE_DIR/$PID    echo &quot;=== start $SERVICE_NAME&quot;    ;;stop)    kill `cat $SERVICE_DIR/$PID`    rm -rf $SERVICE_DIR/$PID    echo &quot;=== stop $SERVICE_NAME&quot;    sleep 5    P_ID=`ps -ef | grep -w &quot;$SERVICE_NAME&quot; | grep -v &quot;grep&quot; | awk &#39;&#123;print $2&#125;&#39;`    if [ &quot;$P_ID&quot; == &quot;&quot; ]; then        echo &quot;=== $SERVICE_NAME process not exists or stop success&quot;    else        echo &quot;=== $SERVICE_NAME process pid is:$P_ID&quot;        echo &quot;=== begin kill $SERVICE_NAME process, pid is:$P_ID&quot;        kill -9 $P_ID    fi    ;;restart)    $0 stop    sleep 2    $0 start    echo &quot;=== restart $SERVICE_NAME&quot;    ;;*)    ## restart    $0 stop    sleep 2    $0 start    ;;</code></pre><p>esac<br>exit 0</p></blockquote><p>restart.sh代码如下：</p><blockquote><h2 id="java-env-1"><a href="#java-env-1" class="headerlink" title="java env"></a>java env</h2><p>export JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;java&#x2F;jdk1.7.0_72<br>export JRE_HOME&#x3D;$JAVA_HOME&#x2F;jre</p><h2 id="restart-tomcat"><a href="#restart-tomcat" class="headerlink" title="restart tomcat"></a>restart tomcat</h2><p>&#x2F;home&#x2F;wusc&#x2F;edu&#x2F;web&#x2F;boss-tomcat&#x2F;bin&#x2F;shutdown.sh<br>sleep 3<br>rm -rf &#x2F;home&#x2F;wusc&#x2F;edu&#x2F;web&#x2F;boss-tomcat&#x2F;webapps&#x2F;edu-web-boss<br>&#x2F;home&#x2F;wusc&#x2F;edu&#x2F;web&#x2F;boss-tomcat&#x2F;bin&#x2F;startup.sh</p></blockquote><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Hudson之——Hudson的使用（使用-Hudson-来自动化编译、分析、打包、发布、部署项目）&quot;&gt;&lt;a href=&quot;#Hudson之——Hudson的使用（使用-Hudson-来自动化编译、分析、打包、发布、部署项目）&quot; class=&quot;headerlink&quot;</summary>
      
    
    
    
    <category term="07_测试工具" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/"/>
    
    <category term="07_持续集成工具" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/07-%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%B7%A5%E5%85%B7/"/>
    
    <category term="02_hudson" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/07-%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%B7%A5%E5%85%B7/02-hudson/"/>
    
    
    <category term="课后" scheme="http://example.com/tags/%E8%AF%BE%E5%90%8E/"/>
    
  </entry>
  
  <entry>
    <title>xmind转Excel</title>
    <link href="http://example.com/07_%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/01_%E6%B5%8B%E8%AF%95%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/11_TAPD/02_xmind%E8%BD%ACExcel/"/>
    <id>http://example.com/07_%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/01_%E6%B5%8B%E8%AF%95%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/11_TAPD/02_xmind%E8%BD%ACExcel/</id>
    <published>2022-05-07T12:23:15.048Z</published>
    <updated>2022-05-12T15:37:53.779Z</updated>
    
    <content type="html"><![CDATA[<h3 id="xmind转Excel测试用例"><a href="#xmind转Excel测试用例" class="headerlink" title="xmind转Excel测试用例"></a>xmind转Excel测试用例</h3><ul><li>一、引言</li><li>二、环境准备</li><li>三、脚本编写</li><li><ul><li>1、读取xmind文件</li><li>2、根据读取数据，解析数据</li><li>3、定义测试用例标题</li><li>4、数据写入Excel中</li><li>5、运行入口</li></ul></li><li>四、总结</li></ul><h1 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h1><p>作为一名测试点工，我们是需要经常写测试用例的，一般我们都会使用xmind或者freemain先写出导图，然后根据导图再编写我们的测试用例。那我们能不能直接把导图中的内容直接转成Excel测试用例呢，…有了想法，开始行动起来，测试人不要怂，开始干。</p><h1 id="二、环境准备"><a href="#二、环境准备" class="headerlink" title="二、环境准备"></a>二、环境准备</h1><p>点工一般都使用python居多，本次我们也是用python来写脚本实现本次需求，从网上了解到xmindparser库可以解析xmind文件数据，支持将xmind文件解析为dict、json、xml数据类型。数据解析完成后，还需要把解析的数据存在Excel中，python处理Excel库很多，在这边我使用的是openpyxl库。</p><pre><code class="python">python 3.7.1xmindparser 1.0.9openpyxl 3.0.9</code></pre><p>上面介绍完本次使用的库，还有一个重点就是，xmind的导图如何每个人写法都不一样，我们该如何解析形成统一标准呢，所以我们应该制定一个写导图的规则，下方是我制定的一个规则，后面都以此规则讲解。规则不是唯一，可根据实际情况自行制定。</p><p>中心主题：项目标题<br>二级标题：模块标题<br>三级标题：用例正标题<br>四级标题：操作步骤<br>五级标题：预期结果<br><img src="/assets/2/image-20220507202514-i7vov3m.png" alt="image.png"></p><h1 id="三、脚本编写"><a href="#三、脚本编写" class="headerlink" title="三、脚本编写"></a>三、脚本编写</h1><h2 id="1、读取xmind文件"><a href="#1、读取xmind文件" class="headerlink" title="1、读取xmind文件"></a>1、读取xmind文件</h2><p>读取xmind文件数据，xmind_to_dict(xmind_file_path)[0][“topic”] 返回数据如图所示，我们读取文件时把中心主题和二级目录下分支数据取出，用于后续处理。<br><img src="/assets/2/image-20220507202505-y0no9di.png" alt="image.png"><br>代码如下：</p><pre><code class="python">from xmindparser import xmind_to_dictdef read_xmind_data(xmind_file_path):    &quot;&quot;&quot;    读取xmind文件，返回中心主题标题和其他分支list数据    :param xmind_file: xmind文件路径    :return:    &quot;&quot;&quot;    case_data_dict=xmind_to_dict(xmind_file_path)[0][&quot;topic&quot;]    title = case_data_dict[&quot;title&quot;]    data_list=case_data_dict[&quot;topics&quot;]    return title,data_list</code></pre><h2 id="2、根据读取数据，解析数据"><a href="#2、根据读取数据，解析数据" class="headerlink" title="2、根据读取数据，解析数据"></a>2、根据读取数据，解析数据</h2><p>上面我们已经读取出数据，先分析下数据构成，我们发现每一个topics下面都有下一级的list，我们可以使用循环或者递归来提取出数据，并形成类似：登录-输入正确账号密码登录-进入登录页面-成功进入登录页面 这种结构的数据。<br>返回数据如下：<br><img src="/assets/2/image-20220507202458-j2pgajd.png" alt="image.png"></p><p>代码如下：</p><pre><code class="python">def xmind_to_caselist(data_list,title,listcase,strcase=&#39;&#39;):    &quot;&quot;&quot;    根据传入的list数据，递归解析出数据，形成以：    登录-输入正确账号密码登录-进入登录页面-成功进入登录页面 的数据    :param data_list: 传入解析后list    :param strcase: 初始字符串，默认为空    :param listcase: 存用例数据的list    :return: 返回以每条用例数据的list    &quot;&quot;&quot;    for branch_one in data_list:        strcase_one = strcase + branch_one[&#39;title&#39;] + &#39;_&#39;        if &#39;topics&#39; not in branch_one:            # 分支中不存在topics时，把数据添加到listcase中            strcase_one=title+&#39;_&#39;+ strcase_one            listcase.append(strcase_one)            continue        branch = branch_one[&#39;topics&#39;]        # 递归，遍历所有分支        xmind_to_caselist(branch,title,listcase,strcase=strcase_one)    return listcase</code></pre><h2 id="3、定义测试用例标题"><a href="#3、定义测试用例标题" class="headerlink" title="3、定义测试用例标题"></a>3、定义测试用例标题</h2><p>目前我所在的公司使用tapd，tapd中所用的测试用例模板标标题为：ID 用例目录 用例名称 前置条件 用例步骤 预期结果 用例类型 用例状态 用例等级。其中一些标题一般都没什么变化，我这边使用默认值。由上面返回的listcase数据，把数据拆分后重新组成一条用例，一条用例为一个list，方便后续写入Excel中。<br>返回数据如下：<br><img src="/assets/2/image-20220507202451-wovoyq6.png" alt="image.png"></p><p>代码如下：</p><pre><code class="python">def change_case(listcase,top_term=&#39;&#39;,case_type=&#39;功能测试&#39;,case_state=&#39;待更新&#39;,case_grade=&#39;中&#39;):    &quot;&quot;&quot;    Excel中用例标题分为如下9个（tapd上的上传标准）：    ID用例目录用例名称前置条件用例步骤预期结果用例类型用例状态用例等级    ID：自增    用例目录：项目名称-模块名称 例如：某某某项目-登录模块    用例名称：提取传入数据的三级标题+四级标题+五级标题    前置条件：默认为空，可自己填写通用数据    用例步骤：提取数据的四级标题    预期结果：提取数据的五级标题    用例类型：默认值为功能测试，可填其他值为：性能测试，安全性测试    用例状态：默认值为待更新，可填其他值为：正常，已废弃    用例登记：默认值为中，可填其他值为：高，低    :param data_list: 传入已从xmind分解成的list数据    :param top_term: 前置条件    :param case_type: 用例类型    :param case_state: 用例状态    :param case_grade: 用例等级    :return: 返回以一条用例为一个list的数据，例如[[用例1],[用例2],[用例3]]    &quot;&quot;&quot;    total_case=[]#总的用例格式的list    case_id=1    for data in listcase:        case_list=[]#每一条用例的list        data_sp=data.split(&#39;_&#39;)        case_list.append(case_id)        case_list.append(data_sp[0]+&quot;-&quot;+data_sp[1])        case_list.append(data_sp[2]+&#39;，&#39;+data_sp[3]+&#39;，&#39;+data_sp[4])        case_list.append(top_term)        case_list.append(data_sp[3])        case_list.append(data_sp[4])        case_list.append(case_type)        case_list.append(case_state)        case_list.append(case_grade)        total_case.append(case_list)        case_id+=1    return total_case</code></pre><h2 id="4、数据写入Excel中"><a href="#4、数据写入Excel中" class="headerlink" title="4、数据写入Excel中"></a>4、数据写入Excel中</h2><p>在上面步骤中，已经完成对数据的梳理，下面使用openpyxl库完成对数据的写入并相应的调整样式。<br>代码如下：</p><pre><code class="python">def write_excel_case(total_case,save_path):    &quot;&quot;&quot;    把解析的数据写入Excel中    :param total_case: 解析完成的数据    :param save_path: 文件保存路径    :return:     &quot;&quot;&quot;    wb=Workbook()    ws=wb.active    ws[&#39;A1&#39;]=&#39;ID&#39;    ws[&#39;B1&#39;]=&#39;用例目录&#39;    ws[&#39;C1&#39;]=&#39;用例名称&#39;    ws[&#39;D1&#39;]=&#39;前置条件&#39;    ws[&#39;E1&#39;]=&#39;用例步骤&#39;    ws[&#39;F1&#39;]=&#39;预期结果&#39;    ws[&#39;G1&#39;]=&#39;用例类型&#39;    ws[&#39;H1&#39;]=&#39;用例状态&#39;    ws[&#39;I1&#39;]=&#39;用例等级&#39;    i=1    for case in total_case:        ws[&#39;A&#123;&#125;&#39;.format(i + 1)] = case[0]        ws[&#39;B&#123;&#125;&#39;.format(i + 1)] = case[1]        ws[&#39;C&#123;&#125;&#39;.format(i + 1)] = case[2]        ws[&#39;D&#123;&#125;&#39;.format(i + 1)] = case[3]        ws[&#39;E&#123;&#125;&#39;.format(i + 1)] = case[4]        ws[&#39;F&#123;&#125;&#39;.format(i + 1)] = case[5]        ws[&#39;G&#123;&#125;&#39;.format(i + 1)] = case[6]        ws[&#39;H&#123;&#125;&#39;.format(i + 1)] = case[7]        ws[&#39;I&#123;&#125;&#39;.format(i + 1)] = case[8]        i+=1    column_list = [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;, &#39;F&#39;, &#39;G&#39;, &#39;H&#39;, &#39;I&#39;]    cell_list = [&#39;A1&#39;, &#39;B1&#39;, &#39;C1&#39;, &#39;D1&#39;, &#39;E1&#39;, &#39;F1&#39;, &#39;G1&#39;, &#39;H1&#39;, &#39;I1&#39;]    #设置表头字体    font=Font(name=&#39;宋体&#39;,bold=True)    for cel in cell_list:        cell=ws[cel]        cell.font=font    # 设置列的表格居中    alignment = Alignment(horizontal=&#39;center&#39;,wrapText=True)    for col_name in column_list:        col_list = ws[col_name]        for col in col_list:            col.alignment = alignment    #设置列的宽度    ws.column_dimensions[&#39;B&#39;].width = 20    ws.column_dimensions[&#39;C&#39;].width = 60    ws.column_dimensions[&#39;D&#39;].width = 30    ws.column_dimensions[&#39;E&#39;].width = 30    ws.column_dimensions[&#39;F&#39;].width = 30    ws.column_dimensions[&#39;G&#39;].width = 15    ws.column_dimensions[&#39;H&#39;].width = 15    ws.column_dimensions[&#39;I&#39;].width = 15    #设置行的高度    for x in range(2,ws.max_row+1):        ws.row_dimensions[x].height = 40    wb.save(save_path)</code></pre><h2 id="5、运行入口"><a href="#5、运行入口" class="headerlink" title="5、运行入口"></a>5、运行入口</h2><p>上述步骤中已经把脚本所需函数完成，下面写下运行脚本函数：<br>代码如下：</p><pre><code class="python">def run_main(xmind_file_path,save_path,top_term=&#39;&#39;,case_type=&#39;功能测试&#39;,case_state=&#39;待更新&#39;,case_grade=&#39;中&#39;):    &quot;&quot;&quot;    :param xmind_file_path: xmind文件路径    :param save_path: 文件保存路径    :param top_term: 前置条件    :param case_type: 用例类型    :param case_state: 用例状态    :param case_grade: 用例等级    :return:    &quot;&quot;&quot;    title,data_list=read_xmind_data(xmind_file_path)    listcase=xmind_to_caselist(data_list,title,[])    total_case = change_case(listcase, top_term=top_term,case_type=case_type,case_state=case_state,case_grade=case_grade)    write_excel_case(total_case,save_path)</code></pre><p>运行结果图如下：<br><img src="/assets/2/image-20220507202439-2jl83d6.png" alt="image.png"></p><h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><p>实现该需求并不是很难，主要是使用对应库解析数据并保存，目前只是实现了脚本，后续继续学习，希望把脚本转换成Tkinter桌面应用，使用更方便。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;xmind转Excel测试用例&quot;&gt;&lt;a href=&quot;#xmind转Excel测试用例&quot; class=&quot;headerlink&quot; title=&quot;xmind转Excel测试用例&quot;&gt;&lt;/a&gt;xmind转Excel测试用例&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;一、引言&lt;/li&gt;
&lt;l</summary>
      
    
    
    
    <category term="07_测试工具" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/"/>
    
    <category term="01_测试管理工具" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/01-%E6%B5%8B%E8%AF%95%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    
    <category term="11_TAPD" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/01-%E6%B5%8B%E8%AF%95%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/11-TAPD/"/>
    
    
    <category term="课后" scheme="http://example.com/tags/%E8%AF%BE%E5%90%8E/"/>
    
  </entry>
  
  <entry>
    <title>bugzilla安装</title>
    <link href="http://example.com/07_%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/01_%E6%B5%8B%E8%AF%95%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/04_bugzilla/02_bugzilla%E5%AE%89%E8%A3%85/"/>
    <id>http://example.com/07_%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/01_%E6%B5%8B%E8%AF%95%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/04_bugzilla/02_bugzilla%E5%AE%89%E8%A3%85/</id>
    <published>2022-05-07T10:38:21.190Z</published>
    <updated>2022-05-12T15:37:08.139Z</updated>
    
    <content type="html"><![CDATA[<p>安装bugzilla<br>安装bugzilla有两种方式，一种是利用Git克隆源码，这样有利于以后更新。<br>第二种方式是直接到官网下载源码。我采用的是第二种，以为是外网，没有翻墙工具网速很慢我怕Git失败会出现很多问题就直接去下载源码。下载之后放在自己喜欢的磁盘中就可以。但是一般存放路径不用出现中文。Bugzilla安装可以说是很简单了。最重要的还是配置。<br>下载地址：<a href="https://www.bugzilla.org/">https://www.bugzilla.org/</a></p><p>安装ActivePerl<br>ActivePerl也是一样到官网下载，但是官网只能下载5.26和5.28的版本这两个版本太高了有一些插件无法安装。因此我在网上找了一些资源下载的5.20的版本：ActivePerl-5.20.2.2002-MSWin32-x64-299195.msi。下载好之后直接点击运行就可以。</p><p><img src="/assets/2/image-20220507183216-c1cjmcg.png" alt="image.png"></p><p>选择同意：</p><p><img src="/assets/2/image-20220507183225-5opabz0.png" alt="image.png"></p><p>选择第一个：</p><p><img src="/assets/2/image-20220507183232-8xox7er.png" alt="image.png"></p><p>可以根据自己的情况选择文件安装，默认是安装在c盘下的Perl64文件：</p><p><img src="/assets/2/image-20220507183240-2jpt9kq.png" alt="image.png"></p><p><img src="/assets/2/image-20220507183251-87d36kf.png" alt="image.png"></p><p><img src="/assets/2/image-20220507183257-t9m6mdq.png" alt="image.png"></p><p><img src="/assets/2/image-20220507183303-0ht4i4o.png" alt="image.png"></p><p><img src="/assets/2/image-20220507183310-irxh0iw.png" alt="image.png"></p><p>安装好之后将bin文件添加到系统环境变量。Win+R键打开cmd输入ppm version出现以下内容就表示安装成功以及环境变量配置成功。</p><p><img src="/assets/2/image-20220507183318-q20jbf2.png" alt="image.png"></p><p>配置bugzilla<br>进入bugzilla安装文件按住shift+鼠标右键进去cmd命令窗口</p><p><img src="/assets/2/image-20220507183327-e1rfnuk.png" alt="image.png"></p><p>输入checksetup.pl运行checksetup.pl文件</p><p><img src="/assets/2/image-20220507183335-wizp4a2.png" alt="image.png"></p><p>可以看到bugzilla缺少的插件有可选的，有必选的，必选的就必须安装。</p><p><img src="/assets/2/image-20220507183342-sa8mwkl.png" alt="image.png"></p><p>将安装命令复制到命令行按下回车就可以安装，从上往下依次安装。如果安装失败可以先跳过，最后再来安装，有些插件有依赖关系。安装命令如：ppm install DateTime</p><p>安装完之后重新输入checksetup.pl会是这样</p><p><img src="/assets/2/image-20220507183350-pfaoz9w.png" alt="image.png"></p><p>接下来就是会在bufzilla目录下生成一个localconfig的文件，我们需要进去配置一下才能连接我们的数据库。</p><p><img src="/assets/2/image-20220507183357-l1xp9cp.png" alt="image.png"></p><p>由于我是在本地做配置，所以就只需要改这些地方就可以了，如果需要连接远程数据库还需要修改$db_host的值。配置完之后再执行checksetup.pl就会自动创建数据库。</p><p><img src="/assets/2/image-20220507183404-rvmp4o5.png" alt="image.png"></p><p>但是呢，在这个过程中我遇到了一些挫折，首先是数据库连接失败，原因是我没有启动本地数据库。手动启动数据库之后又出现的问题是数据库版本太低，又将我5.5版本的数据库升级到了5.7版本。这里提醒一下啊，不要直接将数据库版本升级太高，可能Navicat工具不支持那么高版本的数据库还得升级Navicat工具。<br>输入管理员名字和账号（该账号是一个email地址）以及管理员登陆的密码.和确认密码</p><p><img src="/assets/2/image-20220507183413-mgzryyf.png" alt="image.png"></p><p>到这里bugzilla就配置好了。</p><p>安装mysql数据库<br>安装数据库其实很简单，我安装的是mysql数据库，去mysql官网下载自己需要的mysql安装包，运行程序根据提示就可以了。如果是第一次安装mysql的可以去网上看看安装教程，我就不做详细介绍了。我重点来讲一下本地数据库升级应该注意什么。<br>首先升级本地数据库我们就得先备份数据库的数据。不然就会发现数据库一片空白，以前的数据全没了。<br>第一步：找到数据库安装路径C:\ProgramData\MySQL，将Mysql server5.5备份到别的地方。<br>第二步：到任务管理器将MySQL服务关闭。<br>第三步：通过控制面板的程序卸载将数据库卸载即可。<br>第四步：安装提前下好的数据库，我安装的是MySQL5.7.20版本。注重要的一步是取消“Development Components”的勾选（因为我们只需要安装mysql server）</p><p><img src="/assets/2/image-20220507183424-qm55dtu.png" alt="image.png"></p><p>第五步：我们将备份的Mysql server5.5下的data复制到C:\ProgramData\MySQL\ Mysql server5.7文件夹下，直接替换掉就可以。这样我们启动数据库还是能看到以前的数据。如果替换不掉就需要去任务管理器去将MySQL服务关掉。</p><p>配置IIS<br>IIS作为web服务器是非常好用的，一般Windows系统都会自带。想了解更多可以去网上查查资料，这里只讲如何配置。<br>第一步：需要先开启这些服务。WIn+R，输入OptionalFeatures，打开Windows功能，选上如下的功能。</p><p><img src="/assets/2/image-20220507183436-3zhpfk8.png" alt="image.png"></p><p>第二步：继续Win+R，输入inetmgr，打开Windows IIS配置管理工具。鼠标右键选择添加网站。</p><p><img src="/assets/2/image-20220507183443-nu7r0za.png" alt="image.png"></p><p>第三步：如下图。端口号为了避免影响以后的开发，可以选择一个不常用的端口。</p><p><img src="/assets/2/image-20220507183453-tpa89jp.png" alt="image.png"></p><p>双击默认文档，添加一个index.cgi</p><p><img src="/assets/2/image-20220507183500-cko5dnc.png" alt="image.png"></p><p>双击处理程序映射，添加脚本映射，perl.exe的路径根据实际情况来。</p><p><img src="/assets/2/image-20220507183507-wo91et0.png" alt="image.png"></p><p>然后预览一下，出现这个界面就算完成啦。</p><p><img src="/assets/2/image-20220507183514-6l4zmva.png" alt="image.png"></p><p>最后如果喜欢中文的可以将汉语包放大bugzilla&#x2F;template下就可以了。</p><p><img src="/assets/2/image-20220507183519-272bbih.png" alt="image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;安装bugzilla&lt;br&gt;安装bugzilla有两种方式，一种是利用Git克隆源码，这样有利于以后更新。&lt;br&gt;第二种方式是直接到官网下载源码。我采用的是第二种，以为是外网，没有翻墙工具网速很慢我怕Git失败会出现很多问题就直接去下载源码。下载之后放在自己喜欢的磁盘中就可</summary>
      
    
    
    
    <category term="07_测试工具" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/"/>
    
    <category term="01_测试管理工具" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/01-%E6%B5%8B%E8%AF%95%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    
    <category term="04_bugzilla" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/01-%E6%B5%8B%E8%AF%95%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/04-bugzilla/"/>
    
    
    <category term="课后" scheme="http://example.com/tags/%E8%AF%BE%E5%90%8E/"/>
    
  </entry>
  
  <entry>
    <title>tapd</title>
    <link href="http://example.com/07_%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/01_%E6%B5%8B%E8%AF%95%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/11_TAPD/01_Tapd/"/>
    <id>http://example.com/07_%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/01_%E6%B5%8B%E8%AF%95%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/11_TAPD/01_Tapd/</id>
    <published>2022-05-07T10:36:28.604Z</published>
    <updated>2022-05-12T15:54:29.059Z</updated>
    
    <content type="html"><![CDATA[<p>目录</p><p>什么是TAPD</p><p>为什么使用TAPD</p><p>如何使用TAPD</p><p>工作台</p><p>需求——分类管理用户故事</p><p>迭代——敏捷研发，小步快跑</p><p>故事墙——直观展示需求状态</p><p>缺陷——快速跟进产品缺陷</p><p>报表——高效完成数据分析</p><p>文档—— 轻松在线协作编辑</p><p>什么是TAPD<br>TAPD（Tencent Agile Product Development）全名为腾讯敏捷产品研发平台，行业领先的敏捷协作方案，贯穿敏捷产品研发生命周期的一站式服务。</p><p>为什么使用TAPD</p><p><img src="/assets/2/image-20220507201912-vn6iu34.png" alt="image.png"></p><p>如何使用TAPD<br>可以通过他人邀请，也可以自己注册，登录进入工作区。</p><p><img src="/assets/2/image-20220507201919-zql934y.png" alt="image.png"></p><p>TAPD一共提供以下几种功能件：</p><p><img src="/assets/2/image-20220507201927-u1yx4sz.png" alt="image.png"></p><p>使用TAPD 可 以 管理整个研发生命周期，使用需求承载需求的设计规划，利用迭代 进行迭代的规划跟踪，通过缺陷保证Bug流程可追溯。</p><p>迭代发布后，及时收集用户反馈进入下个迭代的研发，实现快速迭代，小步快跑。</p><p>工作台<br>提供与当前用户相关的工作事项概览：</p><p>快速查看各项目的待办工作<br>快速查看已完成工作<br>快速查看自己创建的工作<br>快捷修改&#x2F;流转相关工作项</p><p><img src="/assets/2/image-20220507201937-wim7exy.png" alt="image.png"></p><p>需求——分类管理用户故事<br>创建团队项目需求<br>修改完善需求内容<br>对需求进行分配与流转<br>分级分类管理项目需求</p><p><img src="/assets/2/image-20220507201946-mrzqowq.png" alt="image.png"></p><p>那么如何创建一个需求呢？三种方式如下：</p><p>1、点击【创建需求】，输入需求名称、详细描述、选择关联属性，完成需求的创建；</p><p>2、点击【快速创建需求】，输入需求名称，完成对需求的快速创建；</p><p>3、点击【更多操作】——【导入需求】可以实现将创建 好的需求直接导入至TAPD。</p><p><img src="/assets/2/image-20220507201954-q9h1dz3.png" alt="image.png"></p><p>此外还可以对已经创建了的需求进行更改，有两种种方式：</p><p>1、点击需求列表上的相关信息可以实现快速修改需求属性；</p><p>2、进入需求详情页，点击【编辑】【更多】对需 求进行修改、删除等；</p><p>注：点击【附件】【评论】实现对需求作补充说明。</p><p><img src="/assets/2/image-20220507202002-5r35pyr.png" alt="image.png"></p><p>需求还可以随着项目进展进行流转：</p><p>1、选中状态流中对应状态即可完成对需求的流转；</p><p>2、输入对应处理人即可为需求添加下一负责人；</p><p>3、输入评论，补充需求流转意见。</p><p><img src="/assets/2/image-20220507202011-fpmyfhu.png" alt="image.png"></p><p>还可以通过配置个人视图和过滤查看自己需要的信息：</p><p>1、点击【当前视图】，选择需要的视图模式，点击 【新建视图】可以实现自定义需求视图；</p><p>2、点击【过滤】，实现快速查找对应需求。</p><p><img src="/assets/2/image-20220507202019-fstdew6.png" alt="image.png"></p><p>迭代——敏捷研发，小步快跑<br>创建项目迭代<br>规划迭代内容<br>工作量评估与任务分配<br>跟踪迭代进度</p><p><img src="/assets/2/image-20220507202027-gqfg8b9.png" alt="image.png"></p><p>创建迭代</p><p>1、点击【创建迭代】，进入迭代创建页面；</p><p>2、输入迭代名称、迭代内容、起止时间完成创建。</p><p><img src="/assets/2/image-20220507202036-o6cxpzp.png" alt="image.png"></p><p>规划迭代内容</p><p>• 点击【规划迭代】，进入迭代规划详情页, 你可以通过两种方式将需求规划到迭代中：</p><pre><code>  1、选中需求前方的选框，点击【规划到迭代】；  2、鼠标移至需求列表前方将需求拖动至左侧迭代卡片。</code></pre><p>• 点击【过滤】可以实现查找具体的需求 ，缺陷也可以通过相同的方式纳入迭代中</p><p><img src="/assets/2/image-20220507202045-ocj1lql.png" alt="image.png"></p><p>故事墙——直观展示需求状态<br>由不同的故事卡组成，相当于敏捷研发的白板，直观展现项目进度。</p><p>查看迭代进度<br>修改故事卡片内容<br>快速流转需求状态</p><p><img src="/assets/2/image-20220507202106-5rh2mse.png" alt="image.png"></p><p><img src="/assets/2/image-20220507202113-5skx1a8.png" alt="image.png"></p><p>查看迭代进度</p><p>1、点击左上角迭代栏，可以切换不同迭代下的 故事墙；</p><p>2、TAPD提供了资源故事墙和状态故事墙两种展示方式切换故事墙视图。</p><p><img src="/assets/2/image-20220507202121-fjaectd.png" alt="image.png"></p><p>卡片内容修改与状态流转</p><p>• 状态流转</p><pre><code>  鼠标直接拖动故事卡片，添加当前处理人并补充流转 意见即可完成对需求的快速流转。</code></pre><p>• 卡片内容修改</p><pre><code> 点击故事卡片，你可以在右侧弹框内修改需求信息</code></pre><p><img src="/assets/2/image-20220507202132-36y3g0u.png" alt="image.png"></p><p>缺陷——快速跟进产品缺陷<br>管理产品缺陷，跟进迭代质量 ：</p><p>创建产品缺陷<br>修改完善缺陷内容<br>对缺陷进行分配与流转<br>统计分析缺陷数据<br>缺陷的操作和需求的操作类似，这里就不一一赘述了。</p><p>报表——高效完成数据分析<br>统计缺陷情况，控制项目质量<br>统计需求情况，了解需求状态<br>设置邮件报告，实现信息共享</p><p><img src="/assets/2/image-20220507202144-ijss0mw.png" alt="image.png"></p><p>文档—— 轻松在线协作编辑<br>提供三种文档，通过在线文档、思维导图、文件管理功能 ，可以：</p><p>与团队成员快速脑暴，碰撞创意<br>利用文档完成方案策划与输出<br>关联看板任务进行落地与跟进</p><p><img src="/assets/2/image-20220507202152-3jlejq0.png" alt="image.png"></p><p>可以对文档进行一下操作：</p><p>创建与编辑<br>在线文档的编辑与协作<br>思维导图的编辑与协作<br>文档管理与关联</p><p>这里只对思维导图的编辑与协作和文档管理与关联简单介绍一下</p><p>思维导图的编辑与协作</p><p>1、打开思维导图，可以对导图节点进行编辑， 并插入链接、图标、备注等内容；</p><p>2、将思维导图链接分享给团队成员，可以与 他们同时对导图进行编辑。</p><p><img src="/assets/2/image-20220507202205-cp31dwm.png" alt="image.png"></p><p>文档管理与关联（好像没找到这个功能）</p><p>通过文件夹分类，对团队文件进行管理；<br>文挡中的内容可以与看板工作项进行关联， 实现对于工作文件的一站式管理。</p><p>此外还有甘特图，测试用例这些功能，TAPD每个功能都有引导的这里就不一一赘述了。</p><p>参考：</p><p><a href="https://www.bilibili.com/video/av35215548%EF%BC%88%E5%BF%85%E7%9C%8B%EF%BC%89">https://www.bilibili.com/video/av35215548（必看）</a><br><a href="https://blog.csdn.net/qq_33189961/article/details/98633304">https://blog.csdn.net/qq_33189961/article/details/98633304</a><br><a href="https://blog.csdn.net/qq_33189961/article/details/98640464">https://blog.csdn.net/qq_33189961/article/details/98640464</a><br><a href="/07_%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/01_%E6%B5%8B%E8%AF%95%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/11_TAPD/02_xmind%E8%BD%ACExcel/">xmind转Excel教程</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;目录&lt;/p&gt;
&lt;p&gt;什么是TAPD&lt;/p&gt;
&lt;p&gt;为什么使用TAPD&lt;/p&gt;
&lt;p&gt;如何使用TAPD&lt;/p&gt;
&lt;p&gt;工作台&lt;/p&gt;
&lt;p&gt;需求——分类管理用户故事&lt;/p&gt;
&lt;p&gt;迭代——敏捷研发，小步快跑&lt;/p&gt;
&lt;p&gt;故事墙——直观展示需求状态&lt;/p&gt;
&lt;p&gt;缺陷——快速</summary>
      
    
    
    
    <category term="07_测试工具" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/"/>
    
    <category term="01_测试管理工具" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/01-%E6%B5%8B%E8%AF%95%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    
    <category term="11_TAPD" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/01-%E6%B5%8B%E8%AF%95%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/11-TAPD/"/>
    
    
    <category term="课后" scheme="http://example.com/tags/%E8%AF%BE%E5%90%8E/"/>
    
  </entry>
  
  <entry>
    <title>Airtest命令运行脚本与报告生成</title>
    <link href="http://example.com/07_%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/02_%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E7%AF%87/06_airtest/01_airtest%E6%96%87%E4%BB%B6/06_Airtest%E5%91%BD%E4%BB%A4%E8%BF%90%E8%A1%8C%E8%84%9A%E6%9C%AC%E4%B8%8E%E6%8A%A5%E5%91%8A%E7%94%9F%E6%88%90/"/>
    <id>http://example.com/07_%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/02_%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E7%AF%87/06_airtest/01_airtest%E6%96%87%E4%BB%B6/06_Airtest%E5%91%BD%E4%BB%A4%E8%BF%90%E8%A1%8C%E8%84%9A%E6%9C%AC%E4%B8%8E%E6%8A%A5%E5%91%8A%E7%94%9F%E6%88%90/</id>
    <published>2022-05-04T01:08:46.031Z</published>
    <updated>2022-05-12T15:41:19.074Z</updated>
    
    
    
    
    <category term="07_测试工具" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/"/>
    
    <category term="02_接口测试篇" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/02-%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E7%AF%87/"/>
    
    <category term="06_airtest" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/02-%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E7%AF%87/06-airtest/"/>
    
    <category term="01_airtest文件" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/02-%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E7%AF%87/06-airtest/01-airtest%E6%96%87%E4%BB%B6/"/>
    
    
    <category term="课中" scheme="http://example.com/tags/%E8%AF%BE%E4%B8%AD/"/>
    
  </entry>
  
  <entry>
    <title>Airtest场景处理-登录状态访问网页</title>
    <link href="http://example.com/07_%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/02_%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E7%AF%87/06_airtest/01_airtest%E6%96%87%E4%BB%B6/05_Airtest%E5%9C%BA%E6%99%AF%E5%A4%84%E7%90%86-%E7%99%BB%E5%BD%95%E7%8A%B6%E6%80%81%E8%AE%BF%E9%97%AE%E7%BD%91%E9%A1%B5/"/>
    <id>http://example.com/07_%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/02_%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E7%AF%87/06_airtest/01_airtest%E6%96%87%E4%BB%B6/05_Airtest%E5%9C%BA%E6%99%AF%E5%A4%84%E7%90%86-%E7%99%BB%E5%BD%95%E7%8A%B6%E6%80%81%E8%AE%BF%E9%97%AE%E7%BD%91%E9%A1%B5/</id>
    <published>2022-05-04T01:08:40.422Z</published>
    <updated>2022-05-12T15:41:14.986Z</updated>
    
    
    
    
    <category term="07_测试工具" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/"/>
    
    <category term="02_接口测试篇" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/02-%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E7%AF%87/"/>
    
    <category term="06_airtest" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/02-%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E7%AF%87/06-airtest/"/>
    
    <category term="01_airtest文件" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/02-%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E7%AF%87/06-airtest/01-airtest%E6%96%87%E4%BB%B6/"/>
    
    
    <category term="课中" scheme="http://example.com/tags/%E8%AF%BE%E4%B8%AD/"/>
    
  </entry>
  
  <entry>
    <title>Airtest场景处理-文件上传</title>
    <link href="http://example.com/07_%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/02_%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E7%AF%87/06_airtest/01_airtest%E6%96%87%E4%BB%B6/04_Airtest%E5%9C%BA%E6%99%AF%E5%A4%84%E7%90%86-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <id>http://example.com/07_%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/02_%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E7%AF%87/06_airtest/01_airtest%E6%96%87%E4%BB%B6/04_Airtest%E5%9C%BA%E6%99%AF%E5%A4%84%E7%90%86-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</id>
    <published>2022-05-04T01:08:40.022Z</published>
    <updated>2022-05-12T15:41:10.347Z</updated>
    
    
    
    
    <category term="07_测试工具" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/"/>
    
    <category term="02_接口测试篇" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/02-%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E7%AF%87/"/>
    
    <category term="06_airtest" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/02-%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E7%AF%87/06-airtest/"/>
    
    <category term="01_airtest文件" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/02-%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E7%AF%87/06-airtest/01-airtest%E6%96%87%E4%BB%B6/"/>
    
    
    <category term="课中" scheme="http://example.com/tags/%E8%AF%BE%E4%B8%AD/"/>
    
  </entry>
  
  <entry>
    <title>Airtest场景处理-页面Frame操作</title>
    <link href="http://example.com/07_%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/02_%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E7%AF%87/06_airtest/01_airtest%E6%96%87%E4%BB%B6/03_Airtest%E5%9C%BA%E6%99%AF%E5%A4%84%E7%90%86-%E9%A1%B5%E9%9D%A2Frame%E6%93%8D%E4%BD%9C/"/>
    <id>http://example.com/07_%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/02_%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E7%AF%87/06_airtest/01_airtest%E6%96%87%E4%BB%B6/03_Airtest%E5%9C%BA%E6%99%AF%E5%A4%84%E7%90%86-%E9%A1%B5%E9%9D%A2Frame%E6%93%8D%E4%BD%9C/</id>
    <published>2022-05-04T01:08:39.637Z</published>
    <updated>2022-05-12T15:41:05.351Z</updated>
    
    
    
    
    <category term="07_测试工具" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/"/>
    
    <category term="02_接口测试篇" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/02-%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E7%AF%87/"/>
    
    <category term="06_airtest" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/02-%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E7%AF%87/06-airtest/"/>
    
    <category term="01_airtest文件" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/02-%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E7%AF%87/06-airtest/01-airtest%E6%96%87%E4%BB%B6/"/>
    
    
    <category term="课中" scheme="http://example.com/tags/%E8%AF%BE%E4%B8%AD/"/>
    
  </entry>
  
  <entry>
    <title>AirtestWeb自动化基本使用与脚本录制</title>
    <link href="http://example.com/07_%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/02_%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E7%AF%87/06_airtest/01_airtest%E6%96%87%E4%BB%B6/02_AirtestWeb%E8%87%AA%E5%8A%A8%E5%8C%96%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E4%B8%8E%E8%84%9A%E6%9C%AC%E5%BD%95%E5%88%B6/"/>
    <id>http://example.com/07_%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/02_%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E7%AF%87/06_airtest/01_airtest%E6%96%87%E4%BB%B6/02_AirtestWeb%E8%87%AA%E5%8A%A8%E5%8C%96%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E4%B8%8E%E8%84%9A%E6%9C%AC%E5%BD%95%E5%88%B6/</id>
    <published>2022-05-04T01:08:39.042Z</published>
    <updated>2022-05-12T15:41:00.330Z</updated>
    
    
    
    
    <category term="07_测试工具" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/"/>
    
    <category term="02_接口测试篇" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/02-%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E7%AF%87/"/>
    
    <category term="06_airtest" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/02-%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E7%AF%87/06-airtest/"/>
    
    <category term="01_airtest文件" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/02-%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E7%AF%87/06-airtest/01-airtest%E6%96%87%E4%BB%B6/"/>
    
    
    <category term="课中" scheme="http://example.com/tags/%E8%AF%BE%E4%B8%AD/"/>
    
  </entry>
  
  <entry>
    <title>Airtest进阶操作启动器实现Web自动化实战</title>
    <link href="http://example.com/07_%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/02_%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E7%AF%87/06_airtest/01_airtest%E6%96%87%E4%BB%B6/07_Airtest%E8%BF%9B%E9%98%B6%E6%93%8D%E4%BD%9C%E5%90%AF%E5%8A%A8%E5%99%A8%E5%AE%9E%E7%8E%B0Web%E8%87%AA%E5%8A%A8%E5%8C%96%E5%AE%9E%E6%88%98/"/>
    <id>http://example.com/07_%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/02_%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E7%AF%87/06_airtest/01_airtest%E6%96%87%E4%BB%B6/07_Airtest%E8%BF%9B%E9%98%B6%E6%93%8D%E4%BD%9C%E5%90%AF%E5%8A%A8%E5%99%A8%E5%AE%9E%E7%8E%B0Web%E8%87%AA%E5%8A%A8%E5%8C%96%E5%AE%9E%E6%88%98/</id>
    <published>2022-05-04T01:08:38.441Z</published>
    <updated>2022-05-12T15:41:23.831Z</updated>
    
    
    
    
    <category term="07_测试工具" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/"/>
    
    <category term="02_接口测试篇" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/02-%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E7%AF%87/"/>
    
    <category term="06_airtest" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/02-%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E7%AF%87/06-airtest/"/>
    
    <category term="01_airtest文件" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/02-%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E7%AF%87/06-airtest/01-airtest%E6%96%87%E4%BB%B6/"/>
    
    
    <category term="课中" scheme="http://example.com/tags/%E8%AF%BE%E4%B8%AD/"/>
    
  </entry>
  
  <entry>
    <title>AirtestWeb自动化原理与配置</title>
    <link href="http://example.com/07_%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/02_%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E7%AF%87/06_airtest/01_airtest%E6%96%87%E4%BB%B6/01_AirtestWeb%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8E%9F%E7%90%86%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/07_%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/02_%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E7%AF%87/06_airtest/01_airtest%E6%96%87%E4%BB%B6/01_AirtestWeb%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8E%9F%E7%90%86%E4%B8%8E%E9%85%8D%E7%BD%AE/</id>
    <published>2022-05-04T01:07:33.163Z</published>
    <updated>2022-05-12T15:40:53.999Z</updated>
    
    
    
    
    <category term="07_测试工具" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/"/>
    
    <category term="02_接口测试篇" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/02-%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E7%AF%87/"/>
    
    <category term="06_airtest" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/02-%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E7%AF%87/06-airtest/"/>
    
    <category term="01_airtest文件" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/02-%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E7%AF%87/06-airtest/01-airtest%E6%96%87%E4%BB%B6/"/>
    
    
    <category term="课中" scheme="http://example.com/tags/%E8%AF%BE%E4%B8%AD/"/>
    
  </entry>
  
  <entry>
    <title>Airtest</title>
    <link href="http://example.com/07_%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/02_%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E7%AF%87/06_airtest/01_airtest/"/>
    <id>http://example.com/07_%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/02_%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E7%AF%87/06_airtest/01_airtest/</id>
    <published>2022-05-04T01:06:04.904Z</published>
    <updated>2022-05-12T15:54:29.104Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/07_%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/02_%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E7%AF%87/06_airtest/01_airtest%E6%96%87%E4%BB%B6/01_AirtestWeb%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8E%9F%E7%90%86%E4%B8%8E%E9%85%8D%E7%BD%AE/">AirtestWeb自动化原理与配置</a><br><a href="/07_%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/02_%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E7%AF%87/06_airtest/01_airtest%E6%96%87%E4%BB%B6/06_Airtest%E5%91%BD%E4%BB%A4%E8%BF%90%E8%A1%8C%E8%84%9A%E6%9C%AC%E4%B8%8E%E6%8A%A5%E5%91%8A%E7%94%9F%E6%88%90/">Airtest命令运行脚本与报告生成</a><br><a href="/07_%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/02_%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E7%AF%87/06_airtest/01_airtest%E6%96%87%E4%BB%B6/03_Airtest%E5%9C%BA%E6%99%AF%E5%A4%84%E7%90%86-%E9%A1%B5%E9%9D%A2Frame%E6%93%8D%E4%BD%9C/">Airtest场景处理-页面Frame操作</a><br><a href="/07_%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/02_%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E7%AF%87/06_airtest/01_airtest%E6%96%87%E4%BB%B6/02_AirtestWeb%E8%87%AA%E5%8A%A8%E5%8C%96%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E4%B8%8E%E8%84%9A%E6%9C%AC%E5%BD%95%E5%88%B6/">AirtestWeb自动化基本使用与脚本录制</a><br><a href="/07_%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/02_%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E7%AF%87/06_airtest/01_airtest%E6%96%87%E4%BB%B6/04_Airtest%E5%9C%BA%E6%99%AF%E5%A4%84%E7%90%86-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/">Airtest场景处理-文件上传</a><br><a href="/07_%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/02_%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E7%AF%87/06_airtest/01_airtest%E6%96%87%E4%BB%B6/05_Airtest%E5%9C%BA%E6%99%AF%E5%A4%84%E7%90%86-%E7%99%BB%E5%BD%95%E7%8A%B6%E6%80%81%E8%AE%BF%E9%97%AE%E7%BD%91%E9%A1%B5/">Airtest场景处理-登录状态访问网页</a><br><a href="/07_%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/02_%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E7%AF%87/06_airtest/01_airtest%E6%96%87%E4%BB%B6/07_Airtest%E8%BF%9B%E9%98%B6%E6%93%8D%E4%BD%9C%E5%90%AF%E5%8A%A8%E5%99%A8%E5%AE%9E%E7%8E%B0Web%E8%87%AA%E5%8A%A8%E5%8C%96%E5%AE%9E%E6%88%98/">Airtest进阶操作启动器实现Web自动化实战</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;/07_%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/02_%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E7%AF%87/06_airtest/01_airtest%E6%96%87%E4%BB%B</summary>
      
    
    
    
    <category term="07_测试工具" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/"/>
    
    <category term="02_接口测试篇" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/02-%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E7%AF%87/"/>
    
    <category term="06_airtest" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/02-%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E7%AF%87/06-airtest/"/>
    
    
    <category term="课中" scheme="http://example.com/tags/%E8%AF%BE%E4%B8%AD/"/>
    
  </entry>
  
  <entry>
    <title>19_Jira与Bugzilla</title>
    <link href="http://example.com/07_%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/01_%E6%B5%8B%E8%AF%95%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/01_jira/jira%E6%96%87%E4%BB%B6/19_Jira%E4%B8%8EBugzilla/"/>
    <id>http://example.com/07_%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/01_%E6%B5%8B%E8%AF%95%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/01_jira/jira%E6%96%87%E4%BB%B6/19_Jira%E4%B8%8EBugzilla/</id>
    <published>2022-05-03T04:30:59.502Z</published>
    <updated>2022-05-12T15:36:18.823Z</updated>
    
    <content type="html"><![CDATA[<p>Jira和Bugzilla是大型组织广泛使用的bug跟踪工具。如今这两种工具都需求巨大，但这两种工具的性能各不相同。让我们首先看看这两个工具的关键点，然后再看看这两个工具之间的区别。</p><h2 id="Jira"><a href="#Jira" class="headerlink" title="Jira"></a>Jira</h2><p>Jira是一家由澳大利亚Atlassian公司于2002年开发的错误跟踪工具。它用于项目管理，问题跟踪和错误跟踪。Jira不是一个开源工具，即Jira软件不是免费提供的; 这是一项付费服务。</p><p><strong>Jira软件的优点</strong></p><ul><li>Jira工具对于功能测试很有用。</li><li>它用于确定任务的优先级。</li><li>随着Jira工具提供更好的可见性，人们可以轻松了解构建的下一个版本。</li><li>它提供了更好的灵活性工作流程，以便团队可以相应调整。</li></ul><h2 id="Bugzilla"><a href="#Bugzilla" class="headerlink" title="Bugzilla"></a>Bugzilla</h2><p>Bugzilla也是一个由Mozilla Foundation于1998年开发的bug跟踪工具。它是一个非常流行的报告工具，具有简单的用户界面。由于其简单的界面，初学者不会花时间了解其工作流程。</p><p><strong>Bugzilla的优点</strong></p><ul><li>它提高了产品的质量。</li><li>它增强了开发团队和测试团队之间的沟通。</li><li>它具有适应多种情况的能力。</li></ul><h2 id="Jira和Bugzilla区别"><a href="#Jira和Bugzilla区别" class="headerlink" title="Jira和Bugzilla区别"></a>Jira和Bugzilla区别</h2><p><img src="/assets/2/image-20220503123207-dbym8wh.png" alt="image.png"></p><p>以下是Jira和Bugzilla之间的区别是：</p><ul><li><strong>许可证</strong><br>Jira软件仅适用于商业许可证所有者，而Bugzilla软件是一种开源工具，即无需任何许可即可使用。</li><li><strong>服务器端架构</strong><br>Jira软件的服务器端架构基于MySQL，Oracle，PostgreSQL，Perl构建，而Bugzilla软件的服务器端架构构建于J2EE，Tomcat，Lucene，MySQL，Oracle，PostgreSQL之上。</li><li><strong>服务器负载</strong><br>与Jira软件相比，Bugzilla中的服务器负载相当低。在Bugzilla中，多个实例可以在一台服务器上运行而没有太多开销，而Jira是一个复杂的系统，每个Web请求执行大多数服务器端代码，因为服务器负载要高得多。建议为Jira提供强大的硬件，即现代CPU和1 GB内存。根据Atlassian社区的说法，不要在单个JIRA实例上存储超过200,000个问题。</li><li><strong>拖放问题优先级</strong><br>拖放问题优先级功能在Jira中可用，但在Bugzilla中不可用。在Jira中，您可以根据问题的优先级轻松拖放问题，但这在Bugzilla中是不可能的。</li><li><strong>带有自定义小工具的仪表板</strong><br>小工具提供所有详细信息的摘要，例如团队的进度，报告等。Jira提供“带有自定义小工具的仪表板”功能，您可以根据需要自定义小工具，但Bugzilla中不提供此功能。</li><li><strong>实时发布跟踪</strong><br>软件开发过程中最重要的一点是可见性。Jira通过提供开发团队和测试团队之间的沟通来克服这个问题，团队成员可以通过该沟通了解“任务何时开始”和“任务何时完成”。Bugzilla不提供此功能。</li><li><strong>附件</strong><br>在Jira中，一次可以附加多个文件，而在Bugzilla中，一次只能添加一个文件。</li><li><strong>文件附件的大小限制</strong><br>Jira中文件的大小限制为10 MB，而Bugzilla中文件附件的大小限制为1mb。</li><li><strong>看板支持</strong><br>Jira支持看板项目，但Bugzilla不支持看板项目。</li><li><strong>用户界面</strong><br>Jira用户界面比Bugzilla的用户界面要好得多。在Jira中，已经做了很多努力来改进用户界面，但在Bugzilla中，界面多年来没有太大变化。</li><li><strong>自定义字段类型</strong><br>Bugzilla中提供的自定义字段类型包括文本字段，多选，下拉列表，错误ID。Jira中有太多可用的字段类型，插件中提供了更多自定义字段类型。</li><li><strong>工作流程</strong><br>在Bugzilla中，管理员通过编辑转换矩阵来定义所有产品的全局工作流，而Jira允许用户根据问题和项目的类型定义多个工作流，并且问题经历多个状态。</li><li><strong>搜索</strong><br>Bugzilla提供了一种高级搜索功能，但Jira具有更灵活的Jira查询语言，可提供更强大的搜索功能，用于创建项目状态和监控项目进度。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Jira和Bugzilla是大型组织广泛使用的bug跟踪工具。如今这两种工具都需求巨大，但这两种工具的性能各不相同。让我们首先看看这两个工具的关键点，然后再看看这两个工具之间的区别。&lt;/p&gt;
&lt;h2 id=&quot;Jira&quot;&gt;&lt;a href=&quot;#Jira&quot; class=&quot;head</summary>
      
    
    
    
    <category term="07_测试工具" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/"/>
    
    <category term="01_测试管理工具" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/01-%E6%B5%8B%E8%AF%95%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    
    <category term="01_jira" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/01-%E6%B5%8B%E8%AF%95%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/01-jira/"/>
    
    <category term="jira文件" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/01-%E6%B5%8B%E8%AF%95%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/01-jira/jira%E6%96%87%E4%BB%B6/"/>
    
    
    <category term="课后" scheme="http://example.com/tags/%E8%AF%BE%E5%90%8E/"/>
    
  </entry>
  
  <entry>
    <title>22_Jira报告</title>
    <link href="http://example.com/07_%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/01_%E6%B5%8B%E8%AF%95%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/01_jira/jira%E6%96%87%E4%BB%B6/22_Jira%E6%8A%A5%E5%91%8A/"/>
    <id>http://example.com/07_%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/01_%E6%B5%8B%E8%AF%95%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/01_jira/jira%E6%96%87%E4%BB%B6/22_Jira%E6%8A%A5%E5%91%8A/</id>
    <published>2022-05-03T04:06:22.844Z</published>
    <updated>2022-05-12T15:36:34.364Z</updated>
    
    <content type="html"><![CDATA[<p>报告用于跟踪和分析整个项目中团队的绩效。Jira有一系列报告，显示有关您的项目，版本，冲刺，史诗和问题的信息。<br>以下是报告生成的报告：</p><h4 id="平均时长报告"><a href="#平均时长报告" class="headerlink" title="平均时长报告"></a>平均时长报告</h4><p>平均时长报告显示项目或过滤器未解决问题的平均时长。它可以帮助您显示积压是否保持最新。</p><p>基本上，它找到问题未解决的平均天数。</p><p>生成平均时长告，该报告取决于所选项目，过滤器中选择的问题类型以及时间(小时&#x2F;天&#x2F;周&#x2F;月)。</p><p>平均时长报告如下所示：</p><p><img src="/assets/2/image-20220503123842-sp2l09c.png" alt="image.png"><br>上面的屏幕显示了过去30天内所有未解决问题的平均时长。</p><h4 id="饼图"><a href="#饼图" class="headerlink" title="饼图"></a>饼图</h4><p>饼图显示从指定项目或问题过滤器返回的问题。我们可以创建一个问题过滤器，用于检索属于特定项目特定版本的所有问题。创建饼图以对属于特定统计类型的所有问题进行分组，统计类型可以是受理人，项目等。</p><p>假设选择统计类型作为受让人。</p><p><img src="/assets/2/image-20220503123846-ga9c7vn.png" alt="image.png"></p><p>上面的屏幕显示了基于“受让人”类型的饼图。上图显示一个问题分配给 <strong>Akshita Gupta</strong> ，其他四个问题未分配。</p><h4 id="已创建与已解决的问题"><a href="#已创建与已解决的问题" class="headerlink" title="已创建与已解决的问题"></a>已创建与已解决的问题</h4><p>已创建与已解决的问题是一个报告，显示在给定时间段内创建和解决的问题数。<br>此报告是基于用户选择的项目和问题过滤器创建的，图表可以是累积的，也可以是累积的。</p><p><img src="/assets/2/image-20220503123851-xolknwz.png" alt="image.png"></p><h4 id="最近创建的问题报告"><a href="#最近创建的问题报告" class="headerlink" title="最近创建的问题报告"></a>最近创建的问题报告</h4><p>最近创建的问题报告显示了已创建的问题数，并解决了一些问题。<br><img src="/assets/2/image-20220503123856-2682c9c.png" alt="image.png"></p><p>在上面的屏幕中，红色部分显示问题已创建且未解决，而绿色显示问题已创建，但已解决。</p><h4 id="解决时间报告"><a href="#解决时间报告" class="headerlink" title="解决时间报告"></a>解决时间报告</h4><p>解决时间报告确定解决项目&#x2F;过滤器问题所用时间的长度。</p><h4 id="按报告单级组"><a href="#按报告单级组" class="headerlink" title="按报告单级组"></a>按报告单级组</h4><p>按报告的单级组按问题过滤器的特定字段对问题进行分类，但不显示图表。</p><p><img src="/assets/2/image-20220503123901-q4dgspj.png" alt="image.png"></p><p>上面的屏幕显示分配了一个问题，即HEL-1，而其他四个问题，即HEL-5，HEL-3，HEL-2，HEL-4，是未分配的。“按级别分组报告”显示已分配和未分配问题的进度。</p><h4 id="自问题报告以来的时间"><a href="#自问题报告以来的时间" class="headerlink" title="自问题报告以来的时间"></a>自问题报告以来的时间</h4><p>自问题报告以来的时间生成报告，该报告显示所选数据字段的问题数，并且数据字段可以是创建，更新，到期，已解决。</p><p><img src="/assets/2/image-20220503123905-bv2urpp.png" alt="image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;报告用于跟踪和分析整个项目中团队的绩效。Jira有一系列报告，显示有关您的项目，版本，冲刺，史诗和问题的信息。&lt;br&gt;以下是报告生成的报告：&lt;/p&gt;
&lt;h4 id=&quot;平均时长报告&quot;&gt;&lt;a href=&quot;#平均时长报告&quot; class=&quot;headerlink&quot; title=&quot;平均</summary>
      
    
    
    
    <category term="07_测试工具" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/"/>
    
    <category term="01_测试管理工具" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/01-%E6%B5%8B%E8%AF%95%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    
    <category term="01_jira" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/01-%E6%B5%8B%E8%AF%95%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/01-jira/"/>
    
    <category term="jira文件" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/01-%E6%B5%8B%E8%AF%95%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/01-jira/jira%E6%96%87%E4%BB%B6/"/>
    
    
    <category term="课后" scheme="http://example.com/tags/%E8%AF%BE%E5%90%8E/"/>
    
  </entry>
  
  <entry>
    <title>21_Jira版本</title>
    <link href="http://example.com/07_%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/01_%E6%B5%8B%E8%AF%95%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/01_jira/jira%E6%96%87%E4%BB%B6/21_Jira%E7%89%88%E6%9C%AC/"/>
    <id>http://example.com/07_%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/01_%E6%B5%8B%E8%AF%95%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/01_jira/jira%E6%96%87%E4%BB%B6/21_Jira%E7%89%88%E6%9C%AC/</id>
    <published>2022-05-03T04:06:22.289Z</published>
    <updated>2022-05-12T15:36:29.256Z</updated>
    
    <content type="html"><![CDATA[<p>版本用于组织和计划发布。如果创建了版本并在版本上分配了问题，那么我们可以使用该版本来过滤各种报告中的信息。</p><p>可以将问题分配给特定版本，并可以组织该版本中的sprint。</p><h4 id="创建版本"><a href="#创建版本" class="headerlink" title="创建版本"></a>创建版本</h4><p> <strong>第1步：</strong> 进入到您的项目。<br> <strong>第2步：</strong> 单击面板左侧显示的版本( <em>Releases</em> )。</p><p><img src="/assets/2/image-20220503123653-71s5ctt.png" alt="image.png"></p><p> <strong>第3步：</strong> 点击<strong>Releases</strong>链接后，屏幕出现，如下所示：</p><p><img src="/assets/2/image-20220503123658-adcyssn.png" alt="image.png"></p><p> <strong>第4步：</strong> 单击“创建版本”按钮。<br> <strong>第5步：</strong> 单击“创建版本”按钮，将出现弹出窗口，询问版本名称及其描述。</p><p><img src="/assets/2/image-20220503123703-1bxxc58.png" alt="image.png"></p><h4 id="向版本添加问题"><a href="#向版本添加问题" class="headerlink" title="向版本添加问题"></a>向版本添加问题</h4><p> <strong>第1步：</strong> 进入到您的项目。<br> <strong>第2步：</strong> 单击面板左侧显示的Backlog。<br> <strong>第3步：</strong> 单击“版本”面板。</p><p><img src="/assets/2/image-20220503123708-ee2ni5s.png" alt="image.png"></p><p> <strong>第4步：</strong> 将问题拖到要在版本中添加的版本。</p><h4 id="完成一个版本"><a href="#完成一个版本" class="headerlink" title="完成一个版本"></a>完成一个版本</h4><p>可以在准备好发布版本时完成版本。当问题完成时，版本已准备好发布，并且会检查和检查代码。</p><p> <strong>第1步：</strong> 导航到您的项目。<br> <strong>第2步：</strong> 单击面板左侧显示的“版本”链接。</p><p><img src="/assets/2/image-20220503123713-rppzmpe.png" alt="image.png"></p><p> <strong>第3步：</strong> 要发布版本，请转到省略号**(…)** -&gt; <strong>发布</strong> 。</p><p><img src="/assets/2/image-20220503123718-3k8h61k.png" alt="image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;版本用于组织和计划发布。如果创建了版本并在版本上分配了问题，那么我们可以使用该版本来过滤各种报告中的信息。&lt;/p&gt;
&lt;p&gt;可以将问题分配给特定版本，并可以组织该版本中的sprint。&lt;/p&gt;
&lt;h4 id=&quot;创建版本&quot;&gt;&lt;a href=&quot;#创建版本&quot; class=&quot;head</summary>
      
    
    
    
    <category term="07_测试工具" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/"/>
    
    <category term="01_测试管理工具" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/01-%E6%B5%8B%E8%AF%95%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    
    <category term="01_jira" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/01-%E6%B5%8B%E8%AF%95%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/01-jira/"/>
    
    <category term="jira文件" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/01-%E6%B5%8B%E8%AF%95%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/01-jira/jira%E6%96%87%E4%BB%B6/"/>
    
    
    <category term="课后" scheme="http://example.com/tags/%E8%AF%BE%E5%90%8E/"/>
    
  </entry>
  
  <entry>
    <title>20_Jira史诗（Epic）</title>
    <link href="http://example.com/07_%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/01_%E6%B5%8B%E8%AF%95%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/01_jira/jira%E6%96%87%E4%BB%B6/20_Jira%E5%8F%B2%E8%AF%97%EF%BC%88Epic%EF%BC%89/"/>
    <id>http://example.com/07_%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/01_%E6%B5%8B%E8%AF%95%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/01_jira/jira%E6%96%87%E4%BB%B6/20_Jira%E5%8F%B2%E8%AF%97%EF%BC%88Epic%EF%BC%89/</id>
    <published>2022-05-03T04:06:21.942Z</published>
    <updated>2022-05-12T15:36:23.977Z</updated>
    
    <content type="html"><![CDATA[<p>Jira史诗(Epic)是一个大型用户故事，根据客户或最终用户需求分解为较小的任务(用户故事)。</p><ul><li>根据客户需求，根据需要在史诗中添加或删除任务。</li><li>Epic用于组织工作和创建层次结构。</li><li>Epic通过将更大的任务组织成更小的任务来保持敏捷性。</li><li>Epic是工作层次结构的顶层，开发人员使用它。</li><li>Epic是更大的故事，具有明显的开始和结束。</li><li>Epic可以跨越多个冲刺，即，史诗是通过多个冲刺传递的。</li><li>Epic可以包含故事，错误和任务，并将它们分组成一个大故事。</li><li>当Epic包含故事，错误或任务时，所有这些问题类型都表示在Jira的层次结构中的同一级别。</li><li>故事，错误，任务代表单件作品，而史诗则是一组相关问题。</li></ul><p><strong>下面我们来理解史诗的结构流程：</strong></p><p>史诗由多个故事组成，而初步行动由Epics组成。因此，我们可以说这些初步行动举措超越了史诗。初步行动从多个团队中获取Epics，以实现比任何Epics都能实现的目标更大的目标。</p><p><img src="https://www.yiibai.com/uploads/article/2019/08/27/075442_67722.png" alt="史诗的结构流程" title="史诗的结构流程"></p><h2 id="史诗的工作"><a href="#史诗的工作" class="headerlink" title="史诗的工作"></a>史诗的工作</h2><h4 id="创造一个史诗"><a href="#创造一个史诗" class="headerlink" title="创造一个史诗"></a>创造一个史诗</h4><p>创建史诗有两种方法：</p><ul><li>从新问题创建史诗</li></ul><p><strong>第1步：</strong> 单击面板左侧显示的“+”图标。</p><p><img src="/assets/2/image-20220503123338-eyvewfq.png" alt="image.png"></p><p> <strong>第2步：</strong> 单击 <strong>+</strong> 图标，屏幕出现，如下所示：</p><p><img src="/assets/2/image-20220503123343-f9dv2d0.png" alt="image.png"></p><p> <strong>第3步：</strong> 选择问题类型为Epic。</p><ul><li>从Epics面板创建一个史诗</li></ul><p> <strong>第1步：</strong> 单击面板左侧显示的Backlog。<br><img src="/assets/2/image-20220503123348-d21m1uo.png" alt="image.png"></p><p><strong>第2步：</strong> 单击史诗面板中显示的Epics。</p><p><img src="/assets/2/image-20220503123405-vigcbeo.png" alt="image.png"></p><p> <strong>第3步：</strong> 单击<strong>Create Epic</strong>链接。</p><p>在上述两种情况下，需要输入以下详细信息才能创建史诗：</p><ul><li>史诗名称：它是史诗的简短唯一标识符。</li><li>史诗摘要：它提供了史诗的简短描述。</li></ul><h4 id="添加和删除故事"><a href="#添加和删除故事" class="headerlink" title="添加和删除故事"></a>添加和删除故事</h4><p>在史诗中添加故事的方法有两种：</p><ul><li>从问题创建屏幕添加问题</li></ul><p> <strong>第1步：</strong> 单击面板左侧出现的 <strong>+</strong> 图标。</p><p><img src="/assets/2/image-20220503123410-vsf5uob.png" alt="image.png"></p><p><strong>第2步：</strong> 单击问题类型的下拉列表，然后选择史诗以外的问题类型。<br><img src="/assets/2/image-20220503123410-vsf5uob.png" alt="image.png"></p><p>上面的屏幕显示我们已经创建了Bug类型的问题，在史诗“摘要”中添加了这个问题。我们在史诗链接字段中添加史诗。</p><ul><li><strong>从Epics面板添加问题</strong></li></ul><p> <strong>第1步：</strong> 单击面板左侧显示的Backlog。<br> <strong>第2步：</strong> 点击Epics面板中的Epics。<br> <strong>第3步：</strong> 单击史诗链接中的创建问题。<br><img src="/assets/2/image-20220503123420-45g6iym.png" alt="image.png"></p><ul><li><strong>从史诗中删除一个问题</strong></li></ul><p>要从Epic中删除问题，请按照以下步骤操作：</p><p> <strong>第1步：</strong> 移至Backlog页面。<br> <strong>第2步：</strong> 将问题拖放到没有史诗的问题。</p><p><img src="/assets/2/image-20220503123425-mbhqqsl.png" alt="image.png"></p><h4 id="查看所有的Epics"><a href="#查看所有的Epics" class="headerlink" title="查看所有的Epics"></a>查看所有的Epics</h4><p>可以在Backlog中看到与史诗相关的信息。</p><p><img src="/assets/2/image-20220503123431-k4usd83.png" alt="image.png"></p><ul><li><strong>Epics面板：</strong> 导航到Backlog，然后单击Epics面板以查看和管理epics。</li><li><strong>Epics列表：</strong> Epics面板显示项目中所有史诗的列表。</li><li><strong>查看史诗中的问题：</strong> 单击史诗的名称可查看所有史诗冲刺中的所有问题。</li></ul><h4 id="完成史诗"><a href="#完成史诗" class="headerlink" title="完成史诗"></a>完成史诗</h4><p>一旦完成了与史诗相关的所有工作，那么史诗就会被标记为完整。</p><p>以下是完成史诗所需的步骤：</p><ul><li>单击面板左侧显示的Backlog。</li><li>点击Epics面板中的Epics。</li><li>选择要将其标记为“完成”的史诗。</li><li>单击下拉列表并选择“标记为完成”选项。<br><img src="/assets/2/image-20220503123437-z76lk5b.png" alt="image.png"></li></ul><p>将史诗标记为“完成”时，将出现确认完成对话框。</p><p><img src="/assets/2/image-20220503123442-z74tugo.png" alt="image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Jira史诗(Epic)是一个大型用户故事，根据客户或最终用户需求分解为较小的任务(用户故事)。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据客户需求，根据需要在史诗中添加或删除任务。&lt;/li&gt;
&lt;li&gt;Epic用于组织工作和创建层次结构。&lt;/li&gt;
&lt;li&gt;Epic通过将更大的任务组织</summary>
      
    
    
    
    <category term="07_测试工具" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/"/>
    
    <category term="01_测试管理工具" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/01-%E6%B5%8B%E8%AF%95%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    
    <category term="01_jira" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/01-%E6%B5%8B%E8%AF%95%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/01-jira/"/>
    
    <category term="jira文件" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/01-%E6%B5%8B%E8%AF%95%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/01-jira/jira%E6%96%87%E4%BB%B6/"/>
    
    
    <category term="课后" scheme="http://example.com/tags/%E8%AF%BE%E5%90%8E/"/>
    
  </entry>
  
  <entry>
    <title>18_JIRA缺陷生命周期</title>
    <link href="http://example.com/07_%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/01_%E6%B5%8B%E8%AF%95%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/01_jira/jira%E6%96%87%E4%BB%B6/18_JIRA%E7%BC%BA%E9%99%B7%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://example.com/07_%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/01_%E6%B5%8B%E8%AF%95%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/01_jira/jira%E6%96%87%E4%BB%B6/18_JIRA%E7%BC%BA%E9%99%B7%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</id>
    <published>2022-05-03T04:06:21.666Z</published>
    <updated>2022-05-12T15:36:13.475Z</updated>
    
    <content type="html"><![CDATA[<p>JIRA bug生命周期也称为缺陷生命周期。错误生命周期由一组错误通过的状态组成。错误经历的状态数因项目而异。我们可以将Bug定义为错误，缺陷或者我们可以说当实际输出与预期输出不匹配时，它被称为错误或缺陷。这两个术语，即bug和缺陷都是常用的，但最流行的是一个bug。可以在SDLC(软件开发生命周期)的任何阶段生成错误，它可以存在于需求收集，设计SRS文档的设计阶段，开发阶段，测试阶段或最终用户在 使用申请的时间。</p><p>从错误登录到错误关闭点的角度来看，错误的生命周期。Bug经历以下状态：</p><ul><li>新建(New)</li><li>分配(Assigned)</li><li>打开(Open)</li><li>确定(Fixed)</li><li>复验(Retesting)</li><li>重打开(Reopen)</li><li>已验证(Verified)</li><li>关闭(Closed)</li></ul><p><img src="/assets/2/image-20220503123024-e1ie1uc.png" alt="image.png"></p><h4 id="新建-New"><a href="#新建-New" class="headerlink" title="新建(New)"></a>新建(New)</h4><p>在测试阶段，测试人员会识别错误或缺陷，并登录到Jira，Bugzilla等错误跟踪工具中。测试人员检测到的错误将首次发布在错误跟踪工具中。此状态被指定为新状态。</p><h4 id="分配-Assigned"><a href="#分配-Assigned" class="headerlink" title="分配(Assigned)"></a>分配(Assigned)</h4><p>将新状态的错误分配给软件开发人员，他们将查看错误以检查错误是有效还是无效。如果错误无效，则他们将状态更改为无效。如果错误有效，则状态将更改为已分配，然后软件开发人员开始处理缺陷以获得修复。</p><h4 id="打开-Open"><a href="#打开-Open" class="headerlink" title="打开(Open)"></a>打开(Open)</h4><p>当错误被分配给软件开发人员时，他们就开始对其进行分析并处理缺陷修复。错误或缺陷可以分三个阶段打开：</p><h4 id="确定-Fixed"><a href="#确定-Fixed" class="headerlink" title="确定(Fixed)"></a>确定(Fixed)</h4><ul><li><strong>重复</strong><br>如果缺陷重复两次或缺陷对应于前一个bug的相同概念，则它将状态更改为Duplicate。</li><li><strong>被拒绝</strong><br>如果开发人员认为缺陷不是真正的缺陷，那么它会将状态更改为“已拒绝”。</li><li><strong>递延</strong><br>如果错误的优先级不高并且可以在下一个版本中解决，则状态将更改为Deferred。延迟状态也称为推迟状态。</li></ul><h4 id="复验-Retesting"><a href="#复验-Retesting" class="headerlink" title="复验(Retesting)"></a>复验(Retesting)</h4><p>当开发人员进行必要的代码更改并验证更改时，他&#x2F;她可以将错误状态设置为已修复。当开发人员修复错误后，状态将更改为“重新打开”或“已验证”。</p><h4 id="重打开-Reopen"><a href="#重打开-Reopen" class="headerlink" title="重打开(Reopen)"></a>重打开(Reopen)</h4><p>如果在开发人员修复了bug之后bug仍然存在，那么测试人员将状态更改为Reopen，并且bug再次通过整个bug生命周期。</p><h4 id="已验证-Verified"><a href="#已验证-Verified" class="headerlink" title="已验证(Verified)"></a>已验证(Verified)</h4><p>如果没有发现错误，测试人员在开发人员修复错误后重新测试该错误，然后将状态更改为已验证。</p><h4 id="关闭-Closed"><a href="#关闭-Closed" class="headerlink" title="关闭(Closed)"></a>关闭(Closed)</h4><p>如果错误不再存在，则会将状态更改为“已关闭”。</p><p>Bug生命周期的参与者 -</p><ul><li><strong>Bug报告者</strong><br>识别错误的人称为 <strong>Bug Reporter</strong> 。Bug报告者验证错误并将所有与bug相关的详细信息输入到错误跟踪工具中，例如正确的主题，错误优先级，应用程序组件，测试环境，错误受理人，错误描述。如果需要，测试人员需要发送附加的屏幕截图以澄清错误详细信息。</li><li><strong>错误跟踪工具</strong><br>可以将错误记录到错误跟踪工具中，错误跟踪工具可以是Jira，Bugzilla，Assembla等。</li><li><strong>Bug小组</strong><br>Bug小组是一组可以查看错误详细信息的人。Bug小组可以包括报告错误的测试人员或最终用户，分配错误的开发人员，项目经理，QA经理。</li><li><strong>Bug所有者</strong><br>错误所有者是审核并拥有该错误的人。错误所有者检查错误信息是否足够，如果没有，则将错误分配给错误报告者以提供更多信息。根据bug的优先级，Bug所有者获取bug的所有权并在截止日期内修复它。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;JIRA bug生命周期也称为缺陷生命周期。错误生命周期由一组错误通过的状态组成。错误经历的状态数因项目而异。我们可以将Bug定义为错误，缺陷或者我们可以说当实际输出与预期输出不匹配时，它被称为错误或缺陷。这两个术语，即bug和缺陷都是常用的，但最流行的是一个bug。可以在</summary>
      
    
    
    
    <category term="07_测试工具" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/"/>
    
    <category term="01_测试管理工具" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/01-%E6%B5%8B%E8%AF%95%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    
    <category term="01_jira" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/01-%E6%B5%8B%E8%AF%95%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/01-jira/"/>
    
    <category term="jira文件" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/01-%E6%B5%8B%E8%AF%95%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/01-jira/jira%E6%96%87%E4%BB%B6/"/>
    
    
    <category term="课后" scheme="http://example.com/tags/%E8%AF%BE%E5%90%8E/"/>
    
  </entry>
  
  <entry>
    <title>17_Jira控制面板</title>
    <link href="http://example.com/07_%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/01_%E6%B5%8B%E8%AF%95%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/01_jira/jira%E6%96%87%E4%BB%B6/17_Jira%E6%8E%A7%E5%88%B6%E9%9D%A2%E6%9D%BF/"/>
    <id>http://example.com/07_%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/01_%E6%B5%8B%E8%AF%95%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/01_jira/jira%E6%96%87%E4%BB%B6/17_Jira%E6%8E%A7%E5%88%B6%E9%9D%A2%E6%9D%BF/</id>
    <published>2022-05-03T04:06:21.357Z</published>
    <updated>2022-05-12T15:36:06.846Z</updated>
    
    <content type="html"><![CDATA[<p>控制面板显示项目中发生的所有问题，为您提供查看，管理和报告工作进度的灵活方式。</p><p>Jira中存在三种类型的控制面板：</p><p><img src="/assets/2/image-20220503122700-julhaka.png" alt="image.png"></p><ul><li><strong>下一代板</strong><br>这个板对那些刚接触敏捷的人很有用。它是一个非常简化，直接和流线型的板。</li><li><strong>Scrum板</strong><br>当团队处理包含待办事项的冲刺时，此板很有用。</li><li><strong>看板</strong><br>看板是一种灵活的项目管理工具，专为工作可视化，限制在制品和最大化效率而设计。</li></ul><h4 id="Scrum板"><a href="#Scrum板" class="headerlink" title="Scrum板"></a>Scrum板</h4><p>Scrum板分为三个部分：</p><ul><li><strong>积压</strong><br>积压( <em>backlog</em> )是项目中可用的一组活动或问题。所有问题都分为积压和冲刺。在scrum backlog中，可以创建和更新问题，拖放问题并将其分配给sprint，拖放问题以对其进行排名。</li></ul><p><img src="/assets/2/image-20220503122706-3bggp2f.png" alt="image.png"><br>上面的屏幕显示了包含问题<strong>TP-1</strong>的积压，它的描述是登录按钮不起作用。</p><ul><li>活动冲刺<br><strong>Active sprint</strong>是一个包含团队当前正在处理的问题。也可以拖放问题并将其分配回待办事项。</li></ul><p><strong>创建活动sprint的步骤：</strong></p><p>单击Backlog。点击Backlog后，屏幕出现，如下所示：<br><img src="/assets/2/image-20220503122712-qs7ord4.png" alt="image.png"></p><p>上面的屏幕显示Backlog，其中包含“登录按钮无法正常工作”的问题。</p><ul><li>单击<strong>Create sprint</strong>按钮创建sprint。单击<strong>Create sprint</strong>按钮，将出现如下屏幕所示的屏幕：</li></ul><p><img src="/assets/2/image-20220503122717-snhqs6x.png" alt="image.png"></p><p>上面的屏幕显示的sprint是 <strong>Sprint 1</strong> 。</p><ul><li>将问题从积压拖放到 <strong>Sprint 1</strong> ，如下图所示 -<br><img src="/assets/2/image-20220503122722-rux1bm0.png" alt="image.png"></li></ul><p>在上面的屏幕中，我们观察到问题已从积压拖到 <strong>Sprint 1</strong> ，并且问题已从积压中删除。</p><ul><li>单击开始冲刺按钮以进行活动冲刺。</li><li>单击面板左侧显示的Active sprint。</li></ul><p><img src="/assets/2/image-20220503122728-j30xmvk.png" alt="image.png"></p><p>上面的屏幕显示<strong>Sprint 1</strong>是团队目前正在进行的活跃冲刺。</p><ul><li><strong>报告</strong></li></ul><p>报告是将在整个项目中执行的活动。制作报告，用于显示有关项目，版本，史诗，冲刺和问题的信息。</p><h4 id="看板"><a href="#看板" class="headerlink" title="看板"></a>看板</h4><p>看板是一个过程，它提供您今天所做的所有工作的可视化。</p><p>看板由三部分组成：</p><ul><li><strong>积压</strong><br>看板有一个单独的Backlog列，我们为团队计划工作。在一个小栏目中规划工作变得非常困难，因此通过使用看板积压为处理问题提供了更大的空间。</li></ul><p><strong>在看板框架中创建待办事项的步骤：</strong></p><p>创建一个问题。当创建一个问题时，它会自动添加到Backlog中。<br><img src="/assets/2/image-20220503122734-fafagt1.png" alt="image.png"><br>上面的屏幕显示我们创建的<strong>HEL-1</strong>问题已添加到待办事项中。</p><ul><li><p><strong>看板控制面板</strong> - 看板是一个基于持续交付工作的过程。在看板框架中，不是计划迭代，而是连续监视工作流当任务完成时，新任务被添加到进行中状态。看板控制面板由三种状态组成：</p><ul><li>入选开发</li><li>进行中</li><li>完成</li></ul></li><li><p><strong>报告</strong><br>报告是将在整个项目中执行的活动。制作报告，用于显示有关项目，版本，史诗，冲刺和问题的信息。</p></li></ul><h4 id="下一代控制面板"><a href="#下一代控制面板" class="headerlink" title="下一代控制面板"></a>下一代控制面板</h4><p>下一代(next-gen)控制面板与经典的scrum和看板相同。但是，next-gen控制面板在开始时并未提供所有功能，它仅在您需要时提供该功能。Next-gen项目可以在两个模板中完成，即<strong>Next-gen Scrum</strong>和 <strong>Next-gen Kanban</strong> 。</p><p>如何创建下一代项目？</p><p><strong>可以通过以下步骤创建下一代项目：</strong></p><p>单击<strong>Create project</strong>下拉菜单，然后选择<strong>Try next-gen project</strong>选项。</p><p><img src="/assets/2/image-20220503122741-wwfxa3y.png" alt="image.png"></p><ul><li>单击<strong>Try next-gen</strong>项目后，屏幕出现，如下所示：</li></ul><p><img src="/assets/2/image-20220503122748-tqceb3a.png" alt="image.png"></p><p>上面的屏幕显示选择了Scrum模板，也可以通过点击链接更改模板来更改模板。选择模板后，输入项目名称，我们将<em>Test Project</em> 作为项目名称。单击“创建”按钮。</p><p>单击创建按钮后，将创建<strong>Next-gen Scrum</strong>项目，如下所示：</p><p><img src="/assets/2/image-20220503122754-rfrmfb7.png" alt="image.png"></p><blockquote><p><strong>注意：</strong> Next-Gen Scrum和Next-Gen Kanban项目都有一个路线图功能，可以显示团队的进度，还可以定义项目的截止日期。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;控制面板显示项目中发生的所有问题，为您提供查看，管理和报告工作进度的灵活方式。&lt;/p&gt;
&lt;p&gt;Jira中存在三种类型的控制面板：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/2/image-20220503122700-julhaka.png&quot; alt=&quot;image.</summary>
      
    
    
    
    <category term="07_测试工具" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/"/>
    
    <category term="01_测试管理工具" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/01-%E6%B5%8B%E8%AF%95%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    
    <category term="01_jira" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/01-%E6%B5%8B%E8%AF%95%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/01-jira/"/>
    
    <category term="jira文件" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/01-%E6%B5%8B%E8%AF%95%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/01-jira/jira%E6%96%87%E4%BB%B6/"/>
    
    
    <category term="课后" scheme="http://example.com/tags/%E8%AF%BE%E5%90%8E/"/>
    
  </entry>
  
  <entry>
    <title>16_Jira创建冲刺（Sprint）</title>
    <link href="http://example.com/07_%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/01_%E6%B5%8B%E8%AF%95%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/01_jira/jira%E6%96%87%E4%BB%B6/16_Jira%E5%88%9B%E5%BB%BA%E5%86%B2%E5%88%BA%EF%BC%88Sprint%EF%BC%89/"/>
    <id>http://example.com/07_%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/01_%E6%B5%8B%E8%AF%95%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/01_jira/jira%E6%96%87%E4%BB%B6/16_Jira%E5%88%9B%E5%BB%BA%E5%86%B2%E5%88%BA%EF%BC%88Sprint%EF%BC%89/</id>
    <published>2022-05-03T04:06:21.143Z</published>
    <updated>2022-05-12T15:36:01.634Z</updated>
    
    <content type="html"><![CDATA[<p>团队需要在指定的时间段内完成一系列问题称为sprint。冲刺的持续时间由团队和产品所有者决定。</p><h4 id="创建Sprint"><a href="#创建Sprint" class="headerlink" title="创建Sprint"></a>创建Sprint</h4><p>以下是创建sprint的步骤：</p><ul><li>点击左侧出现的Backlog，如下图所示：</li></ul><p><img src="/assets/2/image-20220503122325-hc37vwk.png" alt="image.png"></p><ul><li>单击右下角出现的<strong>Create sprint</strong>按钮，如下面的屏幕截图所示：</li></ul><p><img src="/assets/2/image-20220503122330-wxxneyf.png" alt="image.png"></p><ul><li>单击<strong>Create sprint</strong>按钮后，将出现如下屏幕所示的屏幕：<br><img src="/assets/2/image-20220503122336-9h0prjr.png" alt="image.png"></li></ul><p>上面的屏幕显示sprint已创建名称为“Sprint 1”，现在可以将问题添加到此sprint中。</p><h4 id="向sprint添加问题"><a href="#向sprint添加问题" class="headerlink" title="向sprint添加问题"></a>向sprint添加问题</h4><p>以下是将问题添加到sprint所需的步骤：</p><ul><li>点击积压(Backlog)。</li><li>在“积压”列表中，右键单击该问题，然后选择要在其中添加问题的sprint。我们刚刚创建了名为<strong>Sprint 1</strong>的sprint，选择 <strong>Sprint 1</strong> 。<br><img src="/assets/2/image-20220503122342-a8sjdfm.png" alt="image.png"></li><li>问题<strong>TP-1</strong>被添加到sprint，即 <strong>Sprint 1</strong> 。<br><img src="/assets/2/image-20220503122347-2fbg1eh.png" alt="image.png"></li></ul><p>从上面的屏幕中，我们观察到<strong>TP-1</strong>问题被添加到<strong>Sprint 1</strong>中。</p><h4 id="从sprint中删除问题"><a href="#从sprint中删除问题" class="headerlink" title="从sprint中删除问题"></a>从sprint中删除问题</h4><p>从sprint中删除问题所遵循的步骤：</p><ul><li>单击Backlog。</li><li>将要从<strong>Sprint 1</strong>移动的问题拖放回Backlog列表。</li></ul><p><img src="/assets/2/image-20220503122352-1y9hbb7.png" alt="image.png"></p><p>上面的屏幕显示问题TP-1从Sprint 1移动到Backlog。</p><h4 id="开始冲刺"><a href="#开始冲刺" class="headerlink" title="开始冲刺"></a>开始冲刺</h4><p>开始一个冲刺的步骤：</p><ul><li>单击Backlog。</li><li>单击开始冲刺( <em>start sprint</em> )按钮开始冲刺。<br><img src="/assets/2/image-20220503122358-e851ht1.png" alt="image.png"></li></ul><p>填写以下详细信息以开始冲刺，例如冲刺名称，冲刺持续时间，结束日期，开始日期，冲刺目标。</p><p><img src="/assets/2/image-20220503122407-4txg2c7.png" alt="image.png"></p><p>现在，<strong>Sprint 1</strong>已经启动。最初，问题属于<strong>TO DO</strong>状态。</p><p><img src="/assets/2/image-20220503122413-422npat.png" alt="image.png"></p><h4 id="结束冲刺"><a href="#结束冲刺" class="headerlink" title="结束冲刺"></a>结束冲刺</h4><p>结束冲刺的步骤如下：</p><ul><li>单击Backlog。</li><li>单击项目左侧显示的活动冲刺。</li><li>选择要完成的sprint或结束sprint。</li><li>所有问题都完成后，点击右上角出现的完整冲刺按钮。</li></ul><p><img src="/assets/2/image-20220503122418-ptnmgap.png" alt="image.png"></p><ul><li>它将显示所有问题是否已完成，如果没有，则它会要求您将问题移至另一个尚未完成的sprint。</li></ul><p><img src="/assets/2/image-20220503122423-hd2jgct.png" alt="image.png"></p><h4 id="删除冲刺"><a href="#删除冲刺" class="headerlink" title="删除冲刺"></a>删除冲刺</h4><p>删除sprint要遵循的步骤：</p><ul><li>单击Backlog。</li><li>选择要删除的sprint，然后单击“…”图标。出现下拉列表，然后选择“删除sprint”选项。</li></ul><p><img src="/assets/2/image-20220503122429-4d0jq8k.png" alt="image.png"></p><ul><li>单击“删除冲刺( <em>Delete sprint</em> )”选项，单击“确认”按钮。</li></ul><p><img src="/assets/2/image-20220503122435-mjt7ncv.png" alt="image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;团队需要在指定的时间段内完成一系列问题称为sprint。冲刺的持续时间由团队和产品所有者决定。&lt;/p&gt;
&lt;h4 id=&quot;创建Sprint&quot;&gt;&lt;a href=&quot;#创建Sprint&quot; class=&quot;headerlink&quot; title=&quot;创建Sprint&quot;&gt;&lt;/a&gt;创建Sprin</summary>
      
    
    
    
    <category term="07_测试工具" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/"/>
    
    <category term="01_测试管理工具" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/01-%E6%B5%8B%E8%AF%95%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    
    <category term="01_jira" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/01-%E6%B5%8B%E8%AF%95%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/01-jira/"/>
    
    <category term="jira文件" scheme="http://example.com/categories/07-%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/01-%E6%B5%8B%E8%AF%95%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/01-jira/jira%E6%96%87%E4%BB%B6/"/>
    
    
    <category term="课后" scheme="http://example.com/tags/%E8%AF%BE%E5%90%8E/"/>
    
  </entry>
  
</feed>
